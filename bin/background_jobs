#!/bin/sh

cd $(dirname $0)/..
app_root=$(pwd)
sidekiq_pidfile="$app_root/tmp/pids/sidekiq-cluster.pid"
gitlab_user=$(ls -l config.ru | awk '{print $3}')
rails_env=${RAILS_ENV:-development}

warn()
{
  echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
  echo "$@" 1>&2
  echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
}

deprecation_notice() 
{
  target=$1
  alternative=$2
  warn "
  NOTE:
  The '$target' task is deprecated and will be removed soon.
  Use $alternative instead.
  "
}

gdk_notice() {
  warn "
  GitLab developers are encouraged to rely on the GDK and runit for process management.
  If you find yourself starting and stopping sidekiq regularly, you should consider
  using the GDK instead.
  More information here: https://gitlab.com/gitlab-org/gitlab-development-kit/
  "
}

read_sidekiq_pid() 
{
  if [ ! -f $sidekiq_pidfile ]; then
    warn "No pidfile found at $sidekiq_pidfile; is Sidekiq running?"
    return
  fi

  cat $sidekiq_pidfile
}

stop()
{
  sidekiq_pid=$(read_sidekiq_pid)
  if [ $sidekiq_pid ]; then
    kill -TERM $sidekiq_pid
  fi
}

killall()
{
  pkill -u $gitlab_user -f 'sidekiq [0-9]'
}

start()
{
  sidekiq_processes=${1:-2}
  cmd="exec"
  chpst=$(which chpst)

  # TODO: this is also done in the runit `run` script; remove?
  if [ -n "$chpst" ]; then
    cmd="${cmd} ${chpst} -P"
  fi

  ${cmd} ee/bin/sidekiq-cluster -p $sidekiq_processes -P $sidekiq_pidfile -e $rails_env
}

load_ok()
{
  sidekiq_pid=$(read_sidekiq_pid)
  if [ -z "$sidekiq_pid" ] ; then
    warn "Could not find a PID in $sidekiq_pidfile"
    exit 0
  fi

  if (ps -p $sidekiq_pid -o args | grep '\([0-9]\+\) of \1 busy' 1>&2) ; then
    warn "Too many busy Sidekiq workers"
    exit 1
  fi

  exit 0
}

case "$1" in
  stop)
    deprecation_notice $1 "a process supervisor"
    gdk_notice
    stop
    ;;
  start)
    shift
    start $@
    ;;
  start_no_deamonize)
    deprecation_notice $1 "'start'"
    shift
    start $@
    ;;
  start_foreground)
    deprecation_notice $1 "'start'"
    shift
    start $@
    ;;
  restart)
    deprecation_notice $1 "'stop', then restart manually or use a process supervisor"
    gdk_notice
    stop
    ;;
  killall)
    deprecation_notice $1 "a process supervisor"
    gdk_notice
    killall
    ;;
  load_ok)
    deprecation_notice $1 "a process supervisor"
    gdk_notice
    load_ok
    ;;
  *)
    echo "Usage: RAILS_ENV=<env> $0 start <num_workers>"
esac
