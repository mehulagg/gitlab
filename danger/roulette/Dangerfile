# frozen_string_literal: true

require 'digest/md5'

MESSAGE = <<MARKDOWN
## Reviewer roulette

Changes that require review have been detected! A merge request is normally
reviewed by both a reviewer and a maintainer in its primary category (e.g.
~frontend or ~backend), and by a maintainer in all other categories.
MARKDOWN

CATEGORY_TABLE_HEADER = <<MARKDOWN

To spread load more evenly across eligible reviewers, Danger has randomly picked
a candidate for each review slot. Feel free to
[override these selections](https://about.gitlab.com/handbook/engineering/projects/#gitlab)
if you think someone else would be better-suited, or the chosen person is unavailable.

To read more on how to use the reviewer roulette, please take a look at the
[Engineering workflow](https://about.gitlab.com/handbook/engineering/workflow/#basics)
and [code review guidelines](https://docs.gitlab.com/ee/development/code_review.html).

Once you've decided who will review this merge request, mention them as you
normally would! Danger does not (yet?) automatically notify them for you.

| Category | Reviewer | Maintainer |
| -------- | -------- | ---------- |
MARKDOWN

UNKNOWN_FILES_MESSAGE = <<MARKDOWN

These files couldn't be categorised, so Danger was unable to suggest a reviewer.
Please consider creating a merge request to
[add support](https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/danger/helper.rb)
for them.
MARKDOWN

OPTIONAL_REVIEW_TEMPLATE = "%{role} review is optional for %{category}".freeze
NOT_AVAILABLE_TEMPLATE = 'No %{role} available'.freeze

Spin = Struct.new(:reviewer, :maintainer, :optional)

def spin_role_for_category(team, role, project, category)
  team.select do |member|
    member.public_send("#{role}?", project, category, gitlab.mr_labels) # rubocop:disable GitlabSecurity/PublicSend
  end
end

def spin_for_category(team, project, category, branch_name)
  reviewers, traintainers, maintainers =
    %i[reviewer traintainer maintainer].map do |role|
      spin_role_for_category(team, role, project, category)
    end

  # TODO: take CODEOWNERS into account?
  # https://gitlab.com/gitlab-org/gitlab/issues/26723

  # Make traintainers have triple the chance to be picked as a reviewer
  random = roulette.new_random(branch_name)
  reviewer = roulette.spin_for_person(reviewers + traintainers + traintainers, random: random)
  maintainer = roulette.spin_for_person(maintainers, random: random)

  Spin.new(reviewer, maintainer).tap do |spin|
    if [:qa, :test].include?(category)
      spin.optional = :maintainer
    end
  end
end

def note_for_category_role(category, role, spin)
  if spin.optional == role
    return OPTIONAL_REVIEW_TEMPLATE % { role: role.capitalize, category: helper.label_for_category(category) }
  end

  spin.public_send(role)&.markdown_name || NOT_AVAILABLE_TEMPLATE % { role: role } # rubocop:disable GitlabSecurity/PublicSend
end

def markdown_row_for_category(category, spin)
  reviewer_note = note_for_category_role(category, :reviewer, spin)
  maintainer_note = note_for_category_role(category, :maintainer, spin)

  "| #{helper.label_for_category(category)} | #{reviewer_note} | #{maintainer_note} |"
end

changes = helper.changes_by_category

# Ignore any files that are known but uncategorized. Prompt for any unknown files
changes.delete(:none)
categories = changes.keys - [:unknown]

# Ensure to spin for database reviewer/maintainer when ~database is applied (e.g. to review SQL queries)
categories << :database if gitlab.mr_labels.include?('database') && !categories.include?(:database)

if changes.any?
  project = helper.project_name

  team =
    begin
      roulette.project_team(project)
    rescue => err
      warn("Reviewer roulette failed to load team data: #{err.message}")
      []
    end

  # Strip leading and trailing CE/EE markers
  canonical_branch_name =
    roulette.canonical_branch_name(gitlab.mr_json['source_branch'])

  spin_per_category = categories.each_with_object({}) do |category, memo|
    memo[category] = spin_for_category(team, project, category, canonical_branch_name)
  end

  rows = spin_per_category.map do |category, spin|
    case category
    when :test
      if spin.reviewer.nil?
        # Fetch an already picked backend reviewer, or pick one otherwise
        spin.reviewer = spin_per_category[:backend]&.reviewer || spin_for_category(team, project, :backend, canonical_branch_name).reviewer
      end
    when :engineering_productivity
      if spin.maintainer.nil?
        # Fetch an already picked backend maintainer, or pick one otherwise
        spin.maintainer = spin_per_category[:backend]&.maintainer || spin_for_category(team, project, :backend, canonical_branch_name).maintainer
      end
    end

    markdown_row_for_category(category, spin)
  end

  unknown = changes.fetch(:unknown, [])

  markdown(MESSAGE)
  markdown(CATEGORY_TABLE_HEADER + rows.join("\n")) unless rows.empty?
  markdown(UNKNOWN_FILES_MESSAGE + helper.markdown_list(unknown)) unless unknown.empty?
end
