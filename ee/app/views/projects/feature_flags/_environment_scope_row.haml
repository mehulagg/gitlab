- form_field = local_assigns.fetch(:form_field, nil)
- scope = local_assigns.fetch(:scope, nil)

- id = scope&.id
- active = scope&.active

- id_input_name = "#{form_field}[scopes_attributes][][id]"
- destroy_input_name = "#{form_field}[scopes_attributes][][_destroy]"
- active_input_name = "#{form_field}[scopes_attributes][][active]"

%li.js-row.ci-variable-row{ data: { is_persisted: "#{!id.nil?}" } }
  .ci-variable-row-body
    %input.js-ci-variable-input-id{ type: "hidden", name: id_input_name, value: id }
    %input.js-ci-variable-input-destroy{ type: "hidden", name: destroy_input_name }
    .ci-variable-body-item.ci-variable-protected-item
    .append-right-default
      = s_("CiVariable|Active")
    %button{ type: 'button',
      class: "js-project-feature-toggle project-feature-toggle #{'is-checked' if active}",
      "aria-label": s_("CiVariable|Toggle protected") }
      %input{ type: "hidden",
        class: 'js-ci-variable-input-protected js-project-feature-toggle-input',
        name: active_input_name,
        value: active,
        data: { default: true.to_s } }
      %span.toggle-icon
      = sprite_icon('status_success_borderless', size: 16, css_class: 'toggle-icon-svg toggle-status-checked')
      = sprite_icon('status_failed_borderless', size: 16, css_class: 'toggle-icon-svg toggle-status-unchecked')
    = render 'environment_scope_dropdown', form_field: form_field, scope: scope
  %button.js-row-remove-button.ci-variable-row-remove-button{ type: 'button', 'aria-label': s_('CiVariables|Remove variable row') }
    = icon('minus-circle')
