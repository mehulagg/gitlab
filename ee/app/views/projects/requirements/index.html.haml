- page_title _('Requirements')
- type = :requirements
- page_context_word = type.to_s.humanize(capitalize: false)
- @content_class = 'requirements-container'

-# We'd prefer to have following declarations be part of
-# helpers in some way but given that they're very frontend-centeric,
-# keeping them in HAML view makes more sense.
- page_size = 20
- ignore_page_params = ['next', 'prev', 'page']
- requirements_count = Hash.new(0).merge(@project.requirements.counts_by_state)
- total_requirements = requirements_count['opened'] + requirements_count['archived']
- is_open_tab = params[:state].nil? || params[:state] == 'opened'

- if is_open_tab
  - current_tab_count = requirements_count['opened'] > page_size ? page_size : requirements_count['opened']
- elsif params[:state] == 'archived'
  - current_tab_count = requirements_count['archived'] > page_size ? page_size : requirements_count['archived']
- else
  - current_tab_count = total_requirements > page_size ? page_size : total_requirements

.top-area
  %ul.nav-links.mobile-separator.requirements-state-filters.js-requirements-state-filters
    %li{ class: active_when(is_open_tab) }>
      = link_to page_filter_path(state: 'opened', without: ignore_page_params), id: 'state-opened', title: (_("Filter by %{issuable_type} that are currently opened.") % { issuable_type: page_context_word }), data: { state: 'opened' } do
        = _('Open')
        %span.badge.badge-pill.js-opened-count= requirements_count['opened']

    %li{ class: active_when(params[:state] == 'archived') }>
      = link_to page_filter_path(state: 'archived', without: ignore_page_params), id: 'state-archived', title: (_("Filter by %{issuable_type} that are currently archived.") % { issuable_type: page_context_word }), data: { state: 'archived' } do
        = _('Archived')
        %span.badge.badge-pill.js-archived-count= requirements_count['archived']

    %li{ class: active_when(params[:state] == 'all') }>
      = link_to page_filter_path(state: 'all', without: ignore_page_params), id: 'state-all', title: (_("Show all %{issuable_type}.") % { issuable_type: page_context_word }), data: { state: 'all' } do
        = _('All')
        %span.badge.badge-pill.js-all-count= total_requirements

  .nav-controls
    - if is_open_tab && can?(current_user, :create_requirement, @project)
      %button.btn.btn-success.js-new-requirement.qa-new-requirement-button{ type: 'button' }
        = _('New requirement')

#js-requirements-app{ data: { filter_by: params[:state],
  page: params[:page],
  prev: params[:prev],
  next: params[:next],
  project_path: @project.full_path,
  opened: requirements_count['opened'],
  archived: requirements_count['archived'],
  all: total_requirements,
  requirements_web_url: project_requirements_path(@project),
  empty_state_path: image_path('illustrations/empty-state/empty-requirements-lg.svg') } }
  - if current_tab_count == 0
    -# Show regular spinner only when there will be no
    -# requirements to show for current tab.
    .gl-spinner-container.mt-3
      %span.align-text-bottom.gl-spinner.gl-spinner-orange.gl-spinner-md{ aria: { label: _('Loading'), hidden: 'true' } }
  - else
    -# Following block shows skeleton loading same as mounted Vue app so while
    -# app is being loaded and initialized, user continues to see skeleton loading.
    .requirements-list-container
      %ul.content-list.issuable-list.issues-list.requirements-list-loading
        - Array.new(current_tab_count).each do |i|
          %li.issue.requirement
            .animation-container.pt-2
              .skeleton-line-1
              .skeleton-line-2
