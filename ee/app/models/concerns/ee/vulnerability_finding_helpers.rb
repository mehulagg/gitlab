# frozen_string_literal: true

module EE
  module VulnerabilityFindingHelpers
    extend ActiveSupport::Concern

    def matches_fingerprints(other_fingerprints, other_uuid)
      other_fingerprint_types = other_fingerprints.index_by(&:algorithm_type)

      # highest first
      match_result = nil
      fingerprints.sort_by(&:priority).reverse_each do |fingerprint|
        matching_other_fingerprint = other_fingerprint_types[fingerprint.algorithm_type]
        next if matching_other_fingerprint.nil?

        match_result = matching_other_fingerprint == fingerprint
        break
      end

      if match_result.nil?
        Set.new([uuid, *fingerprint_uuids]).include?(other_uuid)
      else
        match_result
      end
    end

    def fingerprint_uuids
      fingerprints.map do |fingerprint|
        hex_sha = fingerprint.fingerprint_hex
        ::Security::VulnerabilityUUID.generate(
          report_type: report_type,
          location_fingerprint: hex_sha,
          primary_identifier_fingerprint: primary_identifier&.fingerprint,
          project_id: project_id
        )
      end
    end
  end
end
