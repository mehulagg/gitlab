import Vue from 'vue';
import { s__, __ } from '~/locale';
import * as types from './mutation_types';

export default {
  [types.SET_ISSUE_MODAL_DATA](state, payload) {
    const { issue, status, vulnerability } = payload;

    // We should be able to remove this if block once
    // https://gitlab.com/groups/gitlab-org/-/epics/1425 is completed
    if (issue) {
      Vue.set(state.modal, 'title', issue.title);
      Vue.set(state.modal.data.description, 'value', issue.description);
      Vue.set(state.modal.data.file, 'value', issue.location && issue.location.file);
      Vue.set(state.modal.data.file, 'url', issue.urlPath);
      Vue.set(state.modal.data.className, 'value', issue.location && issue.location.class);
      Vue.set(state.modal.data.methodName, 'value', issue.location && issue.location.method);
      Vue.set(state.modal.data.image, 'value', issue.location && issue.location.image);
      Vue.set(
        state.modal.data.namespace,
        'value',
        issue.location && issue.location.operating_system,
      );

      if (issue.identifiers && issue.identifiers.length > 0) {
        Vue.set(state.modal.data.identifiers, 'value', issue.identifiers);
      } else {
        // Force a null value for identifiers to avoid showing an empty array
        Vue.set(state.modal.data.identifiers, 'value', null);
      }

      Vue.set(state.modal.data.severity, 'value', issue.severity);
      Vue.set(state.modal.data.confidence, 'value', issue.confidence);

      if (issue.links && issue.links.length > 0) {
        Vue.set(state.modal.data.links, 'value', issue.links);
      } else {
        // Force a null value for links to avoid showing an empty array
        Vue.set(state.modal.data.links, 'value', null);
      }

      Vue.set(state.modal.data.instances, 'value', issue.instances);
      Vue.set(state.modal, 'vulnerability', issue);
      Vue.set(state.modal, 'isResolved', status === 'success');

      // clear previous state
      Vue.set(state.modal, 'error', null);
    }

    if (vulnerability) {
      const { location } = vulnerability;
      Vue.set(state.modal, 'title', vulnerability.name);
      Vue.set(state.modal.data.description, 'value', vulnerability.description);
      Vue.set(
        state.modal.data.project,
        'value',
        vulnerability.project && vulnerability.project.full_name,
      );
      Vue.set(
        state.modal.data.project,
        'url',
        vulnerability.project && vulnerability.project.full_path,
      );

      Vue.set(
        state.modal.data.identifiers,
        'value',
        vulnerability.identifiers.length && vulnerability.identifiers,
      );

      if (location) {
        const {
          file,
          start_line: startLine,
          end_line: endLine,
          image,
          operating_system: namespace,
          class: className,
        } = location;

        let lineSuffix = '';

        if (startLine) {
          lineSuffix += `:${startLine}`;
          if (endLine && startLine !== endLine) {
            lineSuffix += `-${endLine}`;
          }
        }

        Vue.set(state.modal.data.className, 'value', className);
        Vue.set(state.modal.data.file, 'value', file ? `${file}${lineSuffix}` : null);
        Vue.set(state.modal.data.image, 'value', image);
        Vue.set(state.modal.data.namespace, 'value', namespace);
      }

      Vue.set(state.modal.data.severity, 'value', vulnerability.severity);
      Vue.set(state.modal.data.reportType, 'value', vulnerability.report_type);
      Vue.set(state.modal.data.confidence, 'value', vulnerability.confidence);
      Vue.set(state.modal, 'vulnerability', vulnerability);
      Vue.set(
        state.modal.vulnerability,
        'hasIssue',
        Boolean(vulnerability.issue_feedback && vulnerability.issue_feedback.issue_iid),
      );
      Vue.set(
        state.modal.vulnerability,
        'hasMergeRequest',
        Boolean(
          vulnerability.merge_request_feedback &&
            vulnerability.merge_request_feedback.merge_request_iid,
        ),
      );
      Vue.set(state.modal.vulnerability, 'isDismissed', Boolean(vulnerability.dismissal_feedback));
      Vue.set(state.modal, 'error', null);
      Vue.set(state.modal, 'isCommentingOnDismissal', false);

      if (vulnerability.instances && vulnerability.instances.length) {
        Vue.set(state.modal.data.instances, 'value', vulnerability.instances);
      } else {
        Vue.set(state.modal.data.instances, 'value', null);
      }

      if (vulnerability.links && vulnerability.links.length) {
        Vue.set(state.modal.data.links, 'value', vulnerability.links);
      } else {
        Vue.set(state.modal.data.links, 'value', null);
      }
    }
  },
  [types.OPEN_DISMISSAL_COMMENT_BOX](state) {
    state.modal.isCommentingOnDismissal = true;
  },
  [types.CLOSE_DISMISSAL_COMMENT_BOX](state) {
    state.modal.isCommentingOnDismissal = false;
    state.modal.isShowingDeleteButtons = false;
  },
  [types.REQUEST_CREATE_ISSUE](state) {
    state.modal.isCreatingNewIssue = true;
    state.modal.error = null;
  },
  [types.RECEIVE_CREATE_ISSUE_SUCCESS](state) {
    state.modal.isCreatingNewIssue = false;
  },
  [types.RECEIVE_CREATE_ISSUE_ERROR](state, error = __('There was an error creating the issue')) {
    state.modal.isCreatingNewIssue = false;
    state.modal.error = error;
  },
  [types.REQUEST_DISMISS_VULNERABILITY](state) {
    state.modal.isDismissingVulnerability = true;
    state.modal.error = null;
  },
  [types.RECEIVE_DISMISS_VULNERABILITY_SUCCESS](state) {
    state.modal.isDismissingVulnerability = false;
    state.modal.vulnerability.isDismissed = true;
  },
  [types.RECEIVE_DISMISS_VULNERABILITY_ERROR](
    state,
    error = s__('Security Reports|There was an error dismissing the vulnerability.'),
  ) {
    state.modal.isDismissingVulnerability = false;
    state.modal.error = error;
  },
  [types.REQUEST_ADD_DISMISSAL_COMMENT](state) {
    state.modal.isDismissingVulnerability = true;
    state.modal.error = null;
  },
  [types.RECEIVE_ADD_DISMISSAL_COMMENT_SUCCESS](state, payload) {
    state.modal.isDismissingVulnerability = false;
    state.modal.vulnerability.isDismissed = true;
    state.modal.vulnerability.dismissalFeedback = payload.data;
  },
  [types.RECEIVE_ADD_DISMISSAL_COMMENT_ERROR](
    state,
    error = s__('Security Reports|There was an error adding the comment.'),
  ) {
    state.modal.isDismissingVulnerability = false;
    state.modal.error = error;
  },
  [types.REQUEST_DELETE_DISMISSAL_COMMENT](state) {
    state.modal.isDismissingVulnerability = true;
    state.modal.error = null;
  },
  [types.RECEIVE_DELETE_DISMISSAL_COMMENT_SUCCESS](state, payload) {
    state.modal.isDismissingVulnerability = false;
    state.modal.vulnerability.isDismissed = true;
    state.modal.vulnerability.dismissalFeedback = payload.data;
  },
  [types.RECEIVE_DELETE_DISMISSAL_COMMENT_ERROR](state, error) {
    state.modal.isDismissingVulnerability = false;
    state.modal.error = error;
  },
  [types.SHOW_DISMISSAL_DELETE_BUTTONS](state) {
    state.modal.isShowingDeleteButtons = true;
  },
  [types.HIDE_DISMISSAL_DELETE_BUTTONS](state) {
    state.modal.isShowingDeleteButtons = false;
  },
  [types.REQUEST_REVERT_DISMISSAL](state) {
    state.modal.isDismissingVulnerability = true;
    state.modal.error = null;
  },
  [types.RECEIVE_REVERT_DISMISSAL_SUCCESS](state) {
    state.modal.isDismissingVulnerability = false;
    state.modal.vulnerability.isDismissed = false;
  },
  [types.RECEIVE_REVERT_DISMISSAL_ERROR](state) {
    state.modal.isDismissingVulnerability = false;
    state.modal.error = s__('Security Reports|There was an error reverting the dismissal.');
  },
  [types.REQUEST_CREATE_MERGE_REQUEST](state) {
    state.modal.isCreatingMergeRequest = true;
    state.modal.error = null;
  },
  [types.RECEIVE_CREATE_MERGE_REQUEST_ERROR](
    state,
    error = s__('security Reports|There was an error creating the merge request'),
  ) {
    state.modal.isCreatingMergeRequest = false;
    state.modal.error = error;
  },
};
