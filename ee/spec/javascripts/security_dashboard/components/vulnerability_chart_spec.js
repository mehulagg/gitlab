import Vue from 'vue';
import MockAdapater from 'axios-mock-adapter';
import axios from '~/lib/utils/axios_utils';

import component from 'ee/security_dashboard/components/vulnerability_chart.vue';
import createStore from 'ee/security_dashboard/store';
import { mountComponentWithStore } from 'spec/helpers/vue_mount_component_helper';
import waitForPromises from 'spec/helpers/wait_for_promises';

import { resetStore } from '../helpers';
import mockDataVulnerabilitiesTimeline from '../store/vulnerabilities/data/mock_data_vulnerabilities_timeline.json';

describe('Vulnerabilities Chart', () => {
  const Component = Vue.extend(component);
  const vulnerabilitiesTimelineEndpoint = '/vulnerabilitiesEndpoint.json';
  let store;
  let mock;
  let vm;

  beforeEach(() => {
    store = createStore();
    store.state.vulnerabilities.vulnerabilitiesTimelineEndpoint = vulnerabilitiesTimelineEndpoint;
    mock = new MockAdapater(axios);
    mock.onGet(vulnerabilitiesTimelineEndpoint).replyOnce(200, mockDataVulnerabilitiesTimeline);
    vm = mountComponentWithStore(Component, { store });
  });

  afterEach(() => {
    resetStore(store);
    vm.$destroy();
    mock.restore();
  });

  it('should render the e-chart instance', done => {
    waitForPromises()
      .then(() => {
        expect(vm.$el.querySelector('[_echarts_instance_]')).not.toBeNull();
        done();
      })
      .catch(done.fail);
  });
});
