# frozen_string_literal: true

require 'spec_helper'
require Rails.root.join('db', 'post_migrate', '20200228111111_migrate_vulnerability_occurrences_to_vulnerabilities.rb')

describe MigrateVulnerabilityOccurrencesToVulnerabilities, :migration, :sidekiq do
  let(:users) { table(:users) }
  let(:namespaces) { table(:namespaces) }
  let(:projects) { table(:projects) }
  let(:pipelines) { table(:ci_pipelines) }

  let(:namespace) { namespaces.create!(name: 'gitlab', path: 'gitlab-org') }
  let(:project_1) { projects.create!(name: 'gitlab', path: 'gitlab-ce', namespace_id: namespace.id) }
  let(:project_2) { projects.create!(name: 'gitlab2', path: 'gitlab-ce', namespace_id: namespace.id) }
  let(:pipeline_1) { pipelines.create!(project_id: project_1.id, ref: 'master', sha: 'adf43c3a', status: 'success') }
  let(:pipeline_2) { pipelines.create!(project_id: project_2.id, ref: 'master', sha: 'adf43c3a', status: 'success') }

  let(:vulnerability_occurrences) { table(:vulnerability_occurrences) }
  let(:vulnerability_occurrence_pipelines) { table(:vulnerability_occurrence_pipelines) }
  let(:scanners) { table(:vulnerability_scanners) }
  let(:identifiers) { table(:vulnerability_identifiers) }
  let(:vulnerabilities) { table(:vulnerabilities) }

  before do
    stub_const("#{described_class.name}::BATCH_SIZE", 1)

    users.create!(id: 1, projects_limit: 10)

    identifiers_common_attrs_1 = { project_id: project_1.id, external_type: 'SECURITY_ID' }
    identifiers_common_attrs_2 = { project_id: project_2.id, external_type: 'SECURITY_ID' }

    proj_1_identifier_1 =
      identifiers.create!(id: 1, fingerprint: '1111111111111111111111111111111111111111', external_id: 'SECURITY_1',
                          name: 'SECURITY_IDENTIFIER 1', **identifiers_common_attrs_1)
    proj_2_identifier_2 =
      identifiers.create!(id: 2, fingerprint: '2222222222222222222222222222222222222222', external_id: 'SECURITY_2',
                          name: 'SECURITY_IDENTIFIER 1', **identifiers_common_attrs_2)
    proj_2_identifier_3 =
      identifiers.create!(id: 3, fingerprint: '3333333333333333333333333333333333333333', external_id: 'SECURITY_2',
                          name: 'SECURITY_IDENTIFIER 1', **identifiers_common_attrs_2)

    scanner_1 = scanners.create!(id: 1, project_id: project_1.id, name: 'scanner', external_id: 'SCANNER_ID')
    scanner_2 = scanners.create!(id: 2, project_id: project_2.id, name: 'scanner', external_id: 'SCANNER_ID')

    proj_1_findings_common_attrs_1 =
      { project_id: project_1.id, scanner_id: scanner_1.id, severity: 0,
        confidence: 0, metadata_version: 'sast:1.0', raw_metadata: '{}' }
    proj_2_findings_common_attrs_2 =
      { project_id: project_2.id, scanner_id: scanner_2.id, severity: 0,
        confidence: 0, metadata_version: 'sast:1.0', raw_metadata: '{}' }
    proj_2_findings_common_attrs_3 =
      { project_id: project_2.id, scanner_id: scanner_2.id, severity: 0,
        confidence: 0, metadata_version: 'sast:1.0', raw_metadata: '{}' }

    proj_1_occurrence_1 = vulnerability_occurrences.create!(
      id: 1, report_type: 0, name: 'finding_1', primary_identifier_id: proj_1_identifier_1.id,
      uuid: 'abc', project_fingerprint: 'abc123',
      location_fingerprint: 'abc123', **proj_1_findings_common_attrs_1)

    proj_2_occurrence_2 = vulnerability_occurrences.create!(
      id: 2, report_type: 0, name: 'finding_2', primary_identifier_id: proj_2_identifier_2.id,
      uuid: 'def', project_fingerprint: 'def345',
      location_fingerprint: 'def345', **proj_2_findings_common_attrs_2)
    proj_2_occurrence_3 = vulnerability_occurrences.create!(
      id: 3, report_type: 0, name: 'finding_3', primary_identifier_id: proj_2_identifier_3.id,
      uuid: 'ghi', project_fingerprint: 'ghi678',
      location_fingerprint: 'ghi678', **proj_2_findings_common_attrs_3)

    vulnerability_occurrence_pipelines.create!(occurrence_id: proj_1_occurrence_1.id, pipeline_id: pipeline_1.id)
    vulnerability_occurrence_pipelines.create!(occurrence_id: proj_2_occurrence_2.id, pipeline_id: pipeline_2.id)
    vulnerability_occurrence_pipelines.create!(occurrence_id: proj_2_occurrence_3.id, pipeline_id: pipeline_2.id)
  end

  context 'EE' do
    before do
      allow(Gitlab).to receive(:ee?).and_return(true)
    end

    it 'creates background job for each project' do
      migrate!

      expect(BackgroundMigrationWorker.jobs.size).to eq 2
    end
  end

  context 'FOSS' do
    before do
      allow(Gitlab).to receive(:ee?).and_return(false)
    end

    it 'skips migration for FOSS' do
      Sidekiq::Testing.fake! do
        migrate!

        expect(BackgroundMigrationWorker.jobs.size).to eq 0
      end
    end
  end
end
