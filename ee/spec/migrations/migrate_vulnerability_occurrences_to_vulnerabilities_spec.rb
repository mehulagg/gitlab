# frozen_string_literal: true

require 'spec_helper'
require Rails.root.join('db', 'post_migrate', '20200228111111_migrate_vulnerability_occurrences_to_vulnerabilities.rb')

describe MigrateVulnerabilityOccurrencesToVulnerabilities, :migration, :sidekiq do
  let(:users) { table(:users) }
  let(:namespaces) { table(:namespaces) }
  let(:projects) { table(:projects) }
  let(:pipelines) { table(:ci_pipelines) }

  let(:namespace) { namespaces.create!(name: 'gitlab', path: 'gitlab-org') }
  let(:project) { projects.create!(name: 'gitlab', path: 'gitlab-ce', namespace_id: namespace.id) }
  let(:pipeline) { pipelines.create!(project_id: project.id, ref: 'master', sha: 'adf43c3a', status: 'success') }

  let(:vulnerability_occurrences) { table(:vulnerability_occurrences) }
  let(:vulnerability_occurrence_pipelines) { table(:vulnerability_occurrence_pipelines) }
  let(:scanners) { table(:vulnerability_scanners) }
  let(:identifiers) { table(:vulnerability_identifiers) }
  let(:vulnerabilities) { table(:vulnerabilities) }

  before do
    users.create!(id: 1, projects_limit: 10)

    identifiers_common_attrs = { project_id: project.id, external_type: 'SECURITY_ID' }

    identifier_1 =
      identifiers.create!(id: 1, fingerprint: '1111111111111111111111111111111111111111', external_id: 'SECURITY_1',
                          name: 'SECURITY_IDENTIFIER 1', **identifiers_common_attrs)
    scanner = scanners.create!(id: 1, project_id: project.id, name: 'scanner', external_id: 'SCANNER_ID')

    findings_common_attrs =
      { project_id: project.id, scanner_id: scanner.id, severity: 0,
        confidence: 0, metadata_version: 'sast:1.0', raw_metadata: '{}' }

    occurrence = vulnerability_occurrences.create!(
      id: 1, report_type: 0, name: 'finding_1', primary_identifier_id: identifier_1.id,
      uuid: 'abc', project_fingerprint: 'abc123',
      location_fingerprint: 'abc123', **findings_common_attrs)

    vulnerability_occurrence_pipelines.create!(occurrence_id: occurrence.id, pipeline_id: pipeline.id)
  end

  it 'sends jobs to the background' do
    allow_any_instance_of(Gitlab).to receive(:ee?).and_return(true)

    migrate!

    expect(BackgroundMigrationWorker.jobs.size).to eq 1
  end

  context 'CE' do
    before do
      stub_env('FOSS_ONLY', 1)
      Gitlab.instance_variable_set(:@is_ee, false)
    end

    it 'skips migration for CE' do
      Sidekiq::Testing.fake! do
        migrate!

        expect(BackgroundMigrationWorker.jobs.size).to eq 0
      end
    end
  end
end
