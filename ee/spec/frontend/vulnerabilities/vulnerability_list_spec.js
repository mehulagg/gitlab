import { mount } from '@vue/test-utils';
import { GlEmptyState, GlSkeletonLoading } from '@gitlab/ui';
import RemediatedBadge from 'ee/vulnerabilities/components/remediated_badge.vue';
import SelectionSummary from 'ee/security_dashboard/components/selection_summary.vue';
import VulnerabilityList from 'ee/vulnerabilities/components/vulnerability_list.vue';
import { generateVulnerabilities, vulnerabilities } from './mock_data';

describe('Vulnerability list component', () => {
  let wrapper;

  const defaultData = {
    selectedVulnerabilities: {},
  };

  const createWrapper = ({ props = {}, data = defaultData }) => {
    return mount(VulnerabilityList, {
      propsData: {
        dashboardDocumentation: '#',
        emptyStateSvgPath: '#',
        vulnerabilities: [],
        ...props,
      },
      stubs: {
        GlPopover: true,
      },
      data: () => data,
      attachToDocument: true,
    });
  };

  const findCell = label => wrapper.find(`.js-${label}`);
  const findRow = (index = 0) => wrapper.findAll('tbody tr').at(index);
  const findSelectionSummary = () => wrapper.find(SelectionSummary);
  const findCheckAllCheckboxCell = () => wrapper.find('thead tr th');
  const findFirstCheckboxCell = () => wrapper.find('tbody tr td');
  const findLocation = id => wrapper.find(`[data-testid="location-${id}"]`);

  afterEach(() => {
    wrapper.destroy();
    wrapper = null;
  });

  describe('with vulnerabilities', () => {
    let newVulnerabilities;

    beforeEach(() => {
      newVulnerabilities = generateVulnerabilities();
      wrapper = createWrapper({ props: { vulnerabilities: newVulnerabilities } });
    });

    it('should render a list of vulnerabilities', () => {
      expect(wrapper.findAll('.js-status')).toHaveLength(newVulnerabilities.length);
    });

    it('should correctly render the status', () => {
      const cell = findCell('status');

      expect(cell.text()).toBe(newVulnerabilities[0].state);
    });

    it('should correctly render the severity', () => {
      const cell = findCell('severity');
      expect(cell.text().toLowerCase()).toBe(newVulnerabilities[0].severity);
    });

    it('should correctly render the scanner type', () => {
      const cell = findCell('reportType');
      expect(cell.text().toLowerCase()).toBe(newVulnerabilities[0].reportType);
    });

    it('should correctly render the description', () => {
      const cell = findCell('description');

      expect(cell.text()).toBe(newVulnerabilities[0].title);
    });

    it('should not show the selection summary if no vulnerabilities are selected', () => {
      expect(findSelectionSummary().exists()).toBe(false);
    });

    it('should not show the checkboxes if shouldShowSelection is passed in', () => {
      expect(findCheckAllCheckboxCell().classes()).toContain('d-none');
      expect(findFirstCheckboxCell().classes()).toContain('d-none');
    });
  });

  describe('when vulnerability selection is enabled', () => {
    beforeEach(() => {
      wrapper = createWrapper({
        props: { vulnerabilities, shouldShowSelection: true },
      });

      findFirstCheckboxCell()
        .find('input')
        .setChecked(true);
    });

    it('should show the selection summary when a checkbox is selected', () => {
      return wrapper.vm.$nextTick().then(() => {
        expect(findSelectionSummary().exists()).toBe(true);
      });
    });

    it('should show the checkboxes if shouldShowSelection is passed in', () => {
      expect(findCheckAllCheckboxCell().classes()).not.toContain('d-none');
      expect(findFirstCheckboxCell().classes()).not.toContain('d-none');
    });

    it('should sync selected vulnerabilities when the vulnerability list is updated', () => {
      expect(findSelectionSummary().props('selectedVulnerabilities')).toHaveLength(1);
      wrapper.setProps({ vulnerabilities: [] });
      return wrapper.vm.$nextTick().then(() => {
        expect(findSelectionSummary().exists()).toBe(false);
      });
    });
  });

  describe('when displayed on instance or group level dashboard', () => {
    it('should display the vulnerability locations', () => {
      const newVulnerabilities = generateVulnerabilities();
      wrapper = createWrapper({
        props: { vulnerabilities: newVulnerabilities, shouldShowProjectNamespace: true },
      });
      expect(findLocation(newVulnerabilities[0].id).text()).toContain(
        'Administrator / Security reports',
      );
      expect(findLocation(newVulnerabilities[0].id).text()).toContain(
        'registry.gitlab.com/groulot/container-scanning-test/master:5f21de6956aee99ddb68ae49498662d9872f50ff',
      );
      expect(findLocation(newVulnerabilities[1].id).text()).toContain(
        'Administrator / Vulnerability reports',
      );
      expect(findLocation(newVulnerabilities[1].id).text()).toContain(
        'src/main/java/com/gitlab/security_products/tests/App.java',
      );
    });

    it('should not display the vulnerability locations', () => {
      const vulnerabilityWithoutLocation = [
        {
          id: 'id_0',
          title: 'Vulnerability 1',
          severity: 'critical',
          state: 'dismissed',
          location: {},
          project: {
            nameWithNamespace: 'Administrator / Security reports',
          },
        },
      ];
      wrapper = createWrapper({
        props: { vulnerabilities: vulnerabilityWithoutLocation, shouldShowProjectNamespace: true },
      });
      expect(findLocation(vulnerabilityWithoutLocation[0].id).text()).toContain(
        'Administrator / Security reports',
      );
      expect(findLocation(vulnerabilityWithoutLocation[0].id).findAll('div').length).toBe(2);
    });
  });

  describe('when displayed on a project level dashboard', () => {
    let newVulnerabilities;
    beforeEach(() => {
      newVulnerabilities = generateVulnerabilities();
      wrapper = createWrapper({
        props: { vulnerabilities: newVulnerabilities },
      });
    });

    it('should not display the vulnerability locations', () => {
      expect(findLocation(newVulnerabilities[0].id).text()).not.toContain(
        'Administrator / Security reports',
      );
      expect(findLocation(newVulnerabilities[0].id).text()).toContain(
        'registry.gitlab.com/groulot/container-scanning-test/master:5f21de6956aee99ddb68ae49498662d9872f50ff',
      );
      expect(findLocation(newVulnerabilities[1].id).text()).not.toContain(
        'Administrator / Vulnerability reports',
      );
      expect(findLocation(newVulnerabilities[1].id).text()).toContain(
        'src/main/java/com/gitlab/security_products/tests/App.java',
      );
    });
  });

  describe('when a vulnerability is resolved on the default branch', () => {
    let newVulnerabilities;

    beforeEach(() => {
      newVulnerabilities = generateVulnerabilities();
      newVulnerabilities[0].resolved_on_default_branch = true;
      wrapper = createWrapper({ props: { vulnerabilities: newVulnerabilities } });
    });

    it('should render the remediated info badge on the first vulnerability', () => {
      const row = findRow(0);
      const badge = row.find(RemediatedBadge);

      expect(badge.exists()).toEqual(true);
    });

    it('should not render the remediated info badge on the second vulnerability', () => {
      const row = findRow(1);
      const badge = row.find(RemediatedBadge);

      expect(badge.exists()).toEqual(false);
    });
  });

  describe('when loading', () => {
    beforeEach(() => {
      wrapper = createWrapper({ props: { isLoading: true } });
    });

    it('should show the loading state', () => {
      expect(findCell('status').exists()).toEqual(false);
      expect(wrapper.find(GlSkeletonLoading).exists()).toEqual(true);
    });
  });

  describe('with no vulnerabilities', () => {
    beforeEach(() => {
      wrapper = createWrapper({});
    });

    it('should show the empty state', () => {
      expect(findCell('status').exists()).toEqual(false);
      expect(wrapper.find(GlEmptyState).exists()).toEqual(true);
    });
  });
});
