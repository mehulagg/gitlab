import { mount } from '@vue/test-utils';
import { GlEmptyState, GlSkeletonLoading } from '@gitlab/ui';
import RemediatedBadge from 'ee/vulnerabilities/components/remediated_badge.vue';
import SelectionSummary from 'ee/security_dashboard/components/selection_summary.vue';
import VulnerabilityCommentIcon from 'ee/security_dashboard/components/vulnerability_comment_icon.vue';
import VulnerabilityList from 'ee/vulnerabilities/components/vulnerability_list.vue';
import { generateVulnerabilities, vulnerabilities } from './mock_data';

describe('Vulnerability list component', () => {
  let wrapper;

  const defaultData = {
    selectedVulnerabilities: {},
  };

  const createWrapper = ({ props = {}, data = defaultData }) => {
    return mount(VulnerabilityList, {
      propsData: {
        dashboardDocumentation: '#',
        emptyStateSvgPath: '#',
        vulnerabilities: [],
        ...props,
      },
      stubs: {
        GlPopover: true,
      },
      data: () => data,
      attachToDocument: true,
    });
  };

  const findCell = label => wrapper.find(`.js-${label}`);
  const findRow = (index = 0) => wrapper.findAll('tbody tr').at(index);
  const findSelectionSummary = () => wrapper.find(SelectionSummary);
  const findRowVulnerabilityCommentIcon = row => findRow(row).find(VulnerabilityCommentIcon);
  const findDataCell = label => wrapper.find(`[data-testid="${label}"]`);
  const findDataCells = label => wrapper.findAll(`[data-testid="${label}"]`);
  const findCellText = label => findDataCell(label).text();

  afterEach(() => {
    wrapper.destroy();
    wrapper = null;
  });

  describe('with vulnerabilities', () => {
    let newVulnerabilities;

    beforeEach(() => {
      newVulnerabilities = generateVulnerabilities();
      wrapper = createWrapper({ props: { vulnerabilities: newVulnerabilities } });
    });

    it('should render a list of vulnerabilities', () => {
      expect(wrapper.findAll('.js-status')).toHaveLength(newVulnerabilities.length);
    });

    it('should correctly render the status', () => {
      const cell = findCell('status');

      expect(cell.text()).toBe(newVulnerabilities[0].state);
    });

    it('should correctly render the severity', () => {
      const cell = findCell('severity');
      expect(cell.text().toLowerCase()).toBe(newVulnerabilities[0].severity);
    });

    it('should correctly render the description', () => {
      const cell = findCell('description');

      expect(cell.text()).toBe(newVulnerabilities[0].title);
    });

    it('should not show the selection summary if no vulnerabilities are selected', () => {
      expect(findSelectionSummary().exists()).toBe(false);
    });

    it('should show the selection summary when a checkbox is selected', () => {
      findDataCell('vulnerability-checkbox').setChecked(true);

      return wrapper.vm.$nextTick().then(() => {
        expect(findSelectionSummary().exists()).toBe(true);
      });
    });

    it('should sync selected vulnerabilities when the vulnerability list is updated', () => {
      findDataCell('vulnerability-checkbox').setChecked(true);

      expect(findSelectionSummary().props('selectedVulnerabilities')).toHaveLength(1);
      wrapper.setProps({ vulnerabilities: [] });
      return wrapper.vm.$nextTick().then(() => {
        expect(findSelectionSummary().exists()).toBe(false);
      });
    });
  });

  describe('when vulnerability selection is disabled', () => {
    beforeEach(() => {
      wrapper = createWrapper({
        props: { vulnerabilities, shouldShowSelection: false },
      });
    });

    it('should not show the checkboxes if shouldShowSelection is passed in', () => {
      expect(findDataCell('vulnerability-checkbox-all').exists()).toBe(false);
      expect(findDataCell('vulnerability-checkbox').exists()).toBe(false);
    });
  });

  describe('when displayed on instance or group level dashboard', () => {
    let newVulnerabilities;

    beforeEach(() => {
      newVulnerabilities = generateVulnerabilities();
      wrapper = createWrapper({
        props: { vulnerabilities: newVulnerabilities, shouldShowProjectNamespace: true },
      });
    });

    it('should display the vulnerability locations for images', () => {
      const { id, project, location } = newVulnerabilities[0];
      const cellText = findCellText(`location-${id}`);
      expect(cellText).toContain(project.nameWithNamespace);
      expect(cellText).toContain(location.image);
      expect(cellText).not.toContain('(line: ');
    });

    it('should display the vulnerability locations for code', () => {
      const { id, project, location } = newVulnerabilities[1];
      const cellText = findCellText(`location-${id}`);
      expect(cellText).toContain(project.nameWithNamespace);
      expect(cellText).toContain(location.file);
      expect(cellText).toContain(`(line: ${location.startLine})`);
    });

    it('should display the vulnerability locations for code with no line data', () => {
      const { id, project, location } = newVulnerabilities[2];
      const cellText = findCellText(`location-${id}`);
      expect(cellText).toContain(project.nameWithNamespace);
      expect(cellText).toContain(location.file);
      expect(cellText).not.toContain('(line: ');
    });

    it('should not display the vulnerability locations for vulnerabilities without a location', () => {
      const { id, project } = newVulnerabilities[4];
      const cellText = findCellText(`location-${id}`);
      expect(cellText).toEqual(project.nameWithNamespace);
      expect(cellText).not.toContain('(line: ');
    });

    it('should not display the vulnerability identifier', () => {
      const cell = findDataCell('vulnerability-identifier');
      expect(cell.exists()).toBe(false);
    });

    it('should not display the vulnerability report type', () => {
      const cell = findDataCell('vulnerability-report-type');
      expect(cell.exists()).toBe(false);
    });
  });

  describe('when displayed on a project level dashboard', () => {
    let newVulnerabilities;
    beforeEach(() => {
      newVulnerabilities = generateVulnerabilities();
      wrapper = createWrapper({
        props: {
          vulnerabilities: newVulnerabilities,
          shouldShowIdentifier: true,
          shouldShowReportType: true,
        },
      });
    });

    it('should not display the vulnerability group/project locations for images', () => {
      const { id, project, location } = newVulnerabilities[0];
      const cellText = findCellText(`location-${id}`);
      expect(cellText).not.toContain(project.nameWithNamespace);
      expect(cellText).toEqual(location.image);
    });

    it('should display the vulnerability locations for code', () => {
      const { id, project, location } = newVulnerabilities[1];
      const cellText = findCellText(`location-${id}`);
      expect(cellText).not.toContain(project.nameWithNamespace);
      expect(cellText).toEqual(`${location.file} (line: ${location.startLine})`);
    });

    it('should not display the vulnerability group/project locations for code with no line data', () => {
      const { id, project, location } = newVulnerabilities[2];
      const cellText = findCellText(`location-${id}`);
      expect(cellText).not.toContain(project.nameWithNamespace);
      expect(cellText).toEqual(location.file);
    });

    it('should correctly render the identifier', () => {
      const cells = findDataCells('vulnerability-identifier');

      expect(cells.at(0).text()).toBe(newVulnerabilities[0].identifiers[0].name);
      expect(cells.at(1).text()).toBe(newVulnerabilities[1].identifiers[0].name);
    });

    it('should display the vulnerability report type', () => {
      const cells = findDataCells('vulnerability-report-type');
      expect(cells.at(0).text()).toBe('SAST');
      expect(cells.at(1).text()).toBe('Dependency Scanning');
      expect(cells.at(2).text()).toBe('Custom scanner without translation');
      expect(cells.at(3).text()).toBe('');
    });
  });

  describe('when has an issue associated', () => {
    let newVulnerabilities;

    beforeEach(() => {
      newVulnerabilities = generateVulnerabilities();
      newVulnerabilities[0].issueLinks = {
        nodes: [
          {
            issue: {
              title: 'my-title',
              iid: 114,
              state: 'opened',
              webUrl: 'http://localhost/issues/~/114',
            },
          },
        ],
      };
      wrapper = createWrapper({ props: { vulnerabilities: newVulnerabilities } });
    });
  });

  describe('when has comments', () => {
    let newVulnerabilities;

    beforeEach(() => {
      newVulnerabilities = generateVulnerabilities();
      newVulnerabilities[0].userNotesCount = 1;
      wrapper = createWrapper({ props: { vulnerabilities: newVulnerabilities } });
    });

    it('should render the comments badge on the first vulnerability', () => {
      expect(findRowVulnerabilityCommentIcon(0).exists()).toBe(true);
    });

    it('should not render the comments badge on the second vulnerability', () => {
      expect(findRowVulnerabilityCommentIcon(1).exists()).toBe(false);
    });
  });

  describe('when a vulnerability is resolved on the default branch', () => {
    let newVulnerabilities;

    beforeEach(() => {
      newVulnerabilities = generateVulnerabilities();
      newVulnerabilities[0].resolved_on_default_branch = true;
      wrapper = createWrapper({ props: { vulnerabilities: newVulnerabilities } });
    });

    it('should render the remediated info badge on the first vulnerability', () => {
      const row = findRow(0);
      const badge = row.find(RemediatedBadge);

      expect(badge.exists()).toEqual(true);
    });

    it('should not render the remediated info badge on the second vulnerability', () => {
      const row = findRow(1);
      const badge = row.find(RemediatedBadge);

      expect(badge.exists()).toEqual(false);
    });
  });

  describe('when loading', () => {
    beforeEach(() => {
      wrapper = createWrapper({ props: { isLoading: true } });
    });

    it('should show the loading state', () => {
      expect(findCell('status').exists()).toEqual(false);
      expect(wrapper.find(GlSkeletonLoading).exists()).toEqual(true);
    });
  });

  describe('with no vulnerabilities', () => {
    beforeEach(() => {
      wrapper = createWrapper({});
    });

    it('should show the empty state', () => {
      expect(findCell('status').exists()).toEqual(false);
      expect(wrapper.find(GlEmptyState).exists()).toEqual(true);
    });
  });
});
