import { shallowMount } from '@vue/test-utils';
import { initFirstClassVulnerabilityFilters } from 'ee/security_dashboard/constants';
import Filters from 'ee/security_dashboard/components/first_class_vulnerability_filters.vue';
import Filter from 'ee/security_dashboard/components/filter.vue';

describe('First class vulnerability filters component', () => {
  let wrapper;
  let filters;

  const findFilters = () => wrapper.findAll(Filter);
  const findFirstFilter = () => findFilters().at(0);

  const createComponent = () => {
    wrapper = shallowMount(Filters);
  };

  afterEach(() => {
    wrapper.destroy();
  });

  describe('on render', () => {
    beforeEach(() => {
      createComponent();
      filters = initFirstClassVulnerabilityFilters();
    });

    it('should render the filters', () => {
      expect(findFilters()).toHaveLength(filters.length);
    });

    it('should pass down the filter information to the first filter', () => {
      expect(findFirstFilter().props().filter).toEqual(filters[0]);
    });

    it('should call the setFilter mutation when setting a filter', () => {
      const stub = jest.fn();
      const options = { foo: 'bar' };

      wrapper.setMethods({ setFilter: stub });
      findFirstFilter().vm.$emit('setFilter', options);

      expect(stub).toHaveBeenCalledWith(options);
    });

    describe('when setFilter is called', () => {
      let filterId;
      let optionId;

      beforeEach(() => {
        filterId = filters[0].id;
        optionId = filters[0].options[1].id;

        wrapper.vm.setFilter({ filterId, optionId });
      });

      it('should set the filters locally', () => {
        const expectedFilters = initFirstClassVulnerabilityFilters();
        expectedFilters[0].selection = new Set([optionId]);

        expect(wrapper.vm.filters).toEqual(expectedFilters);
      });

      it('should emit selected filters when a filter is set', () => {
        expect(wrapper.emitted().filterChange).toBeTruthy();
        expect(wrapper.emitted().filterChange[0]).toEqual([{ [filterId]: [optionId] }]);
      });
    });
  });
});
