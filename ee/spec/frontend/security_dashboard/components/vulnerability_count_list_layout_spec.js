import { shallowMount } from '@vue/test-utils';
import { GlAlert } from '@gitlab/ui';
import VulnerabilityCountListLayout from 'ee/security_dashboard/components/vulnerability_count_list_layout.vue';
import VulnerabilityCount from 'ee/security_dashboard/components/vulnerability_count.vue';

describe('Vulnerabilities count list component', () => {
  let wrapper;

  const findAlert = () => wrapper.find(GlAlert);
  const findVulnerability = () => wrapper.findAll(VulnerabilityCount);

  const createWrapper = ({ propsData } = {}) => {
    return shallowMount(VulnerabilityCountListLayout, {
      propsData,
      stubs: {
        GlAlert,
      },
    });
  };

  afterEach(() => {
    wrapper.destroy();
  });

  describe('when loading', () => {
    it('passes the isLoading prop to the counts', () => {
      wrapper = createWrapper({ propsData: { isLoading: true, vulnerabilitiesCount: {} } });

      findVulnerability().wrappers.forEach(component => {
        expect(component.props('isLoading')).toBe(true);
      });
    });
  });

  describe('when loaded and has a list of vulnerability counts', () => {
    const vulnerabilitiesCount = { critical: 5, medium: 3 };

    beforeEach(() => {
      wrapper = createWrapper({ propsData: { vulnerabilitiesCount } });
    });

    it('sets the isLoading prop false and passes it down', () => {
      findVulnerability().wrappers.forEach(component => {
        expect(component.props('isLoading')).toBe(false);
      });
    });

    it('shows the counts', () => {
      const vulnerabilites = findVulnerability();
      const critical = vulnerabilites.at(0);
      const high = vulnerabilites.at(1);
      const medium = vulnerabilites.at(2);

      expect(critical.props('severity')).toBe('critical');
      expect(critical.props('count')).toBe(5);

      expect(high.props('severity')).toBe('high');
      expect(high.props('count')).toBe(0);

      expect(medium.props('severity')).toBe('medium');
      expect(medium.props('count')).toBe(3);
    });
  });

  describe('when loaded and has an error', () => {
    it('shows the error message', () => {
      wrapper = createWrapper({ propsData: { showError: true, vulnerabilitiesCount: {} } });
      expect(findAlert().text()).toBe(
        'Error fetching the vulnerability counts. Please check your network connection and try again.',
      );
    });
  });
});
