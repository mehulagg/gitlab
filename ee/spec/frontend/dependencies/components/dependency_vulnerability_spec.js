import { GlLink } from '@gitlab/ui';
import { shallowMount } from '@vue/test-utils';
import DependencyVulnerability from 'ee/dependencies/components/dependency_vulnerability.vue';
import SeverityBadge from 'ee/vue_shared/security_reports/components/severity_badge.vue';
import mockDataVulnerabilities from '../../security_dashboard/store/modules/vulnerabilities/data/mock_data_vulnerabilities';

describe('DependencyVulnerability component', () => {
  let wrapper;

  const findByTestId = (testId) => wrapper.find(`[data-testid="${testId}"]`);
  const findLink = () => wrapper.findComponent(GlLink);

  const factory = ({ propsData, ...options } = {}, standaloneVulnDependencyList = false) => {
    wrapper = shallowMount(DependencyVulnerability, {
      ...options,
      propsData: { ...propsData },
      provide: {
        glFeatures: {
          standaloneVulnDependencyList,
        },
      },
    });
  };

  afterEach(() => {
    wrapper.destroy();
  });

  describe('given an vulnerability', () => {
    const vulnerability = mockDataVulnerabilities[0];
    beforeEach(() => {
      factory({
        propsData: {
          vulnerability,
        },
      });
    });

    it('matches the snapshot', () => {
      expect(wrapper.element).toMatchSnapshot();
    });

    it('renders the severity badge with the correct props', () => {
      const badge = wrapper.find(SeverityBadge);
      expect(badge.isVisible()).toBe(true);
      expect(badge.props().severity).toEqual(vulnerability.severity);
    });

    it('renders the vulnerability name as text when standaloneVulnDependencyList Flag is off', () => {
      const text = findByTestId('vulnerability-name-text');
      expect(text.isVisible()).toBe(true);
      expect(text.text()).toBe('Insecure variable usage');
    });

    it("doesn't render link when standaloneVulnDependencyList Flag is off", () => {
      const link = findLink();
      expect(link.exists()).toBe(false);
    });
  });

  describe('Feature Flag on', () => {
    const vulnerability = mockDataVulnerabilities[0];
    beforeEach(() => {
      factory(
        {
          propsData: {
            vulnerability,
          },
        },
        true,
      );
    });

    it('renders the vulnerability name as Link when standaloneVulnDependencyList Flag is on', () => {
      const link = findLink();

      expect(link.exists()).toBe(true);
      expect(link.element.getAttribute('href')).toBe(
        'http://gitlab.localdev:3000/testgroup/testproject/-/security/vulnerabilities/1',
      );
    });
  });
});
