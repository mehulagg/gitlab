# frozen_string_literal: true

require 'spec_helper'

describe VulnerabilityExports::Exporters::CsvService do
  let_it_be(:project) { create(:project, :public) }
  let_it_be(:vulnerability) { create(:vulnerability, :with_findings, project: project) }

  let(:export_csv_service) { described_class.new(Vulnerability.all) }

  subject(:csv) { CSV.parse(export_csv_service.generate, headers: true) }

  context 'when block is not given' do
    it 'renders csv to string' do
      expect(export_csv_service.generate).to be_a String
    end
  end

  context 'when block is given' do
    it 'returns handle to Tempfile' do
      expect(export_csv_service.generate { |file| file }).to be_a Tempfile
    end
  end

  it 'includes the columns required for import' do
    expect(csv.headers).to include('Scanner Type', 'Scanner Name', 'Status', 'Vulnerability', 'Details',
                                   'Additional Info', 'Severity', 'CVE')
  end

  it 'includes proper values for each column type' do
    aggregate_failures do
      expect(csv[0]['Scanner Type']).to eq vulnerability.report_type
      expect(csv[0]['Scanner Name']).to eq vulnerability.finding_scanner_name
      expect(csv[0]['Status']).to eq vulnerability.state
      expect(csv[0]['Vulnerability']).to eq vulnerability.title
      expect(csv[0]['Details']).to eq vulnerability.description
      expect(csv[0]['Additional Info']).to eq vulnerability.finding_metadata['message']
      expect(csv[0]['Severity']).to eq vulnerability.severity
      expect(csv[0]['CVE']).to eq vulnerability.finding_metadata['cve']
    end
  end
end
