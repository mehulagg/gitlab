# frozen_string_literal: true

require 'spec_helper'

describe API::VulnerabilityIssueLinks do
  include AccessMatchersForRequest

  before do
    stub_licensed_features(security_dashboard: true)
  end

  let_it_be(:project) { create(:project) }
  let_it_be(:user) { create(:user) }

  describe 'GET /vulnerabilities/:id/issue_links' do
    let_it_be(:vulnerability) { create(:vulnerability, :with_issue_links, project: project) }
    let_it_be(:vulnerability_id) { vulnerability.id }
    let(:vulnerability_issue_links_path) { "/vulnerabilities/#{vulnerability_id}/issue_links" }

    subject(:get_issue_links) { get api(vulnerability_issue_links_path, user) }

    context 'with an authorized user with proper permissions' do
      before do
        project.add_developer(user)
      end

      it 'gets the list of vulnerabilities' do
        get_issue_links

        expect(response).to have_gitlab_http_status(200)
        expect(response).to match_response_schema('public_api/v4/vulnerability_related_issues', dir: 'ee')
        expect(json_response.map { |link| link['id'] }).to match_array(vulnerability.related_issues.map(&:id))
        expect(json_response.map { |link| link['vulnerability_link_id'] }).to(
          match_array(vulnerability.issue_links.map(&:id)))
        expect(json_response.map { |link| link['vulnerability_link_type'] }).to all eq 'related'
      end

      it_behaves_like 'responds with "not found" for an unknown vulnerability ID'

      it_behaves_like 'forbids actions on vulnerability in case of disabled features'
    end

    describe 'permissions' do
      it { expect { get_issue_links }.to be_allowed_for(:admin) }
      it { expect { get_issue_links }.to be_allowed_for(:owner).of(project) }
      it { expect { get_issue_links }.to be_allowed_for(:maintainer).of(project) }
      it { expect { get_issue_links }.to be_allowed_for(:developer).of(project) }
      it { expect { get_issue_links }.to be_allowed_for(:auditor) }

      it { expect { get_issue_links }.to be_denied_for(:reporter).of(project) }
      it { expect { get_issue_links }.to be_denied_for(:guest).of(project) }
      it { expect { get_issue_links }.to be_denied_for(:anonymous) }
    end
  end
end
