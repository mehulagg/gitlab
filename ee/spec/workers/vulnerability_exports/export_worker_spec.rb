# frozen_string_literal: true

require 'spec_helper'

RSpec.describe VulnerabilityExports::ExportWorker, type: :worker do
  describe '#perform' do
    let(:worker) { described_class.new }

    subject(:export_vulnerabilities) { worker.perform(vulnerability_export_id) }

    before do
      allow(VulnerabilityExports::ExportService).to receive(:export)
      allow(Sidekiq.logger).to receive(:error)
    end

    context 'when vulnerability export does not exist' do
      let(:vulnerability_export_id) { nil }

      it 'does not raise any error' do
        expect { export_vulnerabilities }.not_to raise_error
      end

      it 'does not call VulnerabilityExports::ExportService::export' do
        export_vulnerabilities

        expect(VulnerabilityExports::ExportService).not_to have_received(:export)
      end
    end

    context 'when vulnerability export exists' do
      let(:vulnerability_export) { create(:vulnerability_export, :created, :csv) }
      let(:vulnerability_export_id) { vulnerability_export.id }

      it 'calls VulnerabilityExports::ExportService::export with the vulnerability_export object' do
        export_vulnerabilities

        expect(VulnerabilityExports::ExportService).to have_received(:export).with(vulnerability_export)
      end

      context 'when export fails' do
        let(:error_message) { 'Foo' }

        before do
          allow(VulnerabilityExports::ExportService).to receive(:export).and_raise(error_message)
        end

        it 'does not raise exception' do
          expect { export_vulnerabilities }.not_to raise_error
        end

        it 'logs error' do
          export_vulnerabilities

          expect(Sidekiq.logger).to have_received(:error).with(class: described_class.name, message: error_message)
        end
      end
    end
  end
end
