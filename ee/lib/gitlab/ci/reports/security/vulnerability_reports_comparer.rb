# frozen_string_literal: true

module Gitlab
  module Ci
    module Reports
      module Security
        class VulnerabilityReportsComparer
          include Gitlab::Utils::StrongMemoize

          attr_reader :base_report, :head_report
          attr_reader :added, :fixed, :existing

          ACCEPTABLE_REPORT_AGE = 1.week

          def initialize(base_report, head_report)
            @base_report = base_report
            @head_report = head_report

            @added = []
            @fixed = []
            @existing = []
            calculate_changes
          end

          def base_report_created_at
            @base_report.created_at
          end

          def head_report_created_at
            @head_report.created_at
          end

          def base_report_out_of_date
            return false unless @base_report.created_at

            ACCEPTABLE_REPORT_AGE.ago > @base_report.created_at
          end

          def calculate_changes
            @added = []
            @fixed = []
            @existing = []

            base_findings = base_report.findings
            head_findings = head_report.findings

            head_findings_hash = head_findings.index_by(&:object_id)

            # find all fixed and existing vulnerabilities
            base_findings.each do |base_finding|
              found_match = false
              head_findings.each do |head_finding|
                if base_finding == head_finding
                  found_match = true
                  head_findings_hash.delete(head_finding.object_id)
                  break
                end
              end

              if found_match
                @existing << base_finding
              else
                @fixed << base_finding
              end
            end

            @added = head_findings_hash.values
          end
        end
      end
    end
  end
end
