# frozen_string_literal: true

###
# API endpoints for the RubyGem package registry
module API
  class GemPackages < ::API::Base
    include SendFileUpload

    helpers ::API::Helpers::PackagesHelpers

    content_type :binary, 'application/octet-stream'

    before do
      require_packages_enabled!
      # authenticate_non_get!
    end

    params do
      requires :id, type: String, desc: 'The ID of a project'
    end
    resource :projects do
      namespace ':id/packages/gems' do
        desc 'Fetch a list of versions' do
          detail 'This feature was introduced in GitLab 13.9'
        end
        get 'versions' do
          []
        end

        namespace 'api/v1' do
          desc 'Authenticate with the registry' do
            detail 'This feature was introduced in GitLab 13.9'
          end
          # params do
          #   requires :path, type: String, desc: 'Package path'
          #   requires :file_name, type: String, desc: 'Package file name'
          # end
          route_setting :authentication, job_token_allowed: true, deploy_token_allowed: true
          get 'api_key' do
            authorize_read_package!

            { "rubygems_api_key": "701243f217cdf23b1370c7b66b65ca97" }
          end

          desc 'Authorize a gem upload' do
            detail 'This feature was introduced in GitLab 13.9'
          end
          post 'gems/authorize' do
            # authorize_upload!

            status 200
            content_type Gitlab::Workhorse::INTERNAL_API_CONTENT_TYPE
            ::Packages::PackageFileUploader.workhorse_authorize(has_length: false)
          end

          desc 'Upload a gem' do
            detail 'This feature was introduced in GitLab 13.9'
          end
          params do
            requires :file, type: ::API::Validations::Types::WorkhorseFile, desc: 'The package file to be published (generated by Multipart middleware)'
          end
          post 'gems' do
            package = ::Packages::Gems::CreatePackageService.new(
              Project.last, User.first, {}
            ).execute

            file_params = {
              file:      params[:file],
              file_name: 'package.gem'
            }

            ::Packages::CreatePackageFileService.new(package, file_params).execute
          end

          desc 'Fetch a list of dependencies' do
            detail 'This feature was introduced in GitLab 13.9'
          end
          params do
            optional :gems, type: String, desc: 'Comma delimited gem names'
          end
          get 'dependencies' do
            return [] unless params[:gems]

            contents = Marshal.dump([{:platform=>"ruby",
                                      :dependencies=>[],
                                      :name=>"test_gem",
                                      :number=>"0.0.1"}])

            file = Tempfile.new

            begin
              file.write(contents)
              file.flush
              # present_carrierwave_file!(file, supports_direct_download: true)
              present_disk_file!(file.path, 'foo')
            ensure
              file.close
              file.unlink
            end
          end
        end
      end
    end
  end
end
