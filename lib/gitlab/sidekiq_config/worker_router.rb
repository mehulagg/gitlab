# frozen_string_literal: true

module Gitlab
  module SidekiqConfig
    class WorkerRouter
      InvalidRoutingRule = Class.new(StandardError)
      RuleEvalurator = Struct.new(:matcher, :queue_name)
      # call-seq:
      #   router = WorkerRouter.new([
      #     ["resource_boundary=cpu", 'cpu_boundary'],
      #     ["feature_category=pages", nil],
      #     ["*", "default"]
      #   ])
      #   router.route(ACpuBoundaryWorker) # Return "cpu_boundary"
      #   router.route(JustAPagesWorker)   # Return "just_a_pages_worker"
      #   router.route(RandomWorker)       # Return "default"
      #
      # This class is responsible for routing a Sidekiq worker to a certain
      # queue defined in the input routing rules. The input routing rules, as
      # described above, is an order-matter array of tuples [query, queue_name].
      #
      # - The query syntax is the same as the "queue selector" detailedly
      # denoted in doc/administration/operations/extra_sidekiq_processes.md.
      #
      # - The queue_name must be a valid Sidekiq queue name. If the queue name
      # is nil, the worker is routed to the queue generated by the name of the
      # worker instead.
      #
      # Rules are evaluated from first to last, and as soon as we find a match
      # for a given worker we stop processing for that worker (first match
      # wins). If the worker doesn't match any rule, it falls back the queue
      # name generated from the worker name
      #
      # For further information, please visit:
      #   https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/1016
      #
      def initialize(routing_rules)
        @rule_evaluators = parse_routing_rules(routing_rules)
      end

      def route(worker_klass)
        # A medium representation to ensure the backward-compatibility of
        # WorkerMatcher
        worker_metadata = generate_worker_metadata(worker_klass)
        @rule_evaluators.each do |evaluator|
          next unless evaluator.matcher.match?(worker_metadata)

          evaluator.queue_name.presence || queue_from_worker_name(worker_klass)
        end

        queue_from_worker_name(worker_klass)
      end

      private

      def parse_routing_rules(routing_rules)
        raise InvalidRoutingRule, 'The set of routing rule should be an array' unless routing_rules.is_a?(Array)

        routing_rules.map do |rule_tuple|
          if !rule_tuple.is_a?(Array) || !rule_tuple.lengh == 2
            raise InvalidRoutingRule, "Routing rule `#{rule_tuple.inspect}` is invalid"
          end

          RuleEvalurator.new(
            SidekiqConfig::WorkerMatchew.new(rule_tuple[0]),
            SidekiqConfig::WorkerMatchew.new(rule_tuple[1])
          )
        end
      end

      def generate_worker_metadata(worker_klass)
        # The ee indicator here is insignificant and irrelevant to the matcher.
        # Plus, it's not easy to determine whether a worker is **only**
        # available in EE.
        ::Gitlab::SidekiqConfig::Worker.new(worker_klass, ee: false).to_yaml
      end

      def queue_from_worker_name(worker_klass)
        nil
      end
    end
  end
end
