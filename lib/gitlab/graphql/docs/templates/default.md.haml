-# haml-lint:disable UnnecessaryStringOutput

= auto_generated_comment

:plain
  # GraphQL API Resources

  This documentation is self-generated based on GitLab current GraphQL schema.

  The API can be explored interactively using the [GraphiQL IDE](../index.md#graphiql).

  Each table below documents a GraphQL type. Types match loosely to models, but not all
  fields and methods on a model are available via GraphQL.

  WARNING:
  Fields that are deprecated are marked with **{warning-solid}**.
  Items (fields, enums, etc) that have been removed according to our [deprecation process](../index.md#deprecation-and-removal-process) can be found
  in [Removed Items](../removed_items.md).

  <!-- vale gitlab.Spelling = NO -->
\

:plain
  ## `Query` type

  The `Query` type contains the API's top-level entry points for all executable queries.
\

- sorted_by_name(queries).each do |query|
  = render_name_and_description(query, owner: 'Query')
  \
  = render_return_type(query)
  - unless query[:arguments].empty?
    ~ "#### Arguments\n"
    ~ "| Name | Type | Description |"
    ~ "| ---- | ---- | ----------- |"
    - sorted_by_name(query[:arguments]).each do |argument|
      = render_field(argument, query[:type][:name])
    \

:plain
  ## Object types

  Object types represent the resources that the GitLab GraphQL API can return.
  They contain _fields_. Each field has its own type, which will either be one of the
  basic GraphQL [scalar types](https://graphql.org/learn/schema/#scalar-types)
  (e.g.: `String` or `Boolean`) or other object types.

  For more information, see
  [Object Types and Fields](https://graphql.org/learn/schema/#object-types-and-fields)
  on `graphql.org`.
\

- objects.each do |type|
  - unless type[:fields].empty?
    = render_name_and_description(type)
    \
    ~ "| Field | Type | Description |"
    ~ "| ----- | ---- | ----------- |"
    - sorted_by_name(type[:fields]).each do |field|
      = render_field(field, type[:name])
    \

:plain
  ## Enumeration types

  Also called _Enums_, enumeration types are a special kind of scalar that
  is restricted to a particular set of allowed values.

  For more information, see
  [Enumeration Types](https://graphql.org/learn/schema/#enumeration-types)
  on `graphql.org`.
\

- enums.each do |enum|
  - unless enum[:values].empty?
    = render_name_and_description(enum)
    \
    ~ "| Value | Description |"
    ~ "| ----- | ----------- |"
    - sorted_by_name(enum[:values]).each do |value|
      = render_enum_value(enum, value)
    \

:plain
  ## Scalar types

  Scalar values are atomic values, and do not have fields of their own.
  Basic scalars include strings, boolean values, and numbers. This schema also
  defines various custom scalar values, such as types for times and dates.

  This schema includes custom scalar types for identifiers, with a specific type for
  each kind of object.

  For more information, read about [Scalar Types](https://graphql.org/learn/schema/#scalar-types) on `graphql.org`.
\

- graphql_scalar_types.each do |type|
  = render_name_and_description(type)
  \

:plain
  ## Abstract types

  Abstract types (unions and interfaces) are ways the schema can represent
  values that may be one of several concrete types.

  - A [`Union`](https://graphql.org/learn/schema/#union-types) is a set of possible types.
    The types might not have any fields in common.
  - An [`Interface`](https://graphql.org/learn/schema/#interfaces) is a defined set of fields.
    Types may `implement` an interface, which
    guarantees that they have all the fields in the set. A type may implement more than
    one interface.

  See the [GraphQL documentation](https://graphql.org/learn/) for more information on using
  abstract types.
\

:plain
  ### Unions
\

- graphql_union_types.each do |type|
  = render_name_and_description(type, level: 4)
  \
  One of:
  \
  - type[:possible_types].each do |member|
    = render_union_member(member)
  \

:plain
  ### Interfaces
\

- graphql_interface_types.each do |type|
  = render_name_and_description(type, level: 4)
  \
  Implementations:
  \
  - type[:implemented_by].each do |type_name|
    ~ "- [`#{type_name}`](##{type_name.downcase})"
  \
  ~ "| Field | Type | Description |"
  ~ "| ----- | ---- | ----------- |"
  - sorted_by_name(type[:fields] + type[:connections]).each do |field|
    = render_field(field, type[:name])
  \
