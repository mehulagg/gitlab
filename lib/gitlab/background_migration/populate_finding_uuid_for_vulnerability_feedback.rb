# frozen_string_literal: true

module Gitlab
  module BackgroundMigration
    # This class populates the `finding_uuid` attribute for
    # the existing `vulnerability_feedback` records.
    class PopulateFindingUuidForVulnerabilityFeedback
      class VulnerabilityFeedback < ActiveRecord::Base # rubocop:disable Style/Documentation
        include EachBatch

        self.table_name = 'vulnerability_feedback'

        scope :in_range, -> (start, stop) { where('id BETWEEN ? AND ?', start, stop) }

        def self.load_vulnerability_findings
          to_a.tap { |collection| collection.each(&:vulnerability_finding) }
        end

        def set_finding_uuid
          return unless vulnerability_finding.present?

          update_column(:finding_uuid, calculated_uuid)
        end

        def vulnerability_finding
          BatchLoader.for(finding_key).batch(replace_methods: false) do |finding_keys, loader|
            project_ids = finding_keys.map { |key| key[:project_id] }
            categories = finding_keys.map { |key| key[:category] }
            fingerprints = finding_keys.map { |key| key[:project_fingerprint] }

            findings = Finding.with_primary_identifier.where(
              project_id: project_ids.uniq,
              category: categories.uniq,
              project_fingerprint: fingerprints.uniq
            ).to_a

            finding_keys.each do |finding_key|
              loader.call(
                finding_key,
                findings.find { |f| finding_key == f.finding_key }
              )
            end
          end
        end

        private

        def calculated_uuid
          Gitlab::Vulnerabilities::CalculateFindingUUID.call(uuid_components)
        end

        def uuid_components
          [
            category,
            vulnerability_finding.location_fingerprint,
            vulnerability_finding.primary_identifier&.fingerprint,
            project_id
          ].join('-')
        end

        def finding_key
          {
            project_id: project_id,
            category: category,
            project_fingerprint: project_fingerprint
          }
        end
      end

      class Finding < ActiveRecord::Base # rubocop:disable Style/Documentation
        self.table_name = 'vulnerability_occurrences'

        belongs_to :primary_identifier, class_name: 'Gitlab::BackgroundMigration::PopulateFindingUuidForVulnerabilityFeedback::Identifier'

        scope :with_primary_identifier, -> { includes(:primary_identifier) }

        def finding_key
          {
            project_id: project_id,
            category: report_type,
            project_fingerprint: project_fingerprint
          }
        end
      end

      class Identifier < ActiveRecord::Base # rubocop:disable Style/Documentation
        self.table_name = 'vulnerability_identifiers'
      end

      def perform(*range)
        VulnerabilityFeedback.in_range(*range).load_vulnerability_findings
      end
    end
  end
end
