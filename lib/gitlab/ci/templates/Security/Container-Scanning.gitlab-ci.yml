# Read more about this feature here: https://docs.gitlab.com/ee/user/project/merge_requests/container_scanning.html

container_scanning:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    # Defining two new variables based on GitLab's CI/CD predefined variables
    # https://docs.gitlab.com/ee/ci/variables/#predefined-environment-variables
    CS_IMAGE_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
    CS_IMAGE_TAG: $CI_COMMIT_SHA
    # Prior to this, you need to have the Container Registry running for your project and setup a build job
    # with at least the following steps:
    #
    # docker build -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG .
    # docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    #
    # Clair version, see https://hub.docker.com/r/arminc/clair-local-scan/tags
    CLAIR_LOCAL_SCAN_VERSION: v2.0.6
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export CS_VERSION=${SP_VERSION:-$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')}
    - export CS_IMAGE=${CS_IMAGE:-${CS_IMAGE_REPOSITORY}:${CS_IMAGE_TAG}}
    - |
      function container_scanning_kubernetes_runner()
      {
        [ -n "$KUBERNETES_PORT" ]
        return $?
      }
    - |
      function container_scanning_networking_opts()
      {
        if ! container_scanning_kubernetes_runner; then
          echo "--add-host ${DOCKER_SERVICE}:${DOCKER_PORT_2375_TCP_ADDR}"
        fi
      }
    # Services and containers running in the same Kubernetes pod are all sharing the same localhost address,
    # see https://docs.gitlab.com/runner/executors/kubernetes.html#using-dockerdind
    # If we're running not in the Kubernetes pod, use "docker" hostname which is because linked dind service image,
    # see https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#how-services-are-linked-to-the-job
    - |
      if container_scanning_kubernetes_runner; then
        export DOCKER_SERVICE="localhost"
      else
        export DOCKER_SERVICE="docker"
      fi
    - export DOCKER_HOST="tcp://${DOCKER_SERVICE}:2375"
    - |
      docker run \
        --rm \
        --network host \
        $(container_scanning_networking_opts) \
        --volume "${PWD}:/output" \
        --workdir /output \
        --env DEBUG=${CI_DEBUG_TRACE} \
        --env DOCKER_SERVICE \
        --env DOCKER_HOST \
        --env REGISTRY_USER="${CI_REGISTRY_USER}" \
        --env REGISTRY_PASSWORD="${CI_REGISTRY_PASSWORD}" \
        --env REGISTRY="${CI_REGISTRY}" \
        --env CLAIR_LOCAL_SCAN_VERSION \
        registry.gitlab.com/security-products/container-scanning:${CS_VERSION} \
        /analyze \
        ${CS_WHITELIST_FILE:+-w "${CS_WHITELIST_FILE}"} \
        ${CS_LOG_FILE:+-l "${CS_LOG_FILE}"} \
        ${CS_REPORT_FILE:+-r "${CS_REPORT_FILE}"} \
        ${CS_IMAGE}
    - if (($? == 125)) || (($? == 126)) || (($? == 127)); then exit $?; else true; fi # according to https://docs.docker.com/engine/reference/run/#exit-status
  artifacts:
    reports:
      container_scanning: ${CS_REPORT_FILE:-gl-container-scanning-report.json}
  dependencies: []
  only:
    refs:
      - branches
    variables:
      - $GITLAB_FEATURES =~ /\bcontainer_scanning\b/
  except:
    variables:
      - $CONTAINER_SCANNING_DISABLED
