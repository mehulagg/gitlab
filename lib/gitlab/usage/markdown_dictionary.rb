# frozen_string_literal: true

module Gitlab
  module Usage
    module MarkdownDictionary
      class << self
        HEADER = %w(field value).freeze

        def build(metrics_definitions)
          page(metrics_definitions)
        end

        private

        def page(metrics_definitions)
          <<~MARKDOWN.chomp
            #{page_header}
            #{metrics_tables(metrics_definitions)}
          MARKDOWN
        end

        def page_header
          <<~MARKDOWN
            ---
            stage: Growth
            group: Product Intelligence
            info: This is autogenerated with [`Gitlab::Usage::MarkdownDictionary`](https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/usage/markdown_dictionary.rb)
            ---

            # Metrics Dictionary
          MARKDOWN
        end

        def metrics_tables(metrics_definitions)
          metrics_definitions.map { |_key, metric_definition| table(metric_definition) }.join("\n")
        end

        def table(metric_definition)
          <<~MARKDOWN
            ## #{metric_definition.key}

            #{table_row(HEADER)}
            #{table_row(HEADER.map { '---' })}
            #{table_value_rows(metric_definition.attributes)}
          MARKDOWN
        end

        def table_row(array)
          "| #{array.join(' | ')} |"
        end

        def table_value_rows(attributes)
          attributes.map do |key, value|
            value = value.join(', ') if value.is_a?(Array)
            value = value.capitalize if key == :data_source
            value = "[Introduced by](#{value})" if key == :introduced_by_url

            table_row([key, value])
          end.join("\n")
        end
      end
    end
  end
end
