# frozen_string_literal: true

class MigrateVulnerabilityOccurrencesToVulnerabilities < ActiveRecord::Migration[6.0]
  include Gitlab::Database::MigrationHelpers

  DOWNTIME = false

  disable_ddl_transaction!

  MIGRATION = 'MigrateVulnerabilityOccurrencesToVulnerabilities'.freeze
  BATCH_SIZE = 500
  DELAY_INTERVAL = 2.minutes.to_i

  class VulnerabilityOccurrence < ActiveRecord::Base
    self.table_name = 'vulnerability_occurrences'

    include ::EachBatch
  end

  def up
    return unless Gitlab.ee?

    VulnerabilityOccurrence.select('project_id').group(:project_id).each_batch(of: BATCH_SIZE, column: "project_id") do |batch, index|
      batch_delay = (index - 1) * BATCH_SIZE * DELAY_INTERVAL
      batch.each_with_index do |occurrence, occurrence_id_index|
        project_delay = occurrence_id_index * DELAY_INTERVAL
        migrate_in(batch_delay + project_delay, MIGRATION, occurrence[:project_id])
      end
    end
  end

  def down
    # nothing to do
  end
end
