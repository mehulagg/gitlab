# frozen_string_literal: true

# See http://doc.gitlab.com/ce/development/migration_style_guide.html
# for more information on how to write migrations for GitLab.

class UpdateVulnerabilityFingerprints < ActiveRecord::Migration[5.2]
  include Gitlab::Database::MigrationHelpers

  DOWNTIME = false

  disable_ddl_transaction!

  def up
    Occurrence.where_might_have_feedback.find_in_batches(batch_size: 500) do |occurrences|
      old_fingerprints = occurrences.map(&:old_fingerprint)

      Feedback.where(project_fingerprint: old_fingerprints).each do |feedback|
        occurrence = occurrences.find { |occ| occ.old_fingerprint == feedback.project_fingerprint }

        feedback.update(project_fingerprint: occurrence.new_fingerprint)
      rescue ActiveRecord::RecordNotUnique
        feedback.destroy
      end
    end
  end

  def down
  end

  class Project < ActiveRecord::Base
    has_many :feedback
  end
  private_constant :Project

  class Feedback < ActiveRecord::Base
    self.table_name = 'vulnerability_feedback'
  end
  private_constant :Feedback

  class Occurrence < ActiveRecord::Base
    REPORT_TYPES = {
      sast: 0,
      dependency_scanning: 1,
      container_scanning: 2,
      dast: 3
    }.with_indifferent_access.freeze

    self.table_name = 'vulnerability_occurrences'

    belongs_to :project

    enum report_type: REPORT_TYPES

    def self.where_might_have_feedback
      self.joins(project: :feedback)
        .where(report_type: [:container_scanning, :dependency_scanning])
    end

    def metadata
      @metadata ||= JSON.parse(raw_metadata)
    rescue JSON::ParserError
      @metadata ||= {}
    end

    def new_fingerprint
      @new_fingerprint ||= project_fingerprint ? project_fingerprint.unpack1('H*') : nil
    end

    def old_fingerprint
      if dependency_scanning?
        Digest::SHA1.hexdigest(metadata['message'])
      elsif container_scanning?
        Digest::SHA1.hexdigest(
          "#{metadata['namespace']}:#{metadata['vulnerability']}" \
          ":#{metadata['featurename']}:#{metadata['featureversion']}"
        )
      end
    end
  end
  private_constant :Occurrence
end
