image: "dev.gitlab.org:5005/gitlab/gitlab-build-images:ruby-2.6.3-golang-1.11-git-2.22-chrome-73.0-node-12.x-yarn-1.16-postgresql-9.6-graphicsmagick-1.3.33"

stages:
  - prepare
  - quick-test
  - test
  - review-prepare
  - review
  - qa
  - post-test
  - notification
  - pages

variables:
  RAILS_ENV: "test"
  NODE_ENV: "test"
  SIMPLECOV: "true"
  GIT_DEPTH: "20"
  GIT_SUBMODULE_STRATEGY: "none"
  GET_SOURCES_ATTEMPTS: "3"
  KNAPSACK_RSPEC_SUITE_REPORT_PATH: knapsack/report-master.json
  FLAKY_RSPEC_SUITE_REPORT_PATH: rspec_flaky/report-suite.json
  BUILD_ASSETS_IMAGE: "false"
  ES_JAVA_OPTS: "-Xms256m -Xmx256m"
  ELASTIC_URL: "http://elastic:changeme@docker.elastic.co-elasticsearch-elasticsearch:9200"

after_script:
  - date

.use-pg9:
  services:
    - name: postgres:9.6
      command: ["postgres", "-c", "fsync=off", "-c", "synchronous_commit=off", "-c", "full_page_writes=off"]
    - name: redis:alpine

.default-cache:
  cache:
    key: "debian-stretch-ruby-2.6.3-node-12.x"
    paths:
      - .go/pkg/mod
      - vendor/ruby
      - .yarn-cache/
      - vendor/gitaly-ruby
    policy: pull

setup-test-env:
  extends:
    - .use-pg9
    - .default-cache
    - .default-before_script
  stage: prepare
  script:
    - bundle exec ruby -Ispec -e 'require "spec_helper" ; TestEnv.init'
    - scripts/gitaly-test-build  # Do not use 'bundle exec' here
  artifacts:
    expire_in: 7d
    paths:
      - tmp/tests
      - config/secrets.yml
      - vendor/gitaly-ruby
  cache:
    policy: pull-push

.assets-compile-cache:
  cache:
    paths:
      - vendor/ruby/
      - .yarn-cache/
      - tmp/cache/assets/sprockets

.default-before_script:
  before_script:
    - date
    - export GOPATH=$CI_PROJECT_DIR/.go
    - mkdir -p $GOPATH
    - source scripts/utils.sh
    - source scripts/prepare_build.sh
    - date

.gitlab:assets:compile-metadata:
  extends:
    - .default-before_script
    - .assets-compile-cache
  image: dev.gitlab.org:5005/gitlab/gitlab-build-images:ruby-2.6.3-git-2.22-chrome-73.0-node-12.x-yarn-1.16-graphicsmagick-1.3.33-docker-18.06.1
  stage: test
  dependencies: ["setup-test-env"]
  needs: ["setup-test-env"]
  services:
    - docker:19.03.0-dind
  variables:
    NODE_ENV: "production"
    RAILS_ENV: "production"
    SETUP_DB: "false"
    SKIP_STORAGE_VALIDATION: "true"
    WEBPACK_REPORT: "true"
    # we override the max_old_space_size to prevent OOM errors
    NODE_OPTIONS: --max_old_space_size=3584
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  cache:
    key: "assets-compile:production:vendor_ruby:.yarn-cache:tmp_cache_assets_sprockets:v6"
  artifacts:
    name: webpack-report
    expire_in: 31d
    paths:
      - webpack-report/
      - public/assets/
  script:
    - node --version
    - retry yarn install --frozen-lockfile --production --cache-folder .yarn-cache --prefer-offline
    - free -m
    - retry bundle exec rake gitlab:assets:compile
    - time scripts/build_assets_image
    - scripts/clean-old-cached-assets
    - rm -f /etc/apt/sources.list.d/google*.list  # We don't need to update Chrome here
  only:
    variables:
      - $CI_SERVER_HOST == "gitlab.com" && $CI_PROJECT_NAMESPACE =~ /^gitlab-org($|\/)/  # Matches the gitlab-org group and its subgroups
      - $CI_SERVER_HOST == "dev.gitlab.org"
  tags:
    - gitlab-org
    - docker

gitlab:assets:compile pull-cache:
  extends: .gitlab:assets:compile-metadata
  except:
    refs:
      - master
  cache:
    policy: pull

.review-docker:
  extends:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:gitlab-qa-alpine
  services:
    - docker:19.03.0-dind
  tags:
    - gitlab-org
    - docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    GITLAB_EDITION: "ce"

build-qa-image:
  extends:
    - .review-docker
  only:
    variables:
      - $CI_SERVER_HOST == "gitlab.com" && $CI_PROJECT_NAMESPACE == "gitlab-org"
  stage: prepare
  script:
    - '[[ ! -d "ee/" ]] || export GITLAB_EDITION="ee"'
    - export QA_IMAGE="${CI_REGISTRY}/${CI_PROJECT_PATH}/gitlab/gitlab-${GITLAB_EDITION}-qa:${CI_COMMIT_REF_SLUG}"
    - time docker build --cache-from gitlab/gitlab-${GITLAB_EDITION}-qa:nightly --tag ${QA_IMAGE} --file ./qa/Dockerfile ./
    - echo "${CI_JOB_TOKEN}" | docker login --username gitlab-ci-token --password-stdin ${CI_REGISTRY}
    - time docker push ${QA_IMAGE}

.package-and-qa-base:
  image: ruby:2.6-alpine
  stage: qa
  dependencies: []
  retry: 0
  script:
    - source scripts/utils.sh
    - install_gitlab_gem
    - ./scripts/trigger-build omnibus
  only:
    variables:
      - $CI_SERVER_HOST == "gitlab.com" && $CI_PROJECT_NAMESPACE =~ /^gitlab-org($|\/)/  # Matches the gitlab-org group or its subgroups

.target-qa-branch:
  variables:
    QA_BRANCH: ml-combined-html-report

package-and-qa:
  extends:
    - .package-and-qa-base
    - .target-qa-branch
  except:
    refs:
      - master
      - /^\d+-\d+-auto-deploy-\d+$/
  when: manual
  needs: ["build-qa-image", "gitlab:assets:compile pull-cache"]
