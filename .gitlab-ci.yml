# stages:
#   - sync
#   - prepare
#   - build-images
#   - fixtures
#   - test
#   - post-test
#   - review-prepare
#   - review
#   - sec-dast
#   - qa
#   - post-qa
#   - pages

# # always use `gitlab-org` runners, however
# # in cases where jobs require Docker-in-Docker, the job
# # definition must be extended with `.use-docker-in-docker`
# default:
#   image: "registry.gitlab.com/gitlab-org/gitlab-build-images:ruby-2.6.6-golang-1.14-git-2.27-lfs-2.9-chrome-83-node-12.x-yarn-1.21-postgresql-11-graphicsmagick-1.3.34"
#   tags:
#     - gitlab-org
#   # All jobs are interruptible by default
#   interruptible: true
#   # Default job timeout set to 90m https://gitlab.com/gitlab-com/gl-infra/infrastructure/-/issues/10520
#   timeout: 90m

# workflow:
#   rules:
#     # If `$FORCE_GITLAB_CI` is set, create a pipeline.
#     - if: '$FORCE_GITLAB_CI'
#     # As part of the process of creating RCs automatically, we update stable
#     # branches with the changes of the most recent production deployment. The
#     # merge requests used for this merge a branch release-tools/X into a stable
#     # branch. For these merge requests we don't want to run any pipelines, as
#     # they serve no purpose and will run anyway when the changes are merged.
#     - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^release-tools\/\d+\.\d+\.\d+-rc\d+$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^[\d-]+-stable(-ee)?$/ && $CI_PROJECT_PATH == "gitlab-org/gitlab"'
#       when: never
#     # For merge requests, create a pipeline.
#     - if: '$CI_MERGE_REQUEST_IID'
#     # For `master` branch, create a pipeline (this includes on schedules, pushes, merges, etc.).
#     - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
#     # For tags, create a pipeline.
#     - if: '$CI_COMMIT_TAG'
#     # If `$GITLAB_INTERNAL` isn't set, don't create a pipeline.
#     - if: '$GITLAB_INTERNAL == null'
#       when: never
#     # For stable, auto-deploy, and security branches, create a pipeline.
#     - if: '$CI_COMMIT_BRANCH =~ /^[\d-]+-stable(-ee)?$/'
#     - if: '$CI_COMMIT_BRANCH =~ /^\d+-\d+-auto-deploy-\d+$/'
#     - if: '$CI_COMMIT_BRANCH =~ /^security\//'

# variables:
#   RAILS_ENV: "test"
#   NODE_ENV: "test"
#   SIMPLECOV: "true"
#   GIT_DEPTH: "20"
#   GIT_SUBMODULE_STRATEGY: "none"
#   GET_SOURCES_ATTEMPTS: "3"
#   KNAPSACK_RSPEC_SUITE_REPORT_PATH: knapsack/report-master.json
#   FLAKY_RSPEC_SUITE_REPORT_PATH: rspec_flaky/report-suite.json
#   BUILD_ASSETS_IMAGE: "false"
#   ES_JAVA_OPTS: "-Xms256m -Xmx256m"
#   ELASTIC_URL: "http://elastic:changeme@elasticsearch:9200"
#   DOCKER_VERSION: "19.03.0"
#   # Added for DAST test
#   DAST_TEST: "true"
#   DAST_RUN: "true"

# include:
#   - local: .gitlab/ci/build-images.gitlab-ci.yml
#   - local: .gitlab/ci/cache-repo.gitlab-ci.yml
#   - local: .gitlab/ci/cng.gitlab-ci.yml
#   - local: .gitlab/ci/docs.gitlab-ci.yml
#   - local: .gitlab/ci/frontend.gitlab-ci.yml
#   - local: .gitlab/ci/global.gitlab-ci.yml
#   - local: .gitlab/ci/memory.gitlab-ci.yml
#   - local: .gitlab/ci/pages.gitlab-ci.yml
#   - local: .gitlab/ci/qa.gitlab-ci.yml
#   - local: .gitlab/ci/reports.gitlab-ci.yml
#   - local: .gitlab/ci/rails.gitlab-ci.yml
#   - local: .gitlab/ci/review.gitlab-ci.yml
#   - local: .gitlab/ci/rules.gitlab-ci.yml
#   - local: .gitlab/ci/setup.gitlab-ci.yml
#   - local: .gitlab/ci/dev-fixtures.gitlab-ci.yml
#   - local: .gitlab/ci/test-metadata.gitlab-ci.yml
#   - local: .gitlab/ci/yaml.gitlab-ci.yml
#   - local: .gitlab/ci/releases.gitlab-ci.yml



stages:
  - prepare
  - test

prepare-image:
  stage: prepare
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    REVIEW_APPS_ROOT_TOKEN: "q_hWiFjwDXhyD-EboRey"
    RUBY_CMD: "token = User.find_by_username('root').personal_access_tokens.create(scopes: [:api], name: 'Token to disable sign-ups'); token.set_token('${REVIEW_APPS_ROOT_TOKEN}'); begin; token.save!; rescue(ActiveRecord::RecordNotUnique); end"
    COL: ":"
  script:
    - |
      set -x
      docker pull gitlab/gitlab-ee:nightly
      docker run --detach --name gitlab --hostname gitlab --publish 443:443 --publish 80:80 --publish 22:22 gitlab/gitlab-ee:nightly
      echo "waiting until GitLab docker image has started"
      timeout 240 docker logs -f gitlab || EXIT_CODE=$?
      [ $EXIT_CODE -ne 143 ] && echo "Unexpected exit code $EXIT_CODE from docker logs" && return $EXIT_CODE
      # echo "${RUBY_CMD}" > ./create-token.sh
      # docker cp ./create-token.sh gitlab:/tmp
      docker exec gitlab gitlab-rails runner ${RUBY_CMD}

      apk add curl
      'curl  -vvv --show-error --request PUT --header "PRIVATE-TOKEN${COL} ${REVIEW_APPS_ROOT_TOKEN}" "http://gitlab/api/v4/application/settings?signup_enabled=false"'

      docker stop gitlab
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      docker commit $(docker ps -q) $CI_REGISTRY/gitlab-org/gitlab/gitlab-ee-nightly-dast:latest
      docker push $CI_REGISTRY/gitlab-org/gitlab/gitlab-ee-nightly-dast



