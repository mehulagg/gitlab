# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby28 < Parser::Base


  def version
    28
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-690,609,609,609,225,-114,-117,-690,-690,-690,294,-116,294,-690,-690',
'857,-690,247,-110,1104,-117,-699,1045,-116,-690,-690,609,616,926,649',
'294,-113,899,609,616,799,-690,-690,226,-690,-690,-690,-690,-690,609',
'226,857,-111,-112,244,-109,-115,-112,246,245,-598,215,216,622,-599,-114',
'1098,876,-111,857,1023,-690,-690,-690,-690,-690,-690,-690,-690,-690',
'-690,-690,-690,-690,-690,-115,-113,-690,-690,-690,794,674,-110,-109',
'226,-690,215,216,-690,289,648,-686,293,-690,293,-690,1105,-690,-690',
'1046,-690,-690,-690,-690,-690,-486,-690,-690,-690,-109,-108,-687,293',
'-110,120,120,120,-103,-114,119,119,119,-690,-114,-116,-690,-690,-107',
'-104,-116,-690,-110,925,-117,-690,-104,-110,-690,-117,120,-113,-690',
'-690,-690,119,226,120,-690,-690,936,-690,119,-687,-686,1024,-106,-103',
'120,-690,-690,-111,-112,119,-109,-105,-111,-112,-102,-109,-102,-690',
'-690,668,-690,-690,-690,-690,-690,215,216,226,-699,419,-103,120,-104',
'-105,421,420,119,634,-101,-100,-115,-113,543,294,647,-115,-113,-690',
'-690,-690,-690,-690,-690,-690,-690,-690,-690,-690,-690,-690,-690,215',
'216,-690,-690,-690,-103,674,226,1026,-103,-690,546,-103,-690,120,223',
'289,-112,-690,119,-690,-102,-690,-690,-103,-690,-690,-690,-690,-690',
'1051,-690,-690,-690,98,99,-686,-104,-105,634,636,635,634,98,99,634,289',
'-690,1050,646,-690,-690,634,-690,-699,-690,622,1112,120,-690,623,-102',
'-690,119,-102,-113,-690,-690,-690,293,-116,-690,-690,-690,-117,-690',
'-102,-104,-105,-95,-104,-105,-594,-690,-690,-690,-690,-690,-699,-594',
'226,-81,-104,-105,226,-690,-690,223,-690,-690,-690,-690,-690,636,635',
'632,636,635,632,636,635,357,100,101,472,634,636,635,639,825,732,100',
'101,1112,226,-690,-690,-690,-690,-690,-690,-690,-690,-690,-690,-690',
'-690,-690,-690,852,-599,-690,-690,-690,-108,854,-690,-594,839,-690,634',
'-587,-690,-690,839,-690,-117,-690,-587,-690,357,-690,-690,634,-690,-690',
'-690,-690,-690,-308,-690,-690,-690,-117,669,951,-308,-308,-308,636,635',
'637,-308,-308,622,-308,-690,-101,876,-690,-690,-690,-690,-308,-690,-102',
'-690,668,-112,-110,598,-690,-598,597,-113,-308,-308,-111,-308,-308,-308',
'-308,-308,-111,636,635,-587,572,-584,569,568,567,577,570,823,-584,853',
'636,635,632,931,899,580,-114,-111,-308,-308,-308,-308,-308,-308,-308',
'-308,-308,-308,-308,-308,-308,-308,-100,546,-308,-308,-308,575,673,-112',
'215,216,-308,634,-109,-308,585,584,588,587,-308,634,-308,581,-308,-308',
'634,-308,-308,-308,-308,-308,-584,-308,226,-308,-584,669,-114,-584,-584',
'-584,1034,776,-584,-584,-584,221,-584,-308,-107,1035,-308,-308,287,-308',
'-584,-308,-584,-584,-584,777,-116,566,-308,120,899,-115,-584,-584,119',
'-584,-584,-584,-584,-584,799,636,635,650,226,-309,221,1140,-105,636',
'635,645,-309,287,636,635,641,1096,1097,298,-114,-309,-584,-584,-584',
'-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,222,1038,-584',
'-584,-584,598,-584,-584,600,598,-584,-284,600,-584,-584,539,-584,-591',
'-584,532,-584,226,-584,-584,-591,-584,-584,-584,-584,-584,-308,-584',
'226,-584,-309,222,84,-308,-308,-308,863,588,587,-308,-308,859,-308,-584',
'85,860,-584,-584,-584,-584,-308,-584,-590,-584,86,120,531,221,-584,-590',
'119,-584,-308,-308,469,-308,-308,-308,-308,-308,264,265,1044,470,120',
'221,-589,-592,-591,119,120,-595,1124,-589,-592,119,598,226,-595,600',
'1047,627,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308',
'-308,-308,263,262,-308,-308,-308,-80,673,931,899,226,-308,-590,-593',
'-308,870,871,222,226,-308,-593,-308,226,-308,-308,226,-308,-308,-308',
'-308,-308,-587,-308,129,-308,222,-589,-592,-587,-587,-587,-595,1059',
'-587,-587,-587,-309,-587,-308,247,759,-308,-308,-309,-106,-587,-308',
'-587,-587,-587,215,216,-309,-308,759,1063,-115,-587,-587,1065,-587,-587',
'-587,-587,-587,1067,-343,1069,-593,226,221,244,1071,-343,520,246,245',
'1129,242,243,518,516,-343,1086,1087,505,1127,-587,-587,-587,-587,-587',
'-587,-587,-587,-587,-587,-587,-587,-587,-587,-309,221,-587,-587,-587',
'221,-587,-587,1124,225,-587,474,220,-587,-587,473,-587,627,-587,1102',
'-587,218,-587,-587,857,-587,-587,-587,-587,-587,-343,-587,-308,-587',
'222,1103,1106,471,857,-308,-308,-308,1122,422,-308,-308,-308,-587,-308',
'1125,-587,-587,-587,-587,409,-587,-308,-587,-308,-308,-308,357,-587',
'357,1130,-587,222,226,-308,-308,222,-308,-308,-308,-308,-308,1131,-308',
'1013,221,1013,221,1013,1137,-308,1138,661,345,625,-687,1146,344,283',
'-308,1149,659,759,627,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308',
'-308,-308,-308,-308,1151,1153,-308,-308,-308,1155,855,-308,221,1157',
'-308,1157,116,-308,-308,619,-308,752,-308,1157,-308,217,-308,-308,617',
'-308,-308,-308,-308,-308,-308,-308,222,-308,222,1087,214,572,1149,569',
'568,567,-308,570,1149,213,-687,-308,-686,-308,-308,-308,-308,-308,-687',
'-308,221,-308,-308,226,212,129,-308,548,1013,-115,316,75,76,22,9,63',
'470,222,769,69,70,761,763,765,73,-684,71,72,74,31,32,77,78,123,124,125',
'126,127,79,29,28,108,107,109,110,767,572,19,569,568,567,-308,570,8,49',
'318,10,112,111,113,102,62,104,103,105,222,106,114,115,-299,98,99,45',
'46,44,221,-299,-587,759,-597,778,779,538,769,-587,-299,-597,759,782',
'-684,783,536,773,-587,41,-597,226,320,785,756,64,65,-596,226,66,226',
'36,790,753,-596,48,752,-684,795,247,796,817,818,-596,20,819,114,115',
'800,96,84,87,88,746,89,91,90,92,968,-299,1149,552,85,95,226,222,1183',
'-587,580,-597,68,244,86,100,101,246,245,42,43,316,75,76,22,9,63,1157',
'735,-95,69,70,226,822,-596,73,-683,71,72,74,31,32,77,78,226,826,968',
'827,581,79,29,28,108,107,109,110,580,226,19,226,976,-282,1157,1157,8',
'49,318,10,112,111,113,102,62,104,103,105,577,106,114,115,840,98,99,45',
'46,44,580,1092,-584,569,568,567,505,570,581,-584,505,226,857,858,-683',
'247,875,577,-584,41,976,878,34,247,880,64,65,580,283,66,247,36,885,588',
'587,48,887,-683,581,572,889,569,568,567,20,570,518,520,247,96,84,87',
'88,746,89,91,90,92,226,289,588,587,85,95,678,581,289,-584,746,289,68',
'247,86,100,101,899,769,42,43,316,75,76,22,9,63,773,667,666,69,70,919',
'920,226,73,-690,71,72,74,31,32,77,78,123,124,125,126,127,79,29,28,108',
'107,109,110,226,572,19,569,568,567,662,570,8,49,318,10,112,111,113,102',
'62,104,103,105,226,106,114,115,899,98,99,45,46,44,933,1092,-690,569',
'568,567,247,570,769,-690,934,226,658,657,-686,-281,655,773,-690,41,654',
'651,34,629,226,64,65,621,944,66,572,36,569,568,567,48,570,-690,244,620',
'-283,411,246,245,20,242,243,226,616,96,84,87,88,950,89,91,90,92,520',
'602,601,708,85,95,226,977,591,-690,553,247,68,887,86,100,101,983,549',
'42,43,5,75,76,22,9,63,746,1000,-281,69,70,1004,759,777,73,1007,71,72',
'74,31,32,77,78,239,1009,1011,1013,1013,79,29,28,108,107,109,110,226',
'1022,19,123,124,125,126,127,8,49,7,10,112,111,113,102,62,104,103,105',
',106,114,115,,98,99,45,46,44,247,251,252,253,254,264,265,259,260,255',
'256,,240,241,,,257,258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245',
',242,243,263,262,248,20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,261',
',,,,68,,86,100,101,,,42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74',
'31,32,77,78,123,124,125,126,127,79,29,28,108,107,109,110,,,19,,,,,663',
'8,49,318,10,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,247,251,252,253,254,264,265,259,260,255,256,,240,241,,,257,258,,41',
',,34,,,64,65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248,20,249',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,261,,-255,,,68,,86,100,101,,',
'42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79',
'29,28,108,107,109,110,,,19,,,,,663,8,49,318,10,112,111,113,102,62,104',
'103,105,,106,114,115,,98,99,45,46,44,247,251,252,253,254,264,265,259',
'260,255,256,,240,241,,,257,258,,41,,,34,,,64,65,,,66,,36,244,,250,48',
'246,245,,242,243,263,262,248,20,249,,,,96,84,87,88,,89,91,90,92,,,,',
'85,95,,261,,,,,68,,86,100,101,,,42,43,5,75,76,22,9,63,,,,69,70,,,,73',
',71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,8,49,7',
'10,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,247,251',
'252,253,254,264,265,259,260,255,256,,240,241,,,257,258,,41,,,34,,,64',
'65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248,20,249,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,261,,,,,68,,86,100,101,,,42,43,316,75',
'76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107',
'109,110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,247,251,252,253,254,264,265,259,260,255,256,,240',
'241,,,257,258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245,,242,243',
'263,262,248,20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,261,,,,,68',
',86,100,101,,,42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32',
'77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,247,251,252,253,254',
'264,265,259,260,255,256,,240,241,,,257,258,,41,,,34,,,64,65,,,66,,36',
'244,,250,48,246,245,,242,243,263,262,248,20,249,,,,96,84,87,88,,89,91',
'90,92,,,,,85,95,,261,,,,,68,,86,100,101,,,42,43,316,75,76,22,9,63,,',
',69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19',
',,,,,8,49,318,10,112,111,113,102,62,104,103,105,,106,114,115,,98,99',
'45,46,44,247,251,252,253,254,264,265,259,260,255,256,,240,241,,,257',
'258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248',
'20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,261,,,,,68,,86,100,101',
',,42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,',
'79,29,28,108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104',
'103,105,,106,114,115,,98,99,45,46,44,247,251,252,253,254,264,265,259',
'260,255,256,,240,241,,,257,258,,41,,,34,,,64,65,,,66,,36,244,,250,48',
'246,245,,242,243,263,262,248,20,249,,,,96,84,87,88,,89,91,90,92,,,,',
'85,95,226,261,,,,,68,,86,100,101,,,42,43,316,75,76,22,9,63,,,,69,70',
',,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,',
'8,49,318,10,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,247,251,252,253,254,264,265,259,260,255,256,,240,241,,,257,258,,41',
',,34,,,64,65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248,20,249',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,261,,,,,68,,86,100,101,,,42,43',
'316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28',
'108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103,105',
',106,114,115,,98,99,45,46,44,247,251,252,253,254,264,265,259,260,255',
'256,,240,241,,,257,258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245',
',242,243,263,262,248,20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,261',
',,,,68,,86,100,101,,,42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74',
'31,32,77,78,,,,,,79,29,28,108,107,109,110,,572,19,569,568,567,,570,8',
'49,318,10,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44',
'247,572,,569,568,567,,570,769,,,,,,,,257,258,,41,,,34,,,64,65,,,66,',
'36,244,,250,48,246,245,769,242,243,,,248,20,249,,,,96,84,87,88,,89,91',
'90,92,,,,,85,95,,,,,,,68,,86,100,101,,,42,43,316,75,76,22,9,63,,,,69',
'70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,',
',,,8,49,318,10,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45',
'46,44,247,251,252,253,254,264,265,259,,255,256,,,,,,257,258,,41,,,34',
',,64,65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248,20,249,,,',
'96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,,42,43,316',
'75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108',
'107,109,110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103,105,,106',
'114,115,,98,99,45,46,44,247,251,252,253,254,264,265,259,260,255,256',
',-712,-712,,,257,258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245,',
'242,243,263,262,248,20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,',
',,,68,,86,100,101,,,42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74',
'31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,8,49,318,10,112',
'111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,247,251,252',
'253,254,264,265,259,260,255,256,,-712,-712,,,257,258,,41,,,34,,,64,65',
',,66,,36,244,,250,48,246,245,,242,243,263,262,248,20,249,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,,42,43,316,75,76,22',
'9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109',
'110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103,105,,106,114,115',
',98,99,45,46,44,247,251,252,253,254,264,265,,,255,256,,,,,,257,258,',
'41,,,34,,,64,65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248,20',
'249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,,42',
'43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29',
'28,108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103',
'105,,106,114,115,,98,99,45,46,44,247,,,,,,,,,,,,,,,,257,258,,41,,,34',
',,64,65,,,66,,36,244,,250,48,246,245,,242,243,,,248,20,249,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,,42,43,316,75,76',
'22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109',
'110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103,105,,106,114,115',
',98,99,45,46,44,247,-712,-712,-712,-712,264,265,,,-712,-712,,,,,,257',
'258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248',
'20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,',
'42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79',
'29,28,108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103',
'105,,106,114,115,,98,99,45,46,44,247,-712,-712,-712,-712,264,265,,,-712',
'-712,,,,,,257,258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245,,242',
'243,263,262,248,20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68',
',86,100,101,,,42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32',
'77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,247,-712,-712,-712,-712',
'264,265,,,-712,-712,,,,,,257,258,,41,,,34,,,64,65,,,66,,36,244,,250',
'48,246,245,,242,243,263,262,248,20,249,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,,,,68,,86,100,101,,,42,43,316,75,76,22,9,63,,,,69,70,,,',
'73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,8,49',
'318,10,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,247',
'-712,-712,-712,-712,264,265,,,-712,-712,,,,,,257,258,,41,,,320,,,64',
'65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248,20,249,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,,42,43,316,75,76',
'22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109',
'110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103,105,,106,114,115',
',98,99,45,46,44,247,-712,-712,-712,-712,264,265,,,-712,-712,,,,,,257',
'258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248',
'20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,',
'42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79',
'29,28,108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103',
'105,,106,114,115,,98,99,45,46,44,247,-712,-712,-712,-712,264,265,,,-712',
'-712,,,,,,257,258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245,,242',
'243,263,262,248,20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68',
',86,100,101,,,42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32',
'77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,247,251,252,253,254',
'264,265,259,260,255,256,,-712,-712,,,257,258,,41,,,34,,,64,65,,,66,',
'36,244,,250,48,246,245,,242,243,263,262,248,20,249,,,,96,84,87,88,,89',
'91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,,42,43,316,75,76,22,9,63,,',
',69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19',
',,,,,8,49,318,10,112,111,113,102,62,104,103,105,,106,114,115,,98,99',
'45,46,44,247,251,252,253,254,264,265,259,260,255,256,,-712,-712,,,257',
'258,,41,,,34,,,64,65,,,66,,36,244,,250,48,246,245,,242,243,263,262,248',
'20,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,',
'42,43,316,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79',
'29,28,108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104,103',
'105,,106,114,115,,98,99,45,46,44,247,,,,,,,,,,,,,,,,257,258,,41,,,34',
',,64,65,,,66,,36,244,,250,48,246,245,,242,243,,,,20,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,,42,43,316,75,76,22,9,63',
',,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,',
',19,,,,,,8,49,318,10,112,111,113,102,62,104,103,105,,106,114,115,,98',
'99,45,46,44,247,,,,,,,,,,,,,,,,257,258,,41,,,320,,,64,65,,,66,,36,244',
',250,48,246,245,,242,243,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32,77,78,',
',,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104',
'103,105,,106,114,115,,98,99,45,46,44,247,,,,,,,,,,,,,,,,257,258,,231',
',,237,,,64,65,,,66,,427,244,,,48,246,245,,242,243,,,,236,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,',
'73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49',
',,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,',
',,,,,,,,,,,,,231,,,237,,,64,65,,,66,,427,,,,48,,,,,,,,,236,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43',
',73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,,49',
',,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,',
',,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,',
'73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,,49',
',,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,',
',,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,',
'73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49',
',,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,',
',,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,',
'73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49',
',,112,111,113,102,62,104,103,105,310,106,114,115,,98,99,45,46,44,,,',
',,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,307,,305,,48,,,311,,,,,,236',
',,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101',
'69,70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110',
',,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99',
'45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101',
'69,70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110',
',,19,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45',
'46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69',
'70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19',
',,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,',
'96,84,87,88,,89,91,90,92,,,,,85,95,226,,,75,76,22,68,63,86,100,101,69',
'70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238',
',,,,,,49,,,112,111,113,102,62,104,103,105,310,106,114,115,,98,99,45',
'46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,307,,305,,48,,,311',
',,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86',
'100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,310,106',
'114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,',
',,,48,,,311,,,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,75,76',
'22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79',
'332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103',
'105,310,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64',
'65,,,66,,729,,,,48,,,311,,,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,',
'85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337,338',
'77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102',
'62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,',
',237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337',
'338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231',
',,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337',
'338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231',
',,237,,,64,65,,,66,,307,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90',
'92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74',
'31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113',
'102,62,104,103,105,310,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,',
',,231,,,237,,,64,65,,,66,,307,,305,,48,,,311,,,,,,236,,,,,96,308,87',
'88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,',
'73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,',
',,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44',
',,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42',
'43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238,,,',
',,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44',
',,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,-421,,42,43,,,',
'-421,-421,-421,,,-421,-421,-421,,-421,,,,,,,,-421,-421,-421,-421,,,',
',,,,,-421,-421,,-421,-421,-421,-421,-421,,,,,,,,,,,,,,,,,,,,,,,-421',
'-421,-421,-421,-421,-421,-421,-421,-421,-421,-421,-421,-421,-421,,,-421',
'-421,-421,,,-421,,289,-421,,,-421,-421,,-421,,-421,,-421,,-421,-421',
',-421,-421,-421,-421,-421,-315,-421,-421,-421,,,,-315,-315,-315,,,-315',
'-315,-315,,-315,-421,,,-421,-421,,-421,-315,-421,-315,-315,,,,,-421',
',,,-315,-315,,-315,-315,-315,-315,-315,,,,,,,,,,,,,,,,,,,,,,,-315,-315',
'-315,-315,-315,-315,-315,-315,-315,-315,-315,-315,-315,-315,,,-315,-315',
'-315,,,-315,,298,-315,,,-315,-315,,-315,,-315,,-315,,-315,-315,,-315',
'-315,-315,-315,-315,,-315,,-315,,,,,,,,,,,,,,-315,,,-315,-315,,-315',
',-315,75,76,22,,63,,-315,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79',
'29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105',
'310,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65',
',,66,,307,,305,,48,,,311,,,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,',
'85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32,77',
'78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62',
'104,103,105,310,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,',
',237,,,64,65,,,66,,307,,305,,48,,,311,,,,,,236,,,,,96,308,87,88,,89',
'91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71',
'72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112',
'111,113,102,62,104,103,105,310,106,114,115,,98,99,45,46,44,,,,,,,,,',
',,,,,,,,,,231,,,237,,,64,65,,,66,,307,,305,,48,,,311,,,,,,236,,,,,96',
'308,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70',
'42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,',
',,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44',
',,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42',
'43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,',
',,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,',
',,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43',
',73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,',
',,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44',
',,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42',
'43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238',
',,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,',
',96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69',
'70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110',
',,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99',
'45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101',
'69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109',
'110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98',
'99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100',
'101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107',
'109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115',
',98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86',
'100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107',
'109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,310,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,307,',
'305,,48,,,311,,,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,,',
',68,,86,100,101,-300,,42,43,,,,-300,-300,-300,,,-300,-300,-300,,-300',
',,,,,,,-300,,-300,-300,-300,,,,108,107,109,110,-300,-300,,-300,-300',
'-300,-300,-300,,,,,112,111,113,,,,,,,,,,,98,99,,,341,-300,-300,-300',
'-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,,,-300,-300,-300',
',,-300,,,-300,,,-300,-300,,-300,,-300,,-300,,-300,-300,,-300,-300,-300',
'-300,-300,,-300,,-300,,96,84,87,88,,89,91,90,92,,,,-300,85,95,-300,-300',
'-300,-300,,-300,707,-300,86,100,101,,-300,75,76,22,9,63,,,,69,70,,,',
'73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,8,49',
',10,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,',
',,,,,,,,,,,,,,,41,,,34,,,64,65,,,66,,36,,,,48,,,,,,,,,20,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,',
'73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,',
',,,49,,,112,111,113,102,62,104,103,105,310,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,307,,,,48,,,311,,,,,,236',
',,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101',
'69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109',
'110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,310,106,114,115',
',98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,',
'311,,,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68',
'63,86,100,101,69,70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108',
'107,109,110,,,19,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107',
'109,110,,,19,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115',
',98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,',
',,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86',
'100,101,69,70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107',
'109,110,,,19,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115',
',98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,',
',,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,120,,,,,119,68,,86,100',
'101,,,42,43,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,',
'79,29,28,108,107,109,110,,,19,,,,,,8,49,7,10,112,111,113,102,62,104',
'103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,41,,,34,,,64',
'65,,,66,,36,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,,,411,68,,86,100,101,,,42,43,75,76,22,,63,,,,69,70,,,,73,,71,72,74',
'31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,,49,,,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231',
',,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32',
'77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,,49,,,112,111,113,102',
'62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,',
',237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32',
'77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,,49,,,112,111,113,102',
'62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,',
',237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32',
'77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,,49,,,112,111,113,102',
'62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,',
',237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,,,,68,,86,100,101,,,42,43,75,76,22,9,63,,,,69,70,,,,73,,71',
'72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,8,49,,10,112',
'111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,',
',,,,,,,41,,,34,,,64,65,,,66,,36,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89',
'91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71',
'72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,',
',112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,',
',,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,',
'73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,',
',,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44',
',,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42',
'43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238',
',,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,',
',96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69',
'70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110',
',,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99',
'45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101',
'69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109',
'110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98',
'99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100',
'101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107',
'109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115',
',98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86',
'100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100',
'101,,,42,43,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,',
'79,29,28,108,107,109,110,,,19,,,,,,8,49,318,10,112,111,113,102,62,104',
'103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,41,,,34,,,64',
'65,,,66,,36,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,,,411,68,,86,100,101,,,42,43,75,76,22,,63,,,,69,70,,,,73,,71,72,74',
'337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111',
'113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,',
',,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91',
'90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72',
'74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112',
'111,113,102,62,104,103,105,310,106,114,115,,98,99,45,46,44,,,,,,,,,',
',,,,,,,,,,231,,,237,,,64,65,,,66,,,,305,,48,,,311,,,,,,236,,,,,96,308',
'87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43',
',73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,',
',,,,49,,,112,111,113,102,62,104,103,105,310,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,729,,305,,48,,,311,,,',
',,236,,,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,',
',42,43,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29',
'28,108,107,109,110,,,19,,,,,,8,49,,10,112,111,113,102,62,104,103,105',
',106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,41,,,34,,,64,65,,,66',
',36,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76',
'22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79',
'332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103',
'105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65',
',,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,',
',,68,,86,100,101,-264,,42,43,,,,-264,-264,-264,,,-264,-264,-264,572',
'-264,569,568,567,577,570,,,-264,-264,-264,,,,580,,,,,,-264,-264,,-264',
'-264,-264,-264,-264,,,,,,,,,575,,572,,569,568,567,577,570,585,584,588',
'587,,,,581,580,,,,,,,,-264,,,,,,,-264,,,,,289,-264,575,605,,226,,,,',
',585,584,588,587,,,,581,,,,,-264,-264,,,,,,,,,,,,,,-264,,,-264,,75,76',
'22,-264,63,,,,69,70,-264,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108',
'107,109,110,,,19,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101',
',,42,43,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29',
'28,108,107,109,110,,,19,,,,,,8,49,7,10,112,111,113,102,62,104,103,105',
',106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,41,,,34,,,64,65,,,66',
',36,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76',
'22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29',
'28,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,310',
'106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66',
',307,,305,,48,,,311,,,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,,85,95',
',,,75,76,22,68,63,86,100,101,69,70,42,507,,73,,71,72,74,31,32,77,78',
',,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104',
'103,105,310,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237',
',,64,65,,,66,,307,,305,,48,,,311,,,,,,236,,,,,96,308,87,88,,89,91,90',
'92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74',
'31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113',
'102,62,104,103,105,310,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,',
',,231,,,237,,,64,65,,,66,,307,,305,,48,,,311,,,,,,236,,,,,96,308,87',
'88,,89,91,90,92,,,,,85,95,226,,,75,76,22,68,63,86,100,101,69,70,42,43',
',73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,',
',,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44',
',,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42',
'43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238',
',,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,',
',96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69',
'70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110',
',,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99',
'45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101',
'69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109',
'110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98',
'99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,,',
'42,43,75,76,22,9,63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29',
'28,108,107,109,110,,,19,,,,,,8,49,,10,112,111,113,102,62,104,103,105',
',106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,41,,,34,,,64,65,,,66',
',36,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76',
'22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79',
'332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103',
'105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65',
',,66,,831,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,',
',,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32,77,78,,',
',,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104',
'103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78',
',,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62',
'104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237',
',,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32,77,78',
',,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104',
'103,105,310,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237',
',,64,65,,,66,,307,,305,,48,,,311,,,,,,236,,,,,96,308,87,88,,89,91,90',
'92,,,,,85,95,,,,,,,68,,86,100,101,,,42,43,75,76,22,9,63,,,,69,70,,,',
'73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,8,49',
',10,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,',
',,,,,,,,,,,,,,,41,,,34,,,64,65,,,66,,36,,,,48,,,,,,,,,20,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,',
'73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,',
',,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44',
',,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42',
'43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238',
',,,,,,49,,,112,111,113,102,62,104,103,105,310,106,114,115,,98,99,45',
'46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,305,,48,,,311,,,',
',,236,,,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100',
'101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107',
'109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,310,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,729,',
'305,,48,,,311,,,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,75',
'76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,',
'79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103',
'105,310,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64',
'65,,,66,,,,305,,48,,,311,,,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,',
'85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337,338',
'77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102',
'62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,',
',237,,,64,65,,,66,,729,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31',
'32,77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231',
',,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31',
'32,77,78,,,,,,79,29,28,108,107,109,110,,,19,,,,,,,49,,,112,111,113,102',
'62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,',
',237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32',
'77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102',
'62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,',
',237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,31,32',
'77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102',
'62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,',
',237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337',
'338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231',
',,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337',
'338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231',
',,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74,337',
'338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111,113',
'102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231',
',,237,552,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90',
'92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72,74',
'337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,49,,,112,111',
'113,102,62,104,103,105,,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,',
',,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91',
'90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43,,73,,71,72',
'74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238,,,,,,,49,,,112,111',
'113,102,62,104,103,105,310,106,114,115,,98,99,45,46,44,,,,,,,,,,,,,',
',,,,,,231,,,237,,,64,65,,,66,,307,,305,,48,,,311,,,,,,236,,,,,96,308',
'87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42,43',
',73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238,,',
',,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46,44',
',,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70,42',
'43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238',
',,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,',
',96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69',
'70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238',
',,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,',
',96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69',
'70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,238',
',,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236,,,',
',96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69',
'70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19',
',,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,',
'96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70',
'42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,',
'238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45',
'46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101',
'69,70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110',
',,19,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45',
'46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69',
'70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110,,,19',
',,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45,46',
'44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,20,,,,',
'96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69,70',
'42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,',
'238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,45',
'46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101',
'69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109',
'110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115,,98',
'99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100',
'101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107',
'109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115',
',98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86',
'100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107',
'109,110,,,19,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114,115',
',98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48,,',
',,,,,,20,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86',
'100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,,,,,48',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63',
'86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,427,',
',,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22',
'68,63,86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332',
'340,108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105',
',106,114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,',
'66,,,,,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,',
'68,,86,100,101,-264,,42,43,,,,-264,-264,-264,,,-264,-264,-264,,-264',
',,,,,,,-264,-264,-264,-264,,,,,,,,,-264,-264,,-264,-264,-264,-264,-264',
',,,,,,,,,,,,,,,,,,,,,,-264,-264,-264,-264,-264,-264,-264,-264,-264,-264',
'-264,-264,-264,-264,,,-264,-264,-264,,,-264,,289,-264,,,-264,-264,,-264',
',-264,,-264,,-264,-264,,-264,-264,-264,-264,-264,,-264,-264,-264,572',
',569,568,567,577,570,,,,,,,-264,,580,-264,-264,-691,-264,,-264,,,,-691',
'-691,-691,-264,,-691,-691,-691,,-691,,,575,,,,,-691,-691,-691,-691,-691',
',588,587,,,,581,-691,-691,,-691,-691,-691,-691,-691,,,,,,,,,,,,,,,,',
',,,,,,-691,-691,-691,-691,-691,-691,-691,-691,-691,-691,-691,-691,-691',
'-691,,,-691,-691,-691,,,-691,,,-691,,,-691,-691,,-691,,-691,,-691,,-691',
'-691,,-691,-691,-691,-691,-691,,-691,-691,-691,,,,,,,,,,,,,,-691,,,-691',
'-691,-691,-691,,-691,-692,-691,,,,,-691,-692,-692,-692,,,-692,-692,-692',
',-692,,,,,,,,-692,-692,-692,-692,-692,,,,,,,,-692,-692,,-692,-692,-692',
'-692,-692,,,,,,,,,,,,,,,,,,,,,,,-692,-692,-692,-692,-692,-692,-692,-692',
'-692,-692,-692,-692,-692,-692,,,-692,-692,-692,,,-692,,,-692,,,-692',
'-692,,-692,,-692,,-692,,-692,-692,,-692,-692,-692,-692,-692,,-692,-692',
'-692,,,,,,,,,,,,,,-692,,,-692,-692,-692,-692,,-692,,-692,,75,76,22,-692',
'63,,,,69,70,,,,73,,71,72,74,31,32,77,78,,,,,,79,29,28,108,107,109,110',
',,238,,,,,,,49,,,112,111,113,102,62,104,103,105,310,106,114,115,,98',
'99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,307,,305,,48',
',,311,,,,,,236,,,,,96,308,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68',
'63,86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332,340',
'108,107,109,110,,,238,,,,,,,49,,,112,111,113,102,62,104,103,105,,106',
'114,115,,98,99,45,46,44,,,,,,,,,,,,,,,,,,,,231,,,237,,,64,65,,,66,,',
',,,48,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22',
'68,63,86,100,101,69,70,42,43,,73,,71,72,74,337,338,77,78,,,,,,79,332',
'340,108,107,109,110,,,238,,,,,,,333,,,112,111,113,102,62,104,103,105',
',106,114,115,,98,99,,,341,,,,,,,,,,,,,,,,,,,,329,,,325,,,64,65,,,66',
',,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68',
'63,86,100,101,69,70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,333,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,,,341,,,,,,,,,,,,,,,,,,,,1079,,,237,,,64,65,,,66,,,,,,,,',
',,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100',
'101,69,70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109',
'110,,,238,,,,,,,333,,,112,111,113,102,62,104,103,105,,106,114,115,,98',
'99,,,341,,,,,,,,,,,,,,,,,,,,329,,,325,,,64,65,,,66,,,,,,,,,,,,,,,,,',
',,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101,69',
'70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110,,,238',
',,,,,,333,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99,,,341',
',,,,,,,,,,,,,,,,,,,329,,,237,,,64,65,,,66,,,572,,569,568,567,577,570',
',,,,,,,,580,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,534,,575,68,,86,100',
'101,75,76,22,,63,588,587,,69,70,581,,,73,,71,72,74,337,338,77,78,,,',
',,79,332,340,108,107,109,110,,,238,,,,,,,333,,,112,111,113,102,62,104',
'103,105,,106,114,115,,98,99,,,341,,,,,,,,,,,,,,,,,,,,329,,,325,,,64',
'65,,,66,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75',
'76,22,68,63,86,100,101,69,70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332',
'340,108,107,109,110,,,238,,,,,,,333,,,112,111,113,102,62,104,103,105',
',106,114,115,,98,99,,,341,,,,,,,,,,,,,,,,,,,,1073,,,237,,,64,65,,,66',
',,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68',
'63,86,100,101,69,70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108',
'107,109,110,,,238,,,,,,,333,,,112,111,113,102,62,104,103,105,,106,114',
'115,,98,99,,,341,,,,,,,,,,,,,,,,,,,,1073,,,237,,,64,65,,,66,,,,,,,,',
',,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100',
'101,69,70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109',
'110,,,238,,,,,,,333,,,112,111,113,102,62,104,103,105,,106,114,115,,98',
'99,,,341,,,,,,,,,,,,,,,,,,,,329,,,325,,,64,65,,,66,,324,,,,,,,,,,,,',
',,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86,100,101',
'69,70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107,109,110',
',,238,,,,,,,333,,,112,111,113,102,62,104,103,105,,106,114,115,,98,99',
',,341,,,,,,,,,,,,,,,,,,,,329,,,237,,,64,65,,,66,,,572,,569,568,567,577',
'570,,,,,,,,,580,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,343,,575,68,',
'86,100,101,75,76,22,,63,588,587,,69,70,581,,,73,,71,72,74,337,338,77',
'78,,,,,,79,332,340,108,107,109,110,,,238,,,,,,,333,,,112,111,113,102',
'62,104,103,105,,106,114,115,,98,99,,,341,,,,,,,,,,,,,,,,,,,,386,,,34',
',,64,65,,,66,,36,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,75,76,22,68,63,86,100,101,69,70,,,,73,,71,72,74,337,338,77,78,,,',
',,79,332,340,108,107,109,110,,,238,,,,,,,333,,,112,111,113,102,62,104',
'103,105,,106,114,115,,98,99,,,341,,,,,,,,,,,,,,,,,,,,329,,,325,,,64',
'65,,,66,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75',
'76,22,68,63,86,100,101,69,70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332',
'340,108,107,109,110,,,238,,,,,,,333,,,112,111,113,391,62,104,103,392',
',106,114,115,,98,99,,,341,,,,,,,,,,,,,,,,,398,,,393,,,237,,,64,65,,',
'66,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22',
'68,63,86,100,101,69,70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332,340',
'108,107,109,110,,,238,,,,,,,333,,,112,111,113,102,62,104,103,105,,106',
'114,115,,98,99,,,341,,,,,,,,,,,,,,,,,,,,329,,,325,,,64,65,,,66,,,,,',
',,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,75,76,22,68,63,86',
'100,101,69,70,,,,73,,71,72,74,337,338,77,78,,,,,,79,332,340,108,107',
'109,110,,,238,,,,,,,333,,,112,111,113,391,62,104,103,392,,106,114,115',
',98,99,,,341,,,,,,,,,,,,,,,,,,,,393,,,237,,,64,65,,,66,,,,,,,,,,,,,',
',,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,68,,86,100,101,179,190',
'180,203,176,196,186,185,206,207,201,184,183,178,204,208,209,188,177',
'191,195,197,189,182,,,,198,205,200,199,192,202,187,175,194,193,,,,,',
'174,181,172,173,169,170,171,132,134,,,133,,,,,,,,163,164,,160,142,143',
'144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156,,141',
'162,159,158,167,154,155,149,147,139,161,140,,,168,96,,,,,,,,,,,,,,95',
'179,190,180,203,176,196,186,185,206,207,201,184,183,178,204,208,209',
'188,177,191,195,197,189,182,,,,198,205,200,199,192,202,187,175,194,193',
',,,,,174,181,172,173,169,170,171,132,134,,,133,,,,,,,,163,164,,160,142',
'143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156',
',141,162,159,158,167,154,155,149,147,139,161,140,,,168,96,,,,,,,,,,',
',,,95,179,190,180,203,176,196,186,185,206,207,201,184,183,178,204,208',
'209,188,177,191,195,197,189,182,,,,198,205,200,199,192,202,187,175,194',
'193,,,,,,174,181,172,173,169,170,171,132,134,131,,133,,,,,,,,163,164',
',160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,',
',,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,,,168,96',
',,,,,,,,,,,,,95,179,190,180,203,176,196,186,185,206,207,201,184,183',
'178,204,208,209,188,177,191,195,197,189,182,,,,198,205,200,199,192,202',
'187,175,194,193,,,,,,174,181,172,173,169,170,171,132,134,,,133,,,,,',
',,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153',
',,,,,,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140',
',,168,96,108,107,109,110,,,,,,,,,,95,,,112,111,113,708,,,572,711,569',
'568,567,577,570,98,99,,,341,,,,580,,,,,,,,,,,,,,,,710,,,692,,,575,690',
',,691,,,,,585,584,588,587,,,,581,,,,709,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,108,107,109,110,,,707,,86,100,101,,,696,697,,112,111,113,708',
',,572,711,569,568,567,577,570,98,99,,,341,,,,580,,,,,,,,,,,,,,,,710',
',,692,,,575,690,,,691,,,,,585,584,588,587,,,,581,,,,709,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,108,107,109,110,,,707,,86,100,101,,,696,697',
',112,111,113,708,,,572,711,569,568,567,577,570,98,99,,,341,,,,580,,',
',,,,,,,,,,,,,710,,,692,,,575,690,,,691,,962,,,585,584,588,587,,,,581',
',,,709,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,707,',
'86,100,101,,,696,697,,112,111,113,708,,,572,711,569,568,567,577,570',
'98,99,,,341,,,,580,,,,,,,,,,,,,,,,710,,,692,,,575,690,,,691,,,,,,,588',
'587,,,,581,,,,709,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107,109',
'110,,,707,,86,100,101,,,696,697,,112,111,113,708,,,572,711,569,568,567',
'577,570,98,99,,,341,,,,580,,,,,,,,,,,,,,,,710,,,692,,,575,690,,,691',
',,,,,,588,587,,,,581,,,,709,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108',
'107,109,110,,,707,,86,100,101,,,696,697,,112,111,113,708,,,,711,968',
',,,,98,99,,,341,580,,,,,,,,,,,,,,,,,,,710,,,692,,,,690,,,691,,962,,',
',,,,581,,,,,,,709,,,,96,969,87,88,,89,91,90,92,,,,,85,95,108,107,109',
'110,,,707,,86,100,101,,,696,697,,112,111,113,708,,,572,711,569,568,567',
'577,570,98,99,,,341,,,,580,,,,,,,,,,,,,,,,710,,,692,,,575,690,,,691',
',,,,,,588,587,,,,581,,,,709,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108',
'107,109,110,,,707,,86,100,101,,,696,697,,112,111,113,708,,,572,711,569',
'568,567,577,570,98,99,,,341,,,,580,,,,,,,,,,,,,,,,710,,,692,,,575,690',
',,691,,,,,,,588,587,,,,581,,,,709,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,108,107,109,110,,,707,,86,100,101,,,696,697,,112,111,113,708,,,572',
'711,569,568,567,577,570,98,99,,,341,,,,580,,,,,,,,,,,,,,,,710,,,692',
',,575,690,,,691,,,,,,,588,587,,,,581,,,,709,,,,96,84,87,88,,89,91,90',
'92,,,,,85,95,108,107,109,110,,,707,,86,100,101,,,696,697,,112,111,113',
'708,,,,711,968,,,,,98,99,,,341,580,,,,,,,,,,,,,,,,,,,710,,,692,,,,690',
',,691,,962,,,,,,,581,,,,,,,709,,,,96,969,87,88,,89,91,90,92,,,,,85,95',
'108,107,109,110,,,707,,86,100,101,,,696,697,,112,111,113,708,,,572,711',
'569,568,567,577,570,98,99,,,341,,,,580,,,,,,,,,,,,,,,,710,,,692,,,575',
'690,,,691,,962,,,585,584,588,587,,,,581,,,,709,,,,96,84,87,88,,89,91',
'90,92,,,,,85,95,108,107,109,110,,,707,,86,100,101,,,696,697,,112,111',
'113,708,,,,711,968,,,,,98,99,,,341,580,,,,,,,,,,,,,,,,,,,710,,,692,',
',,690,,,691,,962,,,,,,,581,,,,,,,709,,,,96,969,87,88,,89,91,90,92,,',
',,85,95,,,,,,,707,,86,100,101,,,696,697,179,190,180,203,176,196,186',
'185,206,207,201,184,183,178,204,208,209,188,177,191,195,197,189,182',
',,,198,205,200,277,276,278,275,175,194,193,,,,,,174,181,172,173,272',
'273,274,270,134,104,103,271,,106,,,,,,163,164,,160,142,143,144,151,148',
'150,,,145,146,,,,165,166,152,153,,,,,,282,,,,,,,,157,156,,141,162,159',
'158,167,154,155,149,147,139,161,140,,,168,108,107,109,110,,,,,,,,,,',
',,112,111,113,708,,,572,711,569,568,567,577,570,98,99,,,341,,,,580,',
',,,,,,,,,,,,,,710,,,692,,,575,690,,,691,,,,,585,584,588,587,,,,581,',
',,709,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,707,,86',
'100,101,,,696,697,,112,111,113,708,,,572,711,569,568,567,577,570,98',
'99,,,341,,,,580,,,,,,,,,,,,,,,,710,,,692,,,575,690,,,691,,1043,,,585',
'584,588,587,,,,581,,,,709,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,',
',,707,,86,100,101,,,696,697,179,190,180,203,176,196,186,185,206,207',
'201,184,183,178,204,208,209,188,177,191,195,197,189,182,,,,198,205,200',
'199,192,202,187,175,194,193,,,,,,174,181,172,173,169,170,171,132,134',
',,133,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166',
'152,153,,,,,,,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139',
'161,140,,,168,108,107,109,110,,,,,,,,,,,,,112,111,113,708,,,,711,,,',
',,98,99,,,341,,,,,,,,108,107,109,110,,,,,,,,,710,,,692,112,111,113,690',
',,691,,,,,,,98,99,,,341,,,,,709,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,,,,707,,86,100,101,,,696,697,572,,569,568,567,577,570,,,,,96,84,87',
'88,580,89,91,90,92,,,,,85,95,108,107,109,110,,,707,,86,100,101,575,',
',,,112,111,113,,585,584,588,587,,,,581,,98,99,,,341,108,107,109,110',
',,,,,,,,,,,,112,111,113,,,,,,,,,,,98,99,,,341,,,,,,,,,,,,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,,,,707,,86,100,101,,,,,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,681,460,,,682,,707,,86,100,101,,163,164,,160',
'142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,289,,,,,,',
',157,156,,141,162,159,158,167,154,155,149,147,139,161,140,449,453,168',
',450,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166',
'152,153,,,,,,289,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147',
'139,161,140,456,460,168,,455,,,,,,,,163,164,,160,142,143,144,151,148',
'150,,,145,146,,,,165,166,152,153,,,,,,289,,,,,,,,157,156,,141,162,159',
'158,167,154,155,149,147,139,161,140,503,453,168,,504,,,,,,,,163,164',
',160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,',
',,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,679,453',
'168,,680,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165',
'166,152,153,,,,,,289,,,,,,,,157,156,,141,162,159,158,167,154,155,149',
'147,139,161,140,739,453,168,,740,,,,,,,,163,164,,160,142,143,144,151',
'148,150,,,145,146,,,,165,166,152,153,,,,,,289,,,,,,,,157,156,,141,162',
'159,158,167,154,155,149,147,139,161,140,742,460,168,,743,,,,,,,,163',
'164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,289',
',,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,679',
'453,168,,680,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,',
',,165,166,152,153,,,,,,289,,,,,,,,157,156,,141,162,159,158,167,154,155',
'149,147,139,161,140,681,460,168,,682,,,,,,,,163,164,,160,142,143,144',
'151,148,150,,,145,146,,,,165,166,152,153,,,,,,289,,,,,,,,157,156,,141',
'162,159,158,167,154,155,149,147,139,161,140,803,453,168,,804,,,,,,,',
'163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,',
',,,289,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140',
'805,460,168,,806,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146',
',,,165,166,152,153,,,,,,289,,,,,,,,157,156,,141,162,159,158,167,154',
'155,149,147,139,161,140,808,460,168,,809,,,,,,,,163,164,,160,142,143',
'144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,289,,,,,,,,157,156',
',141,162,159,158,167,154,155,149,147,139,161,140,503,453,168,,504,,',
',,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153',
',,,,,289,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161',
'140,833,453,168,,834,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145',
'146,,,,165,166,152,153,,,,,,289,,,,,,,,157,156,,141,162,159,158,167',
'154,155,149,147,139,161,140,836,460,168,,835,,,,,,,,163,164,,160,142',
'143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,289,,,,,,,,157',
'156,,141,162,159,158,167,154,155,149,147,139,161,140,1161,460,168,,1160',
',,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152',
'153,,,,,,289,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139',
'161,140,1164,453,168,,1165,,,,,,,,163,164,,160,142,143,144,151,148,150',
',,145,146,,,,165,166,152,153,,,,,,289,,,,,,,,157,156,,141,162,159,158',
'167,154,155,149,147,139,161,140,1166,460,168,,1167,,,,,,,,163,164,,160',
'142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,289,,,,,,',
',157,156,,141,162,159,158,167,154,155,149,147,139,161,140,,572,168,569',
'568,567,577,570,572,,569,568,567,577,570,572,580,569,568,567,577,570',
',580,,,,,,,580,,,,,,,,575,,,,,,,575,,585,584,588,587,,575,,581,,588',
'587,,,,581,,588,587,,,,581' ]
        racc_action_table = arr = ::Array.new(27481, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'456,1003,1027,1025,19,1165,387,456,456,456,67,1130,718,456,456,1029',
'456,478,1077,1043,1080,691,962,620,456,456,375,614,787,407,27,805,1033',
'801,1033,614,456,456,691,456,456,456,456,456,376,19,978,1178,1164,478',
'1076,806,803,478,478,229,749,749,863,230,804,1029,863,938,956,928,456',
'456,456,456,456,456,456,456,456,456,456,456,456,456,1167,1166,456,456',
'456,611,456,384,383,978,456,465,465,456,27,407,805,67,456,718,456,1043',
'456,456,962,456,456,456,456,456,956,456,456,456,229,387,806,27,230,1003',
'1027,1025,739,1165,1003,1027,1025,456,1165,1130,456,456,620,456,1130',
'456,1077,787,1080,836,805,1077,456,1080,375,456,836,836,836,375,749',
'801,836,836,801,836,801,1167,1166,929,806,803,376,836,836,1178,1164',
'376,1076,804,1178,1164,938,1076,894,836,836,449,836,836,836,836,836',
'630,630,465,859,131,739,611,742,740,131,131,611,1056,384,383,1167,1166',
'342,334,406,1167,1166,836,836,836,836,836,836,836,836,836,836,836,836',
'836,836,500,500,836,836,836,449,836,859,932,739,836,471,739,836,380',
'434,340,449,836,380,836,894,836,836,739,836,836,836,836,836,970,836',
'836,836,341,341,742,742,740,522,1056,1056,1049,44,44,644,334,836,970',
'406,836,836,403,836,690,836,393,1056,630,681,393,894,836,630,894,836',
'681,681,681,334,471,681,681,681,434,681,894,742,740,734,742,740,272',
'681,681,681,681,681,860,272,690,734,742,740,500,681,681,17,681,681,681',
'681,681,522,522,522,1049,1049,1049,644,644,336,341,341,232,402,403,403',
'403,644,522,44,44,1049,860,681,681,681,681,681,681,681,681,681,681,681',
'681,681,681,679,40,681,681,681,17,681,681,272,664,681,642,271,681,681',
'947,681,17,681,271,681,335,681,681,401,681,681,681,681,681,835,681,681',
'681,232,834,856,835,835,835,402,402,402,835,835,710,835,681,40,710,681',
'681,681,681,835,681,664,681,833,679,40,365,681,39,365,681,835,835,664',
'835,835,835,835,835,947,642,642,271,357,270,357,357,357,357,357,642',
'270,680,401,401,401,1141,1141,357,834,856,835,835,835,835,835,835,835',
'835,835,835,835,835,835,835,39,345,835,835,835,357,835,833,374,374,835',
'408,39,835,357,357,357,357,835,405,835,357,835,835,404,835,835,835,835',
'835,102,835,333,835,270,450,680,102,102,102,939,582,102,102,102,269',
'102,835,345,941,835,835,269,835,102,835,102,102,102,582,345,357,835',
'590,1171,835,102,102,590,102,102,102,102,102,1171,408,408,408,1090,623',
'25,1090,450,405,405,405,623,25,404,404,404,1028,1028,332,450,623,102',
'102,102,102,102,102,102,102,102,102,102,102,102,102,269,945,102,102',
'102,369,102,102,369,366,102,946,366,102,102,329,102,278,102,323,102',
'957,102,102,278,102,102,102,102,102,455,102,958,102,623,25,82,455,455',
'455,689,759,759,455,455,689,455,102,82,689,102,102,102,102,455,102,277',
'102,82,3,322,228,102,277,3,102,455,455,228,455,455,455,455,455,47,47',
'961,228,314,1072,276,275,278,314,942,274,1072,276,275,942,786,321,274',
'786,963,1072,455,455,455,455,455,455,455,455,455,455,455,455,455,455',
'47,47,455,455,455,319,455,789,789,971,455,277,273,455,693,693,228,972',
'455,273,455,974,455,455,975,455,455,455,455,455,105,455,318,455,1072',
'276,275,105,105,105,274,984,105,105,105,539,105,455,494,985,455,455',
'539,455,105,455,105,105,105,14,14,539,455,986,988,455,105,105,989,105',
'105,105,105,105,990,52,992,273,993,1078,494,994,52,306,494,494,1078',
'494,494,303,302,52,1018,1019,288,1078,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,539,1123,105,105,105,16,105,105,1123,238,105',
'234,16,105,105,233,105,1123,105,1037,105,16,105,105,1041,105,105,105',
'105,105,52,105,682,105,1078,1042,1045,231,1048,682,682,682,1070,210',
'682,682,682,105,682,1073,105,105,105,105,116,105,682,105,682,682,682',
'51,105,50,1079,105,1123,49,682,682,16,682,682,682,682,682,1082,743,1083',
'433,1084,395,1085,1088,743,1089,433,41,395,743,1104,38,23,743,1107,433',
'1113,395,682,682,682,682,682,682,682,682,682,682,682,682,682,682,1116',
'1117,682,682,682,1118,682,682,385,1119,682,1121,1,682,682,385,682,1126',
'682,1188,682,15,682,682,385,682,682,682,682,682,743,682,433,682,395',
'1136,13,1087,1147,1087,1087,1087,809,1087,1148,12,1160,682,1161,809',
'682,682,682,682,809,682,346,682,809,1163,10,7,682,346,1168,682,320,320',
'320,320,320,320,346,385,1087,320,320,562,563,564,320,392,320,320,320',
'320,320,320,320,6,6,6,6,6,320,320,320,320,320,320,320,574,769,320,769',
'769,769,809,769,320,320,320,320,320,320,320,320,320,320,320,320,346',
'320,320,320,330,320,320,320,320,320,328,330,392,560,327,586,589,328',
'769,392,330,327,559,592,392,593,328,769,392,320,327,594,320,595,558',
'320,320,326,557,320,556,320,608,555,326,320,554,392,612,479,613,635',
'635,326,320,635,635,635,615,320,320,320,320,544,320,320,320,320,1047',
'330,1172,540,320,320,535,328,1174,392,1047,327,320,479,320,320,320,479',
'479,320,320,1075,1075,1075,1075,1075,1075,1175,533,530,1075,1075,529',
'639,326,1075,391,1075,1075,1075,1075,1075,1075,1075,513,647,866,649',
'1047,1075,1075,1075,1075,1075,1075,1075,866,509,1075,508,1047,656,1176',
'1177,1075,1075,1075,1075,1075,1075,1075,1075,1075,1075,1075,1075,756',
'1075,1075,1075,665,1075,1075,1075,1075,1075,756,1022,391,1022,1022,1022',
'670,1022,866,391,675,683,684,686,391,483,709,1059,391,1075,866,712,1075',
'482,715,1075,1075,1059,717,1075,481,1075,722,756,756,1075,723,391,756',
'919,724,919,919,919,1075,919,726,728,480,1075,1075,1075,1075,736,1075',
'1075,1075,1075,738,741,1059,1059,1075,1075,467,1059,744,391,745,457',
'1075,748,1075,1075,1075,751,919,1075,1075,361,361,361,361,361,361,919',
'448,447,361,361,771,772,774,361,808,361,361,361,361,361,361,361,317',
'317,317,317,317,361,361,361,361,361,361,361,445,575,361,575,575,575',
'435,575,361,361,361,361,361,361,361,361,361,361,361,361,788,361,361',
'361,791,361,361,361,361,361,797,1140,808,1140,1140,1140,493,1140,575',
'808,798,802,431,428,808,426,425,575,808,361,423,417,361,397,811,361',
'361,388,815,361,773,361,773,773,773,361,773,808,493,386,830,382,493',
'493,361,493,493,832,381,361,361,361,361,841,361,361,361,361,370,368',
'367,857,361,361,363,868,359,808,355,351,361,881,361,361,361,884,349',
'361,361,0,0,0,0,0,0,893,897,900,0,0,901,904,906,0,909,0,0,0,0,0,0,0',
'21,910,912,913,915,0,0,0,0,0,0,0,918,927,0,362,362,362,362,362,0,0,0',
'0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,21,21,21,21,21,21,21,21,21,21,21',
',21,21,,,21,21,,0,,,0,,,0,0,,,0,,0,21,,21,0,21,21,,21,21,21,21,21,0',
'21,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,21,,,,,0,,0,0,0,,,0,0,812,812,812,812',
'812,812,,,,812,812,,,,812,,812,812,812,812,812,812,812,527,527,527,527',
'527,812,812,812,812,812,812,812,,,812,,,,,438,812,812,812,812,812,812',
'812,812,812,812,812,812,,812,812,812,,812,812,812,812,812,438,438,438',
'438,438,438,438,438,438,438,438,,438,438,,,438,438,,812,,,812,,,812',
'812,,,812,,812,438,,438,812,438,438,,438,438,438,438,438,812,438,,,',
'812,812,812,812,,812,812,812,812,,,,,812,812,,438,,438,,,812,,812,812',
'812,,,812,812,821,821,821,821,821,821,,,,821,821,,,,821,,821,821,821',
'821,821,821,821,,,,,,821,821,821,821,821,821,821,,,821,,,,,444,821,821',
'821,821,821,821,821,821,821,821,821,821,,821,821,821,,821,821,821,821',
'821,444,444,444,444,444,444,444,444,444,444,444,,444,444,,,444,444,',
'821,,,821,,,821,821,,,821,,821,444,,444,821,444,444,,444,444,444,444',
'444,821,444,,,,821,821,821,821,,821,821,821,821,,,,,821,821,,444,,,',
',821,,821,821,821,,,821,821,129,129,129,129,129,129,,,,129,129,,,,129',
',129,129,129,129,129,129,129,,,,,,129,129,129,129,129,129,129,,,129',
',,,,,129,129,129,129,129,129,129,129,129,129,129,129,,129,129,129,,129',
'129,129,129,129,551,551,551,551,551,551,551,551,551,551,551,,551,551',
',,551,551,,129,,,129,,,129,129,,,129,,129,551,,551,129,551,551,,551',
'551,551,551,551,129,551,,,,129,129,129,129,,129,129,129,129,,,,,129',
'129,,551,,,,,129,,129,129,129,,,129,129,982,982,982,982,982,982,,,,982',
'982,,,,982,,982,982,982,982,982,982,982,,,,,,982,982,982,982,982,982',
'982,,,982,,,,,,982,982,982,982,982,982,982,982,982,982,982,982,,982',
'982,982,,982,982,982,982,982,750,750,750,750,750,750,750,750,750,750',
'750,,750,750,,,750,750,,982,,,982,,,982,982,,,982,,982,750,,750,982',
'750,750,,750,750,750,750,750,982,750,,,,982,982,982,982,,982,982,982',
'982,,,,,982,982,,750,,,,,982,,982,982,982,,,982,982,1000,1000,1000,1000',
'1000,1000,,,,1000,1000,,,,1000,,1000,1000,1000,1000,1000,1000,1000,',
',,,,1000,1000,1000,1000,1000,1000,1000,,,1000,,,,,,1000,1000,1000,1000',
'1000,1000,1000,1000,1000,1000,1000,1000,,1000,1000,1000,,1000,1000,1000',
'1000,1000,781,781,781,781,781,781,781,781,781,781,781,,781,781,,,781',
'781,,1000,,,1000,,,1000,1000,,,1000,,1000,781,,781,1000,781,781,,781',
'781,781,781,781,1000,781,,,,1000,1000,1000,1000,,1000,1000,1000,1000',
',,,,1000,1000,,781,,,,,1000,,1000,1000,1000,,,1000,1000,212,212,212',
'212,212,212,,,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212',
'212,212,212,212,212,212,,,212,,,,,,212,212,212,212,212,212,212,212,212',
'212,212,212,,212,212,212,,212,212,212,212,212,838,838,838,838,838,838',
'838,838,838,838,838,,838,838,,,838,838,,212,,,212,,,212,212,,,212,,212',
'838,,838,212,838,838,,838,838,838,838,838,212,838,,,,212,212,212,212',
',212,212,212,212,,,,,212,212,,838,,,,,212,,212,212,212,,,212,212,1094',
'1094,1094,1094,1094,1094,,,,1094,1094,,,,1094,,1094,1094,1094,1094,1094',
'1094,1094,,,,,,1094,1094,1094,1094,1094,1094,1094,,,1094,,,,,,1094,1094',
'1094,1094,1094,1094,1094,1094,1094,1094,1094,1094,,1094,1094,1094,,1094',
'1094,1094,1094,1094,497,497,497,497,497,497,497,497,497,497,497,,497',
'497,,,497,497,,1094,,,1094,,,1094,1094,,,1094,,1094,497,,497,1094,497',
'497,,497,497,497,497,497,1094,497,,,,1094,1094,1094,1094,,1094,1094',
'1094,1094,,,,,1094,1094,497,497,,,,,1094,,1094,1094,1094,,,1094,1094',
'360,360,360,360,360,360,,,,360,360,,,,360,,360,360,360,360,360,360,360',
',,,,,360,360,360,360,360,360,360,,,360,,,,,,360,360,360,360,360,360',
'360,360,360,360,360,360,,360,360,360,,360,360,360,360,360,981,981,981',
'981,981,981,981,981,981,981,981,,981,981,,,981,981,,360,,,360,,,360',
'360,,,360,,360,981,,981,360,981,981,,981,981,981,981,981,360,981,,,',
'360,360,360,360,,360,360,360,360,,,,,360,360,,981,,,,,360,,360,360,360',
',,360,360,1142,1142,1142,1142,1142,1142,,,,1142,1142,,,,1142,,1142,1142',
'1142,1142,1142,1142,1142,,,,,,1142,1142,1142,1142,1142,1142,1142,,,1142',
',,,,,1142,1142,1142,1142,1142,1142,1142,1142,1142,1142,1142,1142,,1142',
'1142,1142,,1142,1142,1142,1142,1142,300,300,300,300,300,300,300,300',
'300,300,300,,300,300,,,300,300,,1142,,,1142,,,1142,1142,,,1142,,1142',
'300,,300,1142,300,300,,300,300,300,300,300,1142,300,,,,1142,1142,1142',
'1142,,1142,1142,1142,1142,,,,,1142,1142,,300,,,,,1142,,1142,1142,1142',
',,1142,1142,1020,1020,1020,1020,1020,1020,,,,1020,1020,,,,1020,,1020',
'1020,1020,1020,1020,1020,1020,,,,,,1020,1020,1020,1020,1020,1020,1020',
',920,1020,920,920,920,,920,1020,1020,1020,1020,1020,1020,1020,1020,1020',
'1020,1020,1020,,1020,1020,1020,,1020,1020,1020,1020,1020,498,1086,,1086',
'1086,1086,,1086,920,,,,,,,,498,498,,1020,,,1020,,,1020,1020,,,1020,',
'1020,498,,498,1020,498,498,1086,498,498,,,498,1020,498,,,,1020,1020',
'1020,1020,,1020,1020,1020,1020,,,,,1020,1020,,,,,,,1020,,1020,1020,1020',
',,1020,1020,631,631,631,631,631,631,,,,631,631,,,,631,,631,631,631,631',
'631,631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,,631,631,631',
'631,631,631,631,631,631,631,631,631,,631,631,631,,631,631,631,631,631',
'496,496,496,496,496,496,496,496,,496,496,,,,,,496,496,,631,,,631,,,631',
'631,,,631,,631,496,,496,631,496,496,,496,496,496,496,496,631,496,,,',
'631,631,631,631,,631,631,631,631,,,,,631,631,,,,,,,631,,631,631,631',
',,631,631,356,356,356,356,356,356,,,,356,356,,,,356,,356,356,356,356',
'356,356,356,,,,,,356,356,356,356,356,356,356,,,356,,,,,,356,356,356',
'356,356,356,356,356,356,356,356,356,,356,356,356,,356,356,356,356,356',
'348,348,348,348,348,348,348,348,348,348,348,,348,348,,,348,348,,356',
',,356,,,356,356,,,356,,356,348,,348,356,348,348,,348,348,348,348,348',
'356,348,,,,356,356,356,356,,356,356,356,356,,,,,356,356,,,,,,,356,,356',
'356,356,,,356,356,888,888,888,888,888,888,,,,888,888,,,,888,,888,888',
'888,888,888,888,888,,,,,,888,888,888,888,888,888,888,,,888,,,,,,888',
'888,888,888,888,888,888,888,888,888,888,888,,888,888,888,,888,888,888',
'888,888,347,347,347,347,347,347,347,347,347,347,347,,347,347,,,347,347',
',888,,,888,,,888,888,,,888,,888,347,,347,888,347,347,,347,347,347,347',
'347,888,347,,,,888,888,888,888,,888,888,888,888,,,,,888,888,,,,,,,888',
',888,888,888,,,888,888,807,807,807,807,807,807,,,,807,807,,,,807,,807',
'807,807,807,807,807,807,,,,,,807,807,807,807,807,807,807,,,807,,,,,',
'807,807,807,807,807,807,807,807,807,807,807,807,,807,807,807,,807,807',
'807,807,807,495,495,495,495,495,495,495,,,495,495,,,,,,495,495,,807',
',,807,,,807,807,,,807,,807,495,,495,807,495,495,,495,495,495,495,495',
'807,495,,,,807,807,807,807,,807,807,807,807,,,,,807,807,,,,,,,807,,807',
'807,807,,,807,807,1021,1021,1021,1021,1021,1021,,,,1021,1021,,,,1021',
',1021,1021,1021,1021,1021,1021,1021,,,,,,1021,1021,1021,1021,1021,1021',
'1021,,,1021,,,,,,1021,1021,1021,1021,1021,1021,1021,1021,1021,1021,1021',
'1021,,1021,1021,1021,,1021,1021,1021,1021,1021,550,,,,,,,,,,,,,,,,550',
'550,,1021,,,1021,,,1021,1021,,,1021,,1021,550,,550,1021,550,550,,550',
'550,,,550,1021,550,,,,1021,1021,1021,1021,,1021,1021,1021,1021,,,,,1021',
'1021,,,,,,,1021,,1021,1021,1021,,,1021,1021,610,610,610,610,610,610',
',,,610,610,,,,610,,610,610,610,610,610,610,610,,,,,,610,610,610,610',
'610,610,610,,,610,,,,,,610,610,610,610,610,610,610,610,610,610,610,610',
',610,610,610,,610,610,610,610,610,492,492,492,492,492,492,492,,,492',
'492,,,,,,492,492,,610,,,610,,,610,610,,,610,,610,492,,492,610,492,492',
',492,492,492,492,492,610,492,,,,610,610,610,610,,610,610,610,610,,,',
',610,610,,,,,,,610,,610,610,610,,,610,610,607,607,607,607,607,607,,',
',607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607,607,607,607',
'607,607,,,607,,,,,,607,607,607,607,607,607,607,607,607,607,607,607,',
'607,607,607,,607,607,607,607,607,491,491,491,491,491,491,491,,,491,491',
',,,,,491,491,,607,,,607,,,607,607,,,607,,607,491,,491,607,491,491,,491',
'491,491,491,491,607,491,,,,607,607,607,607,,607,607,607,607,,,,,607',
'607,,,,,,,607,,607,607,607,,,607,607,237,237,237,237,237,237,,,,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,237,237,237,237,237,237,237,237,237,237,237,237,,237',
'237,237,,237,237,237,237,237,490,490,490,490,490,490,490,,,490,490,',
',,,,490,490,,237,,,237,,,237,237,,,237,,237,490,,490,237,490,490,,490',
'490,490,490,490,237,490,,,,237,237,237,237,,237,237,237,237,,,,,237',
'237,,,,,,,237,,237,237,237,,,237,237,34,34,34,34,34,34,,,,34,34,,,,34',
',34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,34,34,34,34',
'34,34,34,34,34,34,34,34,,34,34,34,,34,34,34,34,34,489,489,489,489,489',
'489,489,,,489,489,,,,,,489,489,,34,,,34,,,34,34,,,34,,34,489,,489,34',
'489,489,,489,489,489,489,489,34,489,,,,34,34,34,34,,34,34,34,34,,,,',
'34,34,,,,,,,34,,34,34,34,,,34,34,899,899,899,899,899,899,,,,899,899',
',,,899,,899,899,899,899,899,899,899,,,,,,899,899,899,899,899,899,899',
',,899,,,,,,899,899,899,899,899,899,899,899,899,899,899,899,,899,899',
'899,,899,899,899,899,899,488,488,488,488,488,488,488,,,488,488,,,,,',
'488,488,,899,,,899,,,899,899,,,899,,899,488,,488,899,488,488,,488,488',
'488,488,488,899,488,,,,899,899,899,899,,899,899,899,899,,,,,899,899',
',,,,,,899,,899,899,899,,,899,899,379,379,379,379,379,379,,,,379,379',
',,,379,,379,379,379,379,379,379,379,,,,,,379,379,379,379,379,379,379',
',,379,,,,,,379,379,379,379,379,379,379,379,379,379,379,379,,379,379',
'379,,379,379,379,379,379,487,487,487,487,487,487,487,,,487,487,,,,,',
'487,487,,379,,,379,,,379,379,,,379,,379,487,,487,379,487,487,,487,487',
'487,487,487,379,487,,,,379,379,379,379,,379,379,379,379,,,,,379,379',
',,,,,,379,,379,379,379,,,379,379,378,378,378,378,378,378,,,,378,378',
',,,378,,378,378,378,378,378,378,378,,,,,,378,378,378,378,378,378,378',
',,378,,,,,,378,378,378,378,378,378,378,378,378,378,378,378,,378,378',
'378,,378,378,378,378,378,477,477,477,477,477,477,477,477,477,477,477',
',477,477,,,477,477,,378,,,378,,,378,378,,,378,,378,477,,477,378,477',
'477,,477,477,477,477,477,378,477,,,,378,378,378,378,,378,378,378,378',
',,,,378,378,,,,,,,378,,378,378,378,,,378,378,937,937,937,937,937,937',
',,,937,937,,,,937,,937,937,937,937,937,937,937,,,,,,937,937,937,937',
'937,937,937,,,937,,,,,,937,937,937,937,937,937,937,937,937,937,937,937',
',937,937,937,,937,937,937,937,937,476,476,476,476,476,476,476,476,476',
'476,476,,476,476,,,476,476,,937,,,937,,,937,937,,,937,,937,476,,476',
'937,476,476,,476,476,476,476,476,937,476,,,,937,937,937,937,,937,937',
'937,937,,,,,937,937,,,,,,,937,,937,937,937,,,937,937,943,943,943,943',
'943,943,,,,943,943,,,,943,,943,943,943,943,943,943,943,,,,,,943,943',
'943,943,943,943,943,,,943,,,,,,943,943,943,943,943,943,943,943,943,943',
'943,943,,943,943,943,,943,943,943,943,943,484,,,,,,,,,,,,,,,,484,484',
',943,,,943,,,943,943,,,943,,943,484,,484,943,484,484,,484,484,,,,943',
',,,,943,943,943,943,,943,943,943,943,,,,,943,943,,,,,,,943,,943,943',
'943,,,943,943,325,325,325,325,325,325,,,,325,325,,,,325,,325,325,325',
'325,325,325,325,,,,,,325,325,325,325,325,325,325,,,325,,,,,,325,325',
'325,325,325,325,325,325,325,325,325,325,,325,325,325,,325,325,325,325',
'325,485,,,,,,,,,,,,,,,,485,485,,325,,,325,,,325,325,,,325,,325,485,',
'485,325,485,485,,485,485,,,,325,,,,,325,325,325,325,,325,325,325,325',
',,,,325,325,,,,213,213,213,325,213,325,325,325,213,213,325,325,,213',
',213,213,213,213,213,213,213,,,,,,213,213,213,213,213,213,213,,,213',
',,,,,,213,,,213,213,213,213,213,213,213,213,,213,213,213,,213,213,213',
'213,213,486,,,,,,,,,,,,,,,,486,486,,213,,,213,,,213,213,,,213,,213,486',
',,213,486,486,,486,486,,,,213,,,,,213,213,213,213,,213,213,213,213,',
',,,213,213,,,,214,214,214,213,214,213,213,213,214,214,213,213,,214,',
'214,214,214,214,214,214,214,,,,,,214,214,214,214,214,214,214,,,214,',
',,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214,,214,214,214',
'214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,214,,,,214,,,',
',,,,,214,,,,,214,214,214,214,,214,214,214,214,,,,,214,214,,,,215,215',
'215,214,215,214,214,214,215,215,214,214,,215,,215,215,215,215,215,215',
'215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215',
'215,215,215,215,,215,215,215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,',
',215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,,215,,,,,215,215,215,215',
',215,215,215,215,,,,,215,215,,,,216,216,216,215,216,215,215,215,216',
'216,215,215,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216',
'216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216',
',216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,',
',,,216,,,,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216,216',
',,,217,217,217,216,217,216,216,216,217,217,216,216,,217,,217,217,217',
'217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217',
'217,217,217,217,217,217,217,,217,217,217,,217,217,217,217,217,,,,,,',
',,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,,217,,,,,217',
'217,217,217,,217,217,217,217,,,,,217,217,,,,218,218,218,217,218,217',
'217,217,218,218,217,217,,218,,218,218,218,218,218,218,218,,,,,,218,218',
'218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218',
'218,218,218,218,,218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,',
'218,218,,,218,,218,,218,,218,,,218,,,,,,218,,,,,218,218,218,218,,218',
'218,218,218,,,,,218,218,,,,223,223,223,218,223,218,218,218,223,223,218',
'218,,223,,223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223',
',,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,,223',
'223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223',
',,,,,,,,223,,,,,223,223,223,223,,223,223,223,223,,,,,223,223,,,,224',
'224,224,223,224,223,223,223,224,224,223,223,,224,,224,224,224,224,224',
'224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224',
'224,224,224,224,224,,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,',
',,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,,224,,,,,224,224,224',
'224,,224,224,224,224,,,,,224,224,,,,225,225,225,224,225,224,224,224',
'225,225,224,224,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225',
'225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225',
'225,,225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225',
',,,,,225,,,,,,,,,225,,,,,225,225,225,225,,225,225,225,225,,,,,225,225',
'225,,,536,536,536,225,536,225,225,225,536,536,225,225,,536,,536,536',
'536,536,536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536',
',,536,536,536,536,536,536,536,536,536,536,536,536,,536,536,536,536,536',
',,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,536,,536,,536,,,536,,',
',,,536,,,,,536,536,536,536,,536,536,536,536,,,,,536,536,,,,854,854,854',
'536,854,536,536,536,854,854,536,536,,854,,854,854,854,854,854,854,854',
',,,,,854,854,854,854,854,854,854,,,854,,,,,,,854,,,854,854,854,854,854',
'854,854,854,,854,854,854,,854,854,854,854,854,,,,,,,,,,,,,,,,,,,,854',
',,854,,,854,854,,,854,,,,,,854,,,,,,,,,854,,,,,854,854,854,854,,854',
'854,854,854,,,,,854,854,,,,553,553,553,854,553,854,854,854,553,553,854',
'854,,553,,553,553,553,553,553,553,553,,,,,,553,553,553,553,553,553,553',
',,553,,,,,,,553,,,553,553,553,553,553,553,553,553,,553,553,553,,553',
'553,553,553,553,,,,,,,,,,,,,,,,,,,,553,,,553,,,553,553,,,553,,,,,,553',
',,,,,,,,553,,,,,553,553,553,553,,553,553,553,553,,,,,553,553,,,,600',
'600,600,553,600,553,553,553,600,600,553,553,,600,,600,600,600,600,600',
'600,600,,,,,,600,600,600,600,600,600,600,,,600,,,,,,,600,,,600,600,600',
'600,600,600,600,600,600,600,600,600,,600,600,600,600,600,,,,,,,,,,,',
',,,,,,,,600,,,600,,,600,600,,,600,,,,,,600,,,600,,,,,,600,,,,,600,600',
'600,600,,600,600,600,600,,,,,600,600,,,,597,597,597,600,597,600,600',
'600,597,597,600,600,,597,,597,597,597,597,597,597,597,,,,,,597,597,597',
'597,597,597,597,,,597,,,,,,,597,,,597,597,597,597,597,597,597,597,597',
'597,597,597,,597,597,597,597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597',
'597,,,597,,597,,,,597,,,597,,,,,,597,,,,,597,597,597,597,,597,597,597',
'597,,,,,597,597,,,,591,591,591,597,591,597,597,597,591,591,597,597,',
'591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591,591,591,,',
'591,,,,,,,591,,,591,591,591,591,591,591,591,591,,591,591,591,,591,591',
'591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,591,,,591,,,,,,591,,',
',,,,,,591,,,,,591,591,591,591,,591,591,591,591,,,,,591,591,,,,578,578',
'578,591,578,591,591,591,578,578,591,591,,578,,578,578,578,578,578,578',
'578,,,,,,578,578,578,578,578,578,578,,,578,,,,,,,578,,,578,578,578,578',
'578,578,578,578,,578,578,578,,578,578,578,578,578,,,,,,,,,,,,,,,,,,',
',578,,,578,,,578,578,,,578,,,,,,578,,,,,,,,,578,,,,,578,578,578,578',
',578,578,578,578,,,,,578,578,,,,616,616,616,578,616,578,578,578,616',
'616,578,578,,616,,616,616,616,616,616,616,616,,,,,,616,616,616,616,616',
'616,616,,,616,,,,,,,616,,,616,616,616,616,616,616,616,616,,616,616,616',
',616,616,616,616,616,,,,,,,,,,,,,,,,,,,,616,,,616,,,616,616,,,616,,616',
',,,616,,,,,,,,,616,,,,,616,616,616,616,,616,616,616,616,,,,,616,616',
',,,1127,1127,1127,616,1127,616,616,616,1127,1127,616,616,,1127,,1127',
'1127,1127,1127,1127,1127,1127,,,,,,1127,1127,1127,1127,1127,1127,1127',
',,1127,,,,,,,1127,,,1127,1127,1127,1127,1127,1127,1127,1127,1127,1127',
'1127,1127,,1127,1127,1127,1127,1127,,,,,,,,,,,,,,,,,,,,1127,,,1127,',
',1127,1127,,,1127,,1127,,1127,,1127,,,1127,,,,,,1127,,,,,1127,1127,1127',
'1127,,1127,1127,1127,1127,,,,,1127,1127,,,,549,549,549,1127,549,1127',
'1127,1127,549,549,1127,1127,,549,,549,549,549,549,549,549,549,,,,,,549',
'549,549,549,549,549,549,,,549,,,,,,,549,,,549,549,549,549,549,549,549',
'549,,549,549,549,,549,549,549,549,549,,,,,,,,,,,,,,,,,,,,549,,,549,',
',549,549,,,549,,,,,,549,,,,,,,,,549,,,,,549,549,549,549,,549,549,549',
'549,,,,,549,549,,,,20,20,20,549,20,549,549,549,20,20,549,549,,20,,20',
'20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20',
'20,20,20,20,20,,20,20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20',
',,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20',
'20,,,,,,,20,,20,20,20,28,,20,20,,,,28,28,28,,,28,28,28,,28,,,,,,,,28',
'28,28,28,,,,,,,,,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28',
',28,,28,,28,28,,28,28,28,28,28,29,28,28,28,,,,29,29,29,,,29,29,29,,29',
'28,,,28,28,,28,29,28,29,29,,,,,28,,,,29,29,,29,29,29,29,29,,,,,,,,,',
',,,,,,,,,,,,,29,29,29,29,29,29,29,29,29,29,29,29,29,29,,,29,29,29,,',
'29,,29,29,,,29,29,,29,,29,,29,,29,29,,29,29,29,29,29,,29,,29,,,,,,,',
',,,,,,29,,,29,29,,29,,29,30,30,30,,30,,29,,30,30,,,,30,,30,30,30,30',
'30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30',
'30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30',
',,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30',
',,,31,31,31,30,31,30,30,30,31,31,30,30,,31,,31,31,31,31,31,31,31,,,',
',,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31',
'31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31',
',31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,32,32,32',
'31,32,31,31,31,32,32,31,31,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32',
'32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32',
'32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,32,,',
',,,32,,,,,32,32,32,32,,32,32,32,32,,,,,32,32,,,,1097,1097,1097,32,1097',
'32,32,32,1097,1097,32,32,,1097,,1097,1097,1097,1097,1097,1097,1097,',
',,,,1097,1097,1097,1097,1097,1097,1097,,,1097,,,,,,,1097,,,1097,1097',
'1097,1097,1097,1097,1097,1097,,1097,1097,1097,,1097,1097,1097,1097,1097',
',,,,,,,,,,,,,,,,,,,1097,,,1097,,,1097,1097,,,1097,,,,,,1097,,,,,,,,',
'1097,,,,,1097,1097,1097,1097,,1097,1097,1097,1097,,,,,1097,1097,,,,1096',
'1096,1096,1097,1096,1097,1097,1097,1096,1096,1097,1097,,1096,,1096,1096',
'1096,1096,1096,1096,1096,,,,,,1096,1096,1096,1096,1096,1096,1096,,,1096',
',,,,,,1096,,,1096,1096,1096,1096,1096,1096,1096,1096,,1096,1096,1096',
',1096,1096,1096,1096,1096,,,,,,,,,,,,,,,,,,,,1096,,,1096,,,1096,1096',
',,1096,,,,,,1096,,,,,,,,,1096,,,,,1096,1096,1096,1096,,1096,1096,1096',
'1096,,,,,1096,1096,,,,42,42,42,1096,42,1096,1096,1096,42,42,1096,1096',
',42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,',
'42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,',
',42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42,42',
',,,,42,42,,,,43,43,43,42,43,42,42,42,43,43,42,42,,43,,43,43,43,43,43',
'43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43,43,43',
'43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43',
',,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,546,546',
'546,43,546,43,43,43,546,546,43,43,,546,,546,546,546,546,546,546,546',
',,,,,546,546,546,546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546',
'546,546,546,,546,546,546,,546,546,546,546,546,,,,,,,,,,,,,,,,,,,,546',
',,546,,,546,546,,,546,,,,,,546,,,,,,,,,546,,,,,546,546,546,546,,546',
'546,546,546,,,,,546,546,,,,45,45,45,546,45,546,546,546,45,45,546,546',
',45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,',
'45,45,45,45,45,45,45,45,,45,45,45,,45,45,45,45,45,,,,,,,,,,,,,,,,,,',
',45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45,45,45,45,,45,45,45,45',
',,,,45,45,,,,46,46,46,45,46,45,45,45,46,46,45,45,,46,,46,46,46,46,46',
'46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46',
'46,,46,46,46,,46,46,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46',
',,,,,46,,,,,,,,,46,,,,,46,46,46,46,,46,46,46,46,,,,,46,46,,,,48,48,48',
'46,48,46,46,46,48,48,46,46,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48',
'48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,48',
'48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,,48,,,',
',48,48,48,48,,48,48,48,48,,,,,48,48,,,,617,617,617,48,617,48,48,48,617',
'617,48,48,,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617,617',
'617,617,,,617,,,,,,,617,,,617,617,617,617,617,617,617,617,617,617,617',
'617,,617,617,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617',
',617,,617,,617,,,617,,,,,,617,,,,,617,617,617,617,,617,617,617,617,',
',,,617,617,,,,,,,617,,617,617,617,62,,617,617,,,,62,62,62,,,62,62,62',
',62,,,,,,,,62,,62,62,62,,,,870,870,870,870,62,62,,62,62,62,62,62,,,',
',870,870,870,,,,,,,,,,,870,870,,,870,62,62,62,62,62,62,62,62,62,62,62',
'62,62,62,,,62,62,62,,,62,,,62,,,62,62,,62,,62,,62,,62,62,,62,62,62,62',
'62,,62,,62,,870,870,870,870,,870,870,870,870,,,,62,870,870,62,62,62',
'62,,62,870,62,870,870,870,,62,64,64,64,64,64,,,,64,64,,,,64,,64,64,64',
'64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,64,64,,64,64,64,64,64',
'64,64,64,64,,64,64,64,,64,64,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64',
'64,,,64,,64,,,,64,,,,,,,,,64,,,,,64,64,64,64,,64,64,64,64,,,,,64,64',
',,,65,65,65,64,65,64,64,64,65,65,64,64,,65,,65,65,65,65,65,65,65,,,',
',,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65,65,65,65,65,65,65,65',
'65,65,,65,65,65,65,65,,,,,,,,,,,,,,,,,,,,65,,,65,,,65,65,,,65,,65,,',
',65,,,65,,,,,,65,,,,,65,65,65,65,,65,65,65,65,,,,,65,65,,,,66,66,66',
'65,66,65,65,65,66,66,65,65,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66',
'66,66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66,66,66,66,66,66,,66,66',
'66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,66,,,,,,66',
',,,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,69,69,69,66,69,66,66,66,69',
'69,66,66,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69,69,,,69,,',
',,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,69,69,69,,,,,,,,,',
',,,,,,,,,,69,,,69,,,69,69,,,69,,,,,,69,,,,,,,,,69,,,,,69,69,69,69,,69',
'69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,69,69,,70,,70,70',
'70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70',
'70,70,70,70,,70,70,70,,70,70,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70',
'70,,,70,,,,,,70,,,,,,,,,70,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,,',
',73,73,73,70,73,70,70,70,73,73,70,70,,73,,73,73,73,73,73,73,73,,,,,',
'73,73,73,73,73,73,73,,,73,,,,,,,73,,,73,73,73,73,73,73,73,73,,73,73',
'73,,73,73,73,73,73,,,,,,,,,,,,,,,,,,,,73,,,73,,,73,73,,,73,,,,,,73,',
',,,,,,,73,,,,,73,73,73,73,,73,73,73,73,,,,,73,73,73,,,,,73,73,,73,73',
'73,,,73,73,118,118,118,118,118,,,,118,118,,,,118,,118,118,118,118,118',
'118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,118,118,118,118',
'118,118,118,118,118,118,118,118,,118,118,118,,118,118,118,118,118,,',
',,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,118,,,,118,,,,,,,,,118,',
',,,118,118,118,118,,118,118,118,118,,,,,118,118,,,,,,118,118,,118,118',
'118,,,118,118,123,123,123,,123,,,,123,123,,,,123,,123,123,123,123,123',
'123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,,123,,,123,123,123',
'123,123,123,123,123,,123,123,123,,123,123,123,123,123,,,,,,,,,,,,,,',
',,,,,123,,,123,,,123,123,,,123,,,,,,123,,,,,,,,,123,,,,,123,123,123',
'123,,123,123,123,123,,,,,123,123,,,,124,124,124,123,124,123,123,123',
'124,124,123,123,,124,,124,124,124,124,124,124,124,,,,,,124,124,124,124',
'124,124,124,,,124,,,,,,,124,,,124,124,124,124,124,124,124,124,,124,124',
'124,,124,124,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124',
',,,,,124,,,,,,,,,124,,,,,124,124,124,124,,124,124,124,124,,,,,124,124',
',,,125,125,125,124,125,124,124,124,125,125,124,124,,125,,125,125,125',
'125,125,125,125,,,,,,125,125,125,125,125,125,125,,,125,,,,,,,125,,,125',
'125,125,125,125,125,125,125,,125,125,125,,125,125,125,125,125,,,,,,',
',,,,,,,,,,,,,125,,,125,,,125,125,,,125,,,,,,125,,,,,,,,,125,,,,,125',
'125,125,125,,125,125,125,125,,,,,125,125,,,,126,126,126,125,126,125',
'125,125,126,126,125,125,,126,,126,126,126,126,126,126,126,,,,,,126,126',
'126,126,126,126,126,,,126,,,,,,,126,,,126,126,126,126,126,126,126,126',
',126,126,126,,126,126,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126',
'126,,,126,,,,,,126,,,,,,,,,126,,,,,126,126,126,126,,126,126,126,126',
',,,,126,126,,,,,,,126,,126,126,126,,,126,126,127,127,127,127,127,,,',
'127,127,,,,127,,127,127,127,127,127,127,127,,,,,,127,127,127,127,127',
'127,127,,,127,,,,,,127,127,,127,127,127,127,127,127,127,127,127,,127',
'127,127,,127,127,127,127,127,,,,,,,,,,,,,,,,,,,,127,,,127,,,127,127',
',,127,,127,,,,127,,,,,,,,,127,,,,,127,127,127,127,,127,127,127,127,',
',,,127,127,,,,240,240,240,127,240,127,127,127,240,240,127,127,,240,',
'240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,',
',,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240,240',
'240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,',
',,240,,,,,240,240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241',
'240,241,240,240,240,241,241,240,240,,241,,241,241,241,241,241,241,241',
',,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241',
'241,241,241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241',
',,241,,,241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241',
'241,241,241,,,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,241',
'241,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242',
',,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,,242',
'242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242',
',,,,,,,,242,,,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243',
'243,243,242,243,242,242,242,243,243,242,242,,243,,243,243,243,243,243',
'243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243',
'243,243,243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,',
',,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243',
'243,,243,243,243,243,,,,,243,243,,,,244,244,244,243,244,243,243,243',
'244,244,243,243,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244',
'244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244',
'244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244',
',,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244',
',,,245,245,245,244,245,244,244,244,245,245,244,244,,245,,245,245,245',
'245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245',
'245,245,245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,',
',,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245',
'245,245,245,,245,245,245,245,,,,,245,245,,,,246,246,246,245,246,245',
'245,245,246,246,245,245,,246,,246,246,246,246,246,246,246,,,,,,246,246',
'246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246',
',246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246',
'246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246',
',,,,246,246,,,,247,247,247,246,247,246,246,246,247,247,246,246,,247',
',247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247',
',,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,247',
'247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,',
',,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248',
'247,248,247,247,247,248,248,247,247,,248,,248,248,248,248,248,248,248',
',,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248',
'248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,248',
'248,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249',
',,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249',
'249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249',
',,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249,,,,250',
'250,250,249,250,249,249,249,250,250,249,249,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,',
',,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250',
'250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250',
'251,251,250,250,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251',
'251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251',
'251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251',
',,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,252,252,252,251,252,251,251,251,252,252,251,251,,252,,252,252,252',
'252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252',
'252,252,252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,',
',,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252',
'252,252,252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252',
'252,252,253,253,252,252,,253,,253,253,253,253,253,253,253,,,,,,253,253',
'253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253',
',253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253',
'253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253',
',,,,253,253,,,,254,254,254,253,254,253,253,253,254,254,253,253,,254',
',254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254',
',,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254',
'254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,',
',,254,,,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255',
'254,255,254,254,254,255,255,254,254,,255,,255,255,255,255,255,255,255',
',,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255',
'255,255,255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255',
'255,255,255,,,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,255',
'255,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256',
',,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256',
'256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256',
',,,,,,,,256,,,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257',
'257,257,256,257,256,256,256,257,257,256,256,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,',
',,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257',
'257,,257,257,257,257,,,,,257,257,,,,258,258,258,257,258,257,257,257',
'258,258,257,257,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258',
'258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258',
'258,,258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258',
',,,,,258,,,,,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258',
',,,259,259,259,258,259,258,258,258,259,259,258,258,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,259,259,259,,,,,,',
',,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259',
'259,259,259,,259,259,259,259,,,,,259,259,,,,260,260,260,259,260,259',
'259,259,260,260,259,259,,260,,260,260,260,260,260,260,260,,,,,,260,260',
'260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260',
',260,260,260,,260,260,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260',
'260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260,260,260,,260,260,260,260',
',,,,260,260,,,,261,261,261,260,261,260,260,260,261,261,260,260,,261',
',261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261',
',,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261,261',
'261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,',
',,261,,,,,261,261,261,261,,261,261,261,261,,,,,261,261,,,,266,266,266',
'261,266,261,261,261,266,266,261,261,,266,,266,266,266,266,266,266,266',
',,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266',
'266,266,266,,266,266,266,,266,266,266,266,266,,,,,,,,,,,,,,,,,,,,266',
',,266,,,266,266,,,266,,,,,,266,,,,,,,,,266,,,,,266,266,266,266,,266',
'266,266,266,,,,,266,266,,,,,,,266,,266,266,266,,,266,266,526,526,526',
'526,526,,,,526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526',
'526,526,526,526,526,,,526,,,,,,526,526,526,526,526,526,526,526,526,526',
'526,526,,526,526,526,,526,526,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526',
',,526,526,,,526,,526,,,,526,,,,,,,,,526,,,,,526,526,526,526,,526,526',
'526,526,,,,,526,526,,,,,,526,526,,526,526,526,,,526,526,520,520,520',
',520,,,,520,520,,,,520,,520,520,520,520,520,520,520,,,,,,520,520,520',
'520,520,520,520,,,520,,,,,,,520,,,520,520,520,520,520,520,520,520,,520',
'520,520,,520,520,520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520',
',,520,,,,,,520,,,,,,,,,520,,,,,520,520,520,520,,520,520,520,520,,,,',
'520,520,,,,518,518,518,520,518,520,520,520,518,518,520,520,,518,,518',
'518,518,518,518,518,518,,,,,,518,518,518,518,518,518,518,,,518,,,,,',
',518,,,518,518,518,518,518,518,518,518,518,518,518,518,,518,518,518',
'518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,,,,518,,518,,,518',
',,,,,518,,,,,518,518,518,518,,518,518,518,518,,,,,518,518,,,,516,516',
'516,518,516,518,518,518,516,516,518,518,,516,,516,516,516,516,516,516',
'516,,,,,,516,516,516,516,516,516,516,,,516,,,,,,,516,,,516,516,516,516',
'516,516,516,516,516,516,516,516,,516,516,516,516,516,,,,,,,,,,,,,,,',
',,,,516,,,516,,,516,516,,,516,,516,,516,,516,,,516,,,,,,516,,,,,516',
'516,516,516,,516,516,516,516,,,,,516,516,,,,,,,516,,516,516,516,,,516',
'516,655,655,655,655,655,,,,655,655,,,,655,,655,655,655,655,655,655,655',
',,,,,655,655,655,655,655,655,655,,,655,,,,,,655,655,,655,655,655,655',
'655,655,655,655,655,,655,655,655,,655,655,655,655,655,,,,,,,,,,,,,,',
',,,,,655,,,655,,,655,655,,,655,,655,,,,655,,,,,,,,,655,,,,,655,655,655',
'655,,655,655,655,655,,,,,655,655,,,,507,507,507,655,507,655,655,655',
'507,507,655,655,,507,,507,507,507,507,507,507,507,,,,,,507,507,507,507',
'507,507,507,,,507,,,,,,,507,,,507,507,507,507,507,507,507,507,,507,507',
'507,,507,507,507,507,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507,507,,,507',
',,,,,507,,,,,,,,,507,,,,,507,507,507,507,,507,507,507,507,,,,,507,507',
',,,,,,507,,507,507,507,502,,507,507,,,,502,502,502,,,502,502,502,887',
'502,887,887,887,887,887,,,502,502,502,,,,887,,,,,,502,502,,502,502,502',
'502,502,,,,,,,,,887,,373,,373,373,373,373,373,887,887,887,887,,,,887',
'373,,,,,,,,502,,,,,,,502,,,,,502,502,373,373,,887,,,,,,373,373,373,373',
',,,373,,,,,502,502,,,,,,,,,,,,,,502,,,502,,282,282,282,502,282,,,,282',
'282,502,,,282,,282,282,282,282,282,282,282,,,,,,282,282,282,282,282',
'282,282,,,282,,,,,,,282,,,282,282,282,282,282,282,282,282,,282,282,282',
',282,282,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,,282,,',
',,,282,,,,,,,,,282,,,,,282,282,282,282,,282,282,282,282,,,,,282,282',
',,,,,,282,,282,282,282,,,282,282,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5',
'5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5',
'5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5',
',5,5,5,5,,,,,5,5,,,,289,289,289,5,289,5,5,5,289,289,5,5,,289,,289,289',
'289,289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289',
',,289,289,289,289,289,289,289,289,289,289,289,289,,289,289,289,289,289',
',,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,289,,289,,289,,,289,,',
',,,289,,,,,289,289,289,289,,289,289,289,289,,,,,289,289,,,,290,290,290',
'289,290,289,289,289,290,290,289,289,,290,,290,290,290,290,290,290,290',
',,,,,290,290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290',
'290,290,290,290,290,290,290,,290,290,290,290,290,,,,,,,,,,,,,,,,,,,',
'290,,,290,,,290,290,,,290,,290,,290,,290,,,290,,,,,,290,,,,,290,290',
'290,290,,290,290,290,290,,,,,290,290,,,,298,298,298,290,298,290,290',
'290,298,298,290,290,,298,,298,298,298,298,298,298,298,,,,,,298,298,298',
'298,298,298,298,,,298,,,,,,,298,,,298,298,298,298,298,298,298,298,298',
'298,298,298,,298,298,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298',
'298,,,298,,298,,298,,298,,,298,,,,,,298,,,,,298,298,298,298,,298,298',
'298,298,,,,,298,298,298,,,305,305,305,298,305,298,298,298,305,305,298',
'298,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305',
',,305,,,,,,,305,,,305,305,305,305,305,305,305,305,,305,305,305,,305',
'305,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305,,,305,305,,,305,,,,,,305',
',,,,,,,,305,,,,,305,305,305,305,,305,305,305,305,,,,,305,305,,,,307',
'307,307,305,307,305,305,305,307,307,305,305,,307,,307,307,307,307,307',
'307,307,,,,,,307,307,307,307,307,307,307,,,307,,,,,,,307,,,307,307,307',
'307,307,307,307,307,,307,307,307,,307,307,307,307,307,,,,,,,,,,,,,,',
',,,,,307,,,307,,,307,307,,,307,,,,,,307,,,,,,,,,307,,,,,307,307,307',
'307,,307,307,307,307,,,,,307,307,,,,310,310,310,307,310,307,307,307',
'310,310,307,307,,310,,310,310,310,310,310,310,310,,,,,,310,310,310,310',
'310,310,310,,,310,,,,,,,310,,,310,310,310,310,310,310,310,310,,310,310',
'310,,310,310,310,310,310,,,,,,,,,,,,,,,,,,,,310,,,310,,,310,310,,,310',
',,,,,310,,,,,,,,,310,,,,,310,310,310,310,,310,310,310,310,,,,,310,310',
',,,311,311,311,310,311,310,310,310,311,311,310,310,,311,,311,311,311',
'311,311,311,311,,,,,,311,311,311,311,311,311,311,,,311,,,,,,,311,,,311',
'311,311,311,311,311,311,311,,311,311,311,,311,311,311,311,311,,,,,,',
',,,,,,,,,,,,,311,,,311,,,311,311,,,311,,,,,,311,,,,,,,,,311,,,,,311',
'311,311,311,,311,311,311,311,,,,,311,311,,,,,,,311,,311,311,311,,,311',
'311,316,316,316,316,316,,,,316,316,,,,316,,316,316,316,316,316,316,316',
',,,,,316,316,316,316,316,316,316,,,316,,,,,,316,316,,316,316,316,316',
'316,316,316,316,316,,316,316,316,,316,316,316,316,316,,,,,,,,,,,,,,',
',,,,,316,,,316,,,316,316,,,316,,316,,,,316,,,,,,,,,316,,,,,316,316,316',
'316,,316,316,316,316,,,,,316,316,,,,657,657,657,316,657,316,316,316',
'657,657,316,316,,657,,657,657,657,657,657,657,657,,,,,,657,657,657,657',
'657,657,657,,,657,,,,,,,657,,,657,657,657,657,657,657,657,657,,657,657',
'657,,657,657,657,657,657,,,,,,,,,,,,,,,,,,,,657,,,657,,,657,657,,,657',
',657,,,,657,,,,,,,,,657,,,,,657,657,657,657,,657,657,657,657,,,,,657',
'657,,,,658,658,658,657,658,657,657,657,658,658,657,657,,658,,658,658',
'658,658,658,658,658,,,,,,658,658,658,658,658,658,658,,,658,,,,,,,658',
',,658,658,658,658,658,658,658,658,,658,658,658,,658,658,658,658,658',
',,,,,,,,,,,,,,,,,,,658,,,658,,,658,658,,,658,,,,,,658,,,,,,,,,658,,',
',,658,658,658,658,,658,658,658,658,,,,,658,658,,,,951,951,951,658,951',
'658,658,658,951,951,658,658,,951,,951,951,951,951,951,951,951,,,,,,951',
'951,951,951,951,951,951,,,951,,,,,,,951,,,951,951,951,951,951,951,951',
'951,,951,951,951,,951,951,951,951,951,,,,,,,,,,,,,,,,,,,,951,,,951,',
',951,951,,,951,,,,,,951,,,,,,,,,951,,,,,951,951,951,951,,951,951,951',
'951,,,,,951,951,,,,659,659,659,951,659,951,951,951,659,659,951,951,',
'659,,659,659,659,659,659,659,659,,,,,,659,659,659,659,659,659,659,,',
'659,,,,,,,659,,,659,659,659,659,659,659,659,659,659,659,659,659,,659',
'659,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,659,,659',
',659,,,659,,,,,,659,,,,,659,659,659,659,,659,659,659,659,,,,,659,659',
',,,,,,659,,659,659,659,,,659,659,662,662,662,662,662,,,,662,662,,,,662',
',662,662,662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,,662',
',,,,,662,662,,662,662,662,662,662,662,662,662,662,,662,662,662,,662',
'662,662,662,662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,662,,',
',662,,,,,,,,,662,,,,,662,662,662,662,,662,662,662,662,,,,,662,662,,',
',663,663,663,662,663,662,662,662,663,663,662,662,,663,,663,663,663,663',
'663,663,663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,,663,,,663,663',
'663,663,663,663,663,663,,663,663,663,,663,663,663,663,663,,,,,,,,,,',
',,,,,,,,,663,,,663,,,663,663,,,663,,,,,,663,,,,,,,,,663,,,,,663,663',
'663,663,,663,663,663,663,,,,,663,663,,,,950,950,950,663,950,663,663',
'663,950,950,663,663,,950,,950,950,950,950,950,950,950,,,,,,950,950,950',
'950,950,950,950,,,950,,,,,,,950,,,950,950,950,950,950,950,950,950,950',
'950,950,950,,950,950,950,950,950,,,,,,,,,,,,,,,,,,,,950,,,950,,,950',
'950,,,950,,,,950,,950,,,950,,,,,,950,,,,,950,950,950,950,,950,950,950',
'950,,,,,950,950,,,,666,666,666,950,666,950,950,950,666,666,950,950,',
'666,,666,666,666,666,666,666,666,,,,,,666,666,666,666,666,666,666,,',
'666,,,,,,,666,,,666,666,666,666,666,666,666,666,666,666,666,666,,666',
'666,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,,666,,666',
',666,,,666,,,,,,666,,,,,666,666,666,666,,666,666,666,666,,,,,666,666',
',,,667,667,667,666,667,666,666,666,667,667,666,666,,667,,667,667,667',
'667,667,667,667,,,,,,667,667,667,667,667,667,667,,,667,,,,,,,667,,,667',
'667,667,667,667,667,667,667,667,667,667,667,,667,667,667,667,667,,,',
',,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,,,667,,667,,,667,,,,,,667',
',,,,667,667,667,667,,667,667,667,667,,,,,667,667,,,,936,936,936,667',
'936,667,667,667,936,936,667,667,,936,,936,936,936,936,936,936,936,,',
',,,936,936,936,936,936,936,936,,,936,,,,,,,936,,,936,936,936,936,936',
'936,936,936,,936,936,936,,936,936,936,936,936,,,,,,,,,,,,,,,,,,,,936',
',,936,,,936,936,,,936,,936,,,,936,,,,,,,,,936,,,,,936,936,936,936,,936',
'936,936,936,,,,,936,936,,,,668,668,668,936,668,936,936,936,668,668,936',
'936,,668,,668,668,668,668,668,668,668,,,,,,668,668,668,668,668,668,668',
',,668,,,,,,,668,,,668,668,668,668,668,668,668,668,,668,668,668,,668',
'668,668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,,,668',
',,,,,,,,668,,,,,668,668,668,668,,668,668,668,668,,,,,668,668,,,,931',
'931,931,668,931,668,668,668,931,931,668,668,,931,,931,931,931,931,931',
'931,931,,,,,,931,931,931,931,931,931,931,,,931,,,,,,,931,,,931,931,931',
'931,931,931,931,931,,931,931,931,,931,931,931,931,931,,,,,,,,,,,,,,',
',,,,,931,,,931,,,931,931,,,931,,,,,,931,,,,,,,,,931,,,,,931,931,931',
'931,,931,931,931,931,,,,,931,931,,,,669,669,669,931,669,931,931,931',
'669,669,931,931,,669,,669,669,669,669,669,669,669,,,,,,669,669,669,669',
'669,669,669,,,669,,,,,,,669,,,669,669,669,669,669,669,669,669,,669,669',
'669,,669,669,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669,,,669',
',,,,,669,,,,,,,,,669,,,,,669,669,669,669,,669,669,669,669,,,,,669,669',
',,,673,673,673,669,673,669,669,669,673,673,669,669,,673,,673,673,673',
'673,673,673,673,,,,,,673,673,673,673,673,673,673,,,673,,,,,,,673,,,673',
'673,673,673,673,673,673,673,,673,673,673,,673,673,673,673,673,,,,,,',
',,,,,,,,,,,,,673,,,673,,,673,673,,,673,,,,,,673,,,,,,,,,673,,,,,673',
'673,673,673,,673,673,673,673,,,,,673,673,,,,878,878,878,673,878,673',
'673,673,878,878,673,673,,878,,878,878,878,878,878,878,878,,,,,,878,878',
'878,878,878,878,878,,,878,,,,,,,878,,,878,878,878,878,878,878,878,878',
',878,878,878,,878,878,878,878,878,,,,,,,,,,,,,,,,,,,,878,,,878,,,878',
'878,,,878,,,,,,878,,,,,,,,,878,,,,,878,878,878,878,,878,878,878,878',
',,,,878,878,,,,352,352,352,878,352,878,878,878,352,352,878,878,,352',
',352,352,352,352,352,352,352,,,,,,352,352,352,352,352,352,352,,,352',
',,,,,,352,,,352,352,352,352,352,352,352,352,,352,352,352,,352,352,352',
'352,352,,,,,,,,,,,,,,,,,,,,352,,,352,,,352,352,,,352,,,,,,352,,,,,,',
',,352,,,,,352,352,352,352,,352,352,352,352,,,,,352,352,,,,354,354,354',
'352,354,352,352,352,354,354,352,352,,354,,354,354,354,354,354,354,354',
',,,,,354,354,354,354,354,354,354,,,354,,,,,,,354,,,354,354,354,354,354',
'354,354,354,,354,354,354,,354,354,354,354,354,,,,,,,,,,,,,,,,,,,,354',
',,354,354,,354,354,,,354,,,,,,354,,,,,,,,,354,,,,,354,354,354,354,,354',
'354,354,354,,,,,354,354,,,,855,855,855,354,855,354,354,354,855,855,354',
'354,,855,,855,855,855,855,855,855,855,,,,,,855,855,855,855,855,855,855',
',,855,,,,,,,855,,,855,855,855,855,855,855,855,855,,855,855,855,,855',
'855,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855,855,,,855,,,,,,855',
',,,,,,,,855,,,,,855,855,855,855,,855,855,855,855,,,,,855,855,,,,470',
'470,470,855,470,855,855,855,470,470,855,855,,470,,470,470,470,470,470',
'470,470,,,,,,470,470,470,470,470,470,470,,,470,,,,,,,470,,,470,470,470',
'470,470,470,470,470,470,470,470,470,,470,470,470,470,470,,,,,,,,,,,',
',,,,,,,,470,,,470,,,470,470,,,470,,470,,470,,470,,,470,,,,,,470,,,,',
'470,470,470,470,,470,470,470,470,,,,,470,470,,,,853,853,853,470,853',
'470,470,470,853,853,470,470,,853,,853,853,853,853,853,853,853,,,,,,853',
'853,853,853,853,853,853,,,853,,,,,,,853,,,853,853,853,853,853,853,853',
'853,,853,853,853,,853,853,853,853,853,,,,,,,,,,,,,,,,,,,,853,,,853,',
',853,853,,,853,,,,,,853,,,,,,,,,853,,,,,853,853,853,853,,853,853,853',
'853,,,,,853,853,,,,852,852,852,853,852,853,853,853,852,852,853,853,',
'852,,852,852,852,852,852,852,852,,,,,,852,852,852,852,852,852,852,,',
'852,,,,,,,852,,,852,852,852,852,852,852,852,852,,852,852,852,,852,852',
'852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852,,,,,,852,,',
',,,,,,852,,,,,852,852,852,852,,852,852,852,852,,,,,852,852,,,,839,839',
'839,852,839,852,852,852,839,839,852,852,,839,,839,839,839,839,839,839',
'839,,,,,,839,839,839,839,839,839,839,,,839,,,,,,,839,,,839,839,839,839',
'839,839,839,839,,839,839,839,,839,839,839,839,839,,,,,,,,,,,,,,,,,,',
',839,,,839,,,839,839,,,839,,,,,,839,,,,,,,,,839,,,,,839,839,839,839',
',839,839,839,839,,,,,839,839,,,,674,674,674,839,674,839,839,839,674',
'674,839,839,,674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674',
'674,674,,,674,,,,,,,674,,,674,674,674,674,674,674,674,674,,674,674,674',
',674,674,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,',
',,,674,,,,,,,,,674,,,,,674,674,674,674,,674,674,674,674,,,,,674,674',
',,,377,377,377,674,377,674,674,674,377,377,674,674,,377,,377,377,377',
'377,377,377,377,,,,,,377,377,377,377,377,377,377,,,377,,,,,,,377,,,377',
'377,377,377,377,377,377,377,,377,377,377,,377,377,377,377,377,,,,,,',
',,,,,,,,,,,,,377,,,377,,,377,377,,,377,,,,,,377,,,,,,,,,377,,,,,377',
'377,377,377,,377,377,377,377,,,,,377,377,,,,831,831,831,377,831,377',
'377,377,831,831,377,377,,831,,831,831,831,831,831,831,831,,,,,,831,831',
'831,831,831,831,831,,,831,,,,,,,831,,,831,831,831,831,831,831,831,831',
',831,831,831,,831,831,831,831,831,,,,,,,,,,,,,,,,,,,,831,,,831,,,831',
'831,,,831,,,,,,831,,,,,,,,,831,,,,,831,831,831,831,,831,831,831,831',
',,,,831,831,,,,813,813,813,831,813,831,831,831,813,813,831,831,,813',
',813,813,813,813,813,813,813,,,,,,813,813,813,813,813,813,813,,,813',
',,,,,,813,,,813,813,813,813,813,813,813,813,,813,813,813,,813,813,813',
'813,813,,,,,,,,,,,,,,,,,,,,813,,,813,,,813,813,,,813,,,,,,813,,,,,,',
',,813,,,,,813,813,813,813,,813,813,813,813,,,,,813,813,,,,398,398,398',
'813,398,813,813,813,398,398,813,813,,398,,398,398,398,398,398,398,398',
',,,,,398,398,398,398,398,398,398,,,398,,,,,,,398,,,398,398,398,398,398',
'398,398,398,,398,398,398,,398,398,398,398,398,,,,,,,,,,,,,,,,,,,,398',
',,398,,,398,398,,,398,,,,,,398,,,,,,,,,398,,,,,398,398,398,398,,398',
'398,398,398,,,,,398,398,,,,729,729,729,398,729,398,398,398,729,729,398',
'398,,729,,729,729,729,729,729,729,729,,,,,,729,729,729,729,729,729,729',
',,729,,,,,,,729,,,729,729,729,729,729,729,729,729,,729,729,729,,729',
'729,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,,729,,,,,,729',
',,,,,,,,729,,,,,729,729,729,729,,729,729,729,729,,,,,729,729,,,,732',
'732,732,729,732,729,729,729,732,732,729,729,,732,,732,732,732,732,732',
'732,732,,,,,,732,732,732,732,732,732,732,,,732,,,,,,,732,,,732,732,732',
'732,732,732,732,732,,732,732,732,,732,732,732,732,732,,,,,,,,,,,,,,',
',,,,,732,,,732,,,732,732,,,732,,,,,,732,,,,,,,,,732,,,,,732,732,732',
'732,,732,732,732,732,,,,,732,732,,,,427,427,427,732,427,732,732,732',
'427,427,732,732,,427,,427,427,427,427,427,427,427,,,,,,427,427,427,427',
'427,427,427,,,427,,,,,,,427,,,427,427,427,427,427,427,427,427,,427,427',
'427,,427,427,427,427,427,,,,,,,,,,,,,,,,,,,,427,,,427,,,427,427,,,427',
',,,,,427,,,,,,,,,427,,,,,427,427,427,427,,427,427,427,427,,,,,427,427',
',,,474,474,474,427,474,427,427,427,474,474,427,427,,474,,474,474,474',
'474,474,474,474,,,,,,474,474,474,474,474,474,474,,,474,,,,,,,474,,,474',
'474,474,474,474,474,474,474,,474,474,474,,474,474,474,474,474,,,,,,',
',,,,,,,,,,,,,474,,,474,,,474,474,,,474,,,,,,474,,,,,,,,,474,,,,,474',
'474,474,474,,474,474,474,474,,,,,474,474,,,,552,552,552,474,552,474',
'474,474,552,552,474,474,,552,,552,552,552,552,552,552,552,,,,,,552,552',
'552,552,552,552,552,,,552,,,,,,,552,,,552,552,552,552,552,552,552,552',
',552,552,552,,552,552,552,552,552,,,,,,,,,,,,,,,,,,,,552,,,552,,,552',
'552,,,552,,,,,,552,,,,,,,,,552,,,,,552,552,552,552,,552,552,552,552',
',,,,552,552,,,,473,473,473,552,473,552,552,552,473,473,552,552,,473',
',473,473,473,473,473,473,473,,,,,,473,473,473,473,473,473,473,,,473',
',,,,,,473,,,473,473,473,473,473,473,473,473,,473,473,473,,473,473,473',
'473,473,,,,,,,,,,,,,,,,,,,,473,,,473,,,473,473,,,473,,,,,,473,,,,,,',
',,473,,,,,473,473,473,473,,473,473,473,473,,,,,473,473,,,,767,767,767',
'473,767,473,473,473,767,767,473,473,,767,,767,767,767,767,767,767,767',
',,,,,767,767,767,767,767,767,767,,,767,,,,,,,767,,,767,767,767,767,767',
'767,767,767,,767,767,767,,767,767,767,767,767,,,,,,,,,,,,,,,,,,,,767',
',,767,,,767,767,,,767,,,,,,767,,,,,,,,,767,,,,,767,767,767,767,,767',
'767,767,767,,,,,767,767,,,,752,752,752,767,752,767,767,767,752,752,767',
'767,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752,752,752,752',
',,752,,,,,,,752,,,752,752,752,752,752,752,752,752,,752,752,752,,752',
'752,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752,,752,,',
',752,,,,,,,,,752,,,,,752,752,752,752,,752,752,752,752,,,,,752,752,,',
',472,472,472,752,472,752,752,752,472,472,752,752,,472,,472,472,472,472',
'472,472,472,,,,,,472,472,472,472,472,472,472,,,472,,,,,,,472,,,472,472',
'472,472,472,472,472,472,,472,472,472,,472,472,472,472,472,,,,,,,,,,',
',,,,,,,,,472,,,472,,,472,472,,,472,,,,,,472,,,,,,,,,472,,,,,472,472',
'472,472,,472,472,472,472,,,,,472,472,,,,,,,472,,472,472,472,451,,472',
'472,,,,451,451,451,,,451,451,451,,451,,,,,,,,451,451,451,451,,,,,,,',
',451,451,,451,451,451,451,451,,,,,,,,,,,,,,,,,,,,,,,451,451,451,451',
'451,451,451,451,451,451,451,451,451,451,,,451,451,451,,,451,,451,451',
',,451,451,,451,,451,,451,,451,451,,451,451,451,451,451,,451,451,451',
'1157,,1157,1157,1157,1157,1157,,,,,,,451,,1157,451,451,460,451,,451',
',,,460,460,460,451,,460,460,460,,460,,,1157,,,,,460,460,460,460,460',
',1157,1157,,,,1157,460,460,,460,460,460,460,460,,,,,,,,,,,,,,,,,,,,',
',,460,460,460,460,460,460,460,460,460,460,460,460,460,460,,,460,460',
'460,,,460,,,460,,,460,460,,460,,460,,460,,460,460,,460,460,460,460,460',
',460,460,460,,,,,,,,,,,,,,460,,,460,460,460,460,,460,461,460,,,,,460',
'461,461,461,,,461,461,461,,461,,,,,,,,461,461,461,461,461,,,,,,,,461',
'461,,461,461,461,461,461,,,,,,,,,,,,,,,,,,,,,,,461,461,461,461,461,461',
'461,461,461,461,461,461,461,461,,,461,461,461,,,461,,,461,,,461,461',
',461,,461,,461,,461,461,,461,461,461,461,461,,461,461,461,,,,,,,,,,',
',,,461,,,461,461,461,461,,461,,461,,627,627,627,461,627,,,,627,627,',
',,627,,627,627,627,627,627,627,627,,,,,,627,627,627,627,627,627,627',
',,627,,,,,,,627,,,627,627,627,627,627,627,627,627,627,627,627,627,,627',
'627,627,627,627,,,,,,,,,,,,,,,,,,,,627,,,627,,,627,627,,,627,,627,,627',
',627,,,627,,,,,,627,,,,,627,627,627,627,,627,627,627,627,,,,,627,627',
',,,236,236,236,627,236,627,627,627,236,236,627,627,,236,,236,236,236',
'236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236',
'236,236,236,236,236,236,236,,236,236,236,,236,236,236,236,236,,,,,,',
',,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236',
'236,236,236,,236,236,236,236,,,,,236,236,,,,343,343,343,236,343,236',
'236,236,343,343,236,236,,343,,343,343,343,343,343,343,343,,,,,,343,343',
'343,343,343,343,343,,,343,,,,,,,343,,,343,343,343,343,343,343,343,343',
',343,343,343,,343,343,,,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,',
',343,,,,,,,,,,,,,,,,,,,,343,343,343,343,,343,343,343,343,,,,,343,343',
',,,1004,1004,1004,343,1004,343,343,343,1004,1004,,,,1004,,1004,1004',
'1004,1004,1004,1004,1004,,,,,,1004,1004,1004,1004,1004,1004,1004,,,1004',
',,,,,,1004,,,1004,1004,1004,1004,1004,1004,1004,1004,,1004,1004,1004',
',1004,1004,,,1004,,,,,,,,,,,,,,,,,,,,1004,,,1004,,,1004,1004,,,1004',
',,,,,,,,,,,,,,,,,,,1004,1004,1004,1004,,1004,1004,1004,1004,,,,,1004',
'1004,,,,746,746,746,1004,746,1004,1004,1004,746,746,,,,746,,746,746',
'746,746,746,746,746,,,,,,746,746,746,746,746,746,746,,,746,,,,,,,746',
',,746,746,746,746,746,746,746,746,,746,746,746,,746,746,,,746,,,,,,',
',,,,,,,,,,,,,746,,,746,,,746,746,,,746,,,,,,,,,,,,,,,,,,,,746,746,746',
'746,,746,746,746,746,,,,,746,746,,,,324,324,324,746,324,746,746,746',
'324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324',
'324,324,,,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324',
',324,324,,,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,1155,',
'1155,1155,1155,1155,1155,,,,,,,,,1155,,324,324,324,324,,324,324,324',
'324,,,,,324,324,,,,324,,1155,324,,324,324,324,534,534,534,,534,1155',
'1155,,534,534,1155,,,534,,534,534,534,534,534,534,534,,,,,,534,534,534',
'534,534,534,534,,,534,,,,,,,534,,,534,534,534,534,534,534,534,534,,534',
'534,534,,534,534,,,534,,,,,,,,,,,,,,,,,,,,534,,,534,,,534,534,,,534',
',,,,,,,,,,,,,,,,,,,534,534,534,534,,534,534,534,534,,,,,534,534,,,,995',
'995,995,534,995,534,534,534,995,995,,,,995,,995,995,995,995,995,995',
'995,,,,,,995,995,995,995,995,995,995,,,995,,,,,,,995,,,995,995,995,995',
'995,995,995,995,,995,995,995,,995,995,,,995,,,,,,,,,,,,,,,,,,,,995,',
',995,,,995,995,,,995,,,,,,,,,,,,,,,,,,,,995,995,995,995,,995,995,995',
'995,,,,,995,995,,,,1071,1071,1071,995,1071,995,995,995,1071,1071,,,',
'1071,,1071,1071,1071,1071,1071,1071,1071,,,,,,1071,1071,1071,1071,1071',
'1071,1071,,,1071,,,,,,,1071,,,1071,1071,1071,1071,1071,1071,1071,1071',
',1071,1071,1071,,1071,1071,,,1071,,,,,,,,,,,,,,,,,,,,1071,,,1071,,,1071',
'1071,,,1071,,,,,,,,,,,,,,,,,,,,1071,1071,1071,1071,,1071,1071,1071,1071',
',,,,1071,1071,,,,35,35,35,1071,35,1071,1071,1071,35,35,,,,35,,35,35',
'35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35',
'35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35',
',,35,,35,,,,,,,,,,,,,,,,,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,36,36',
'36,35,36,35,35,35,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36',
'36,36,36,,,36,,,,,,,36,,,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,',
'36,,,,,,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,,1153,,1153,1153,1153,1153',
'1153,,,,,,,,,1153,,36,36,36,36,,36,36,36,36,,,,,36,36,,,,36,,1153,36',
',36,36,36,74,74,74,,74,1153,1153,,74,74,1153,,,74,,74,74,74,74,74,74',
'74,,,,,,74,74,74,74,74,74,74,,,74,,,,,,,74,,,74,74,74,74,74,74,74,74',
',74,74,74,,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,,,74,,,74,74,,,74,,74,,',
',,,,,,,,,,,,,,,74,74,74,74,,74,74,74,74,,,,,74,74,,,,543,543,543,74',
'543,74,74,74,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543,543',
'543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543,543,543,543,543',
',543,543,543,,543,543,,,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543,543,',
',543,,,,,,,,,,,,,,,,,,,,543,543,543,543,,543,543,543,543,,,,,543,543',
',,,75,75,75,543,75,543,543,543,75,75,,,,75,,75,75,75,75,75,75,75,,,',
',,75,75,75,75,75,75,75,,,75,,,,,,,75,,,75,75,75,75,75,75,75,75,,75,75',
'75,,75,75,,,75,,,,,,,,,,,,,,,,,75,,,75,,,75,,,75,75,,,75,,,,,,,,,,,',
',,,,,,,,75,75,75,75,,75,75,75,75,,,,,75,75,,,,735,735,735,75,735,75',
'75,75,735,735,,,,735,,735,735,735,735,735,735,735,,,,,,735,735,735,735',
'735,735,735,,,735,,,,,,,735,,,735,735,735,735,735,735,735,735,,735,735',
'735,,735,735,,,735,,,,,,,,,,,,,,,,,,,,735,,,735,,,735,735,,,735,,,,',
',,,,,,,,,,,,,,,735,735,735,735,,735,735,735,735,,,,,735,735,,,,76,76',
'76,735,76,735,735,735,76,76,,,,76,,76,76,76,76,76,76,76,,,,,,76,76,76',
'76,76,76,76,,,76,,,,,,,76,,,76,76,76,76,76,76,76,76,,76,76,76,,76,76',
',,76,,,,,,,,,,,,,,,,,,,,76,,,76,,,76,76,,,76,,,,,,,,,,,,,,,,,,,,76,76',
'76,76,,76,76,76,76,,,,,76,76,,,,,,,76,,76,76,76,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9',
'9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9',
'9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,418,418,418,418,418',
'418,418,418,418,418,418,418,418,418,418,418,418,418,418,418,418,418',
'418,418,,,,418,418,418,418,418,418,418,418,418,418,,,,,,418,418,418',
'418,418,418,418,418,418,,,418,,,,,,,,418,418,,418,418,418,418,418,418',
'418,,,418,418,,,,418,418,418,418,,,,,,,,,,,,,,418,418,,418,418,418,418',
'418,418,418,418,418,418,418,418,,,418,418,,,,,,,,,,,,,,418,8,8,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8',
'8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,',
',,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,653,653,653',
'653,653,653,653,653,653,653,653,653,653,653,653,653,653,653,653,653',
'653,653,653,653,,,,653,653,653,653,653,653,653,653,653,653,,,,,,653',
'653,653,653,653,653,653,653,653,,,653,,,,,,,,653,653,,653,653,653,653',
'653,653,653,,,653,653,,,,653,653,653,653,,,,,,,,,,,,,,653,653,,653,653',
'653,653,653,653,653,653,653,653,653,653,,,653,653,475,475,475,475,,',
',,,,,,,653,,,475,475,475,475,,,605,475,605,605,605,605,605,475,475,',
',475,,,,605,,,,,,,,,,,,,,,,475,,,475,,,605,475,,,475,,,,,605,605,605',
'605,,,,605,,,,475,,,,475,475,475,475,,475,475,475,475,,,,,475,475,1106',
'1106,1106,1106,,,475,,475,475,475,,,475,475,,1106,1106,1106,1106,,,1151',
'1106,1151,1151,1151,1151,1151,1106,1106,,,1106,,,,1151,,,,,,,,,,,,,',
',,1106,,,1106,,,1151,1106,,,1106,,,,,1151,1151,1151,1151,,,,1151,,,',
'1106,,,,1106,1106,1106,1106,,1106,1106,1106,1106,,,,,1106,1106,1098',
'1098,1098,1098,,,1106,,1106,1106,1106,,,1106,1106,,1098,1098,1098,1098',
',,1007,1098,1007,1007,1007,1007,1007,1098,1098,,,1098,,,,1007,,,,,,',
',,,,,,,,,1098,,,1098,,,1007,1098,,,1098,,1098,,,1007,1007,1007,1007',
',,,1007,,,,1098,,,,1098,1098,1098,1098,,1098,1098,1098,1098,,,,,1098',
'1098,1046,1046,1046,1046,,,1098,,1098,1098,1098,,,1098,1098,,1046,1046',
'1046,1046,,,1009,1046,1009,1009,1009,1009,1009,1046,1046,,,1046,,,,1009',
',,,,,,,,,,,,,,,1046,,,1046,,,1009,1046,,,1046,,,,,,,1009,1009,,,,1009',
',,,1046,,,,1046,1046,1046,1046,,1046,1046,1046,1046,,,,,1046,1046,869',
'869,869,869,,,1046,,1046,1046,1046,,,1046,1046,,869,869,869,869,,,1011',
'869,1011,1011,1011,1011,1011,869,869,,,869,,,,1011,,,,,,,,,,,,,,,,869',
',,869,,,1011,869,,,869,,,,,,,1011,1011,,,,1011,,,,869,,,,869,869,869',
'869,,869,869,869,869,,,,,869,869,861,861,861,861,,,869,,869,869,869',
',,869,869,,861,861,861,861,,,,861,861,,,,,861,861,,,861,861,,,,,,,,',
',,,,,,,,,,861,,,861,,,,861,,,861,,861,,,,,,,861,,,,,,,861,,,,861,861',
'861,861,,861,861,861,861,,,,,861,861,1149,1149,1149,1149,,,861,,861',
'861,861,,,861,861,,1149,1149,1149,1149,,,1013,1149,1013,1013,1013,1013',
'1013,1149,1149,,,1149,,,,1013,,,,,,,,,,,,,,,,1149,,,1149,,,1013,1149',
',,1149,,,,,,,1013,1013,,,,1013,,,,1149,,,,1149,1149,1149,1149,,1149',
'1149,1149,1149,,,,,1149,1149,1105,1105,1105,1105,,,1149,,1149,1149,1149',
',,1149,1149,,1105,1105,1105,1105,,,1131,1105,1131,1131,1131,1131,1131',
'1105,1105,,,1105,,,,1131,,,,,,,,,,,,,,,,1105,,,1105,,,1131,1105,,,1105',
',,,,,,1131,1131,,,,1131,,,,1105,,,,1105,1105,1105,1105,,1105,1105,1105',
'1105,,,,,1105,1105,858,858,858,858,,,1105,,1105,1105,1105,,,1105,1105',
',858,858,858,858,,,1183,858,1183,1183,1183,1183,1183,858,858,,,858,',
',,1183,,,,,,,,,,,,,,,,858,,,858,,,1183,858,,,858,,,,,,,1183,1183,,,',
'1183,,,,858,,,,858,858,858,858,,858,858,858,858,,,,,858,858,862,862',
'862,862,,,858,,858,858,858,,,858,858,,862,862,862,862,,,,862,862,,,',
',862,862,,,862,862,,,,,,,,,,,,,,,,,,,862,,,862,,,,862,,,862,,862,,,',
',,,862,,,,,,,862,,,,862,862,862,862,,862,862,862,862,,,,,862,862,864',
'864,864,864,,,862,,862,862,862,,,862,862,,864,864,864,864,,,358,864',
'358,358,358,358,358,864,864,,,864,,,,358,,,,,,,,,,,,,,,,864,,,864,,',
'358,864,,,864,,864,,,358,358,358,358,,,,358,,,,864,,,,864,864,864,864',
',864,864,864,864,,,,,864,864,935,935,935,935,,,864,,864,864,864,,,864',
'864,,935,935,935,935,,,,935,935,,,,,935,935,,,935,935,,,,,,,,,,,,,,',
',,,,935,,,935,,,,935,,,935,,935,,,,,,,935,,,,,,,935,,,,935,935,935,935',
',935,935,935,935,,,,,935,935,,,,,,,935,,935,935,935,,,935,935,22,22',
'22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,,',
',22,22,22,22,22,22,22,22,22,22,,,,,,22,22,22,22,22,22,22,22,22,22,22',
'22,,22,,,,,,22,22,,22,22,22,22,22,22,22,,,22,22,,,,22,22,22,22,,,,,',
'22,,,,,,,,22,22,,22,22,22,22,22,22,22,22,22,22,22,22,,,22,967,967,967',
'967,,,,,,,,,,,,,967,967,967,967,,,761,967,761,761,761,761,761,967,967',
',,967,,,,761,,,,,,,,,,,,,,,,967,,,967,,,761,967,,,967,,,,,761,761,761',
'761,,,,761,,,,967,,,,967,967,967,967,,967,967,967,967,,,,,967,967,959',
'959,959,959,,,967,,967,967,967,,,967,967,,959,959,959,959,,,763,959',
'763,763,763,763,763,959,959,,,959,,,,763,,,,,,,,,,,,,,,,959,,,959,,',
'763,959,,,959,,959,,,763,763,763,763,,,,763,,,,959,,,,959,959,959,959',
',959,959,959,959,,,,,959,959,,,,,,,959,,959,959,959,,,959,959,713,713',
'713,713,713,713,713,713,713,713,713,713,713,713,713,713,713,713,713',
'713,713,713,713,713,,,,713,713,713,713,713,713,713,713,713,713,,,,,',
'713,713,713,713,713,713,713,713,713,,,713,,,,,,,,713,713,,713,713,713',
'713,713,713,713,,,713,713,,,,713,713,713,713,,,,,,,,,,,,,,713,713,,713',
'713,713,713,713,713,713,713,713,713,713,713,,,713,1146,1146,1146,1146',
',,,,,,,,,,,,1146,1146,1146,1146,,,,1146,,,,,,1146,1146,,,1146,,,,,,',
',696,696,696,696,,,,,,,,,1146,,,1146,696,696,696,1146,,,1146,,,,,,,696',
'696,,,696,,,,,1146,,,,1146,1146,1146,1146,,1146,1146,1146,1146,,,,,1146',
'1146,,,,,,,1146,,1146,1146,1146,,,1146,1146,1063,,1063,1063,1063,1063',
'1063,,,,,696,696,696,696,1063,696,696,696,696,,,,,696,696,697,697,697',
'697,,,696,,696,696,696,1063,,,,,697,697,697,,1063,1063,1063,1063,,,',
'1063,,697,697,,,697,871,871,871,871,,,,,,,,,,,,,871,871,871,,,,,,,,',
',,871,871,,,871,,,,,,,,,,,,,,,,697,697,697,697,,697,697,697,697,,,,',
'697,697,,,,,,,697,,697,697,697,,,,,,,,,871,871,871,871,,871,871,871',
'871,,,,,871,871,469,469,,,469,,871,,871,871,871,,469,469,,469,469,469',
'469,469,469,469,,,469,469,,,,469,469,469,469,,,,,,469,,,,,,,,469,469',
',469,469,469,469,469,469,469,469,469,469,469,469,219,219,469,,219,,',
',,,,,219,219,,219,219,219,219,219,219,219,,,219,219,,,,219,219,219,219',
',,,,,219,,,,,,,,219,219,,219,219,219,219,219,219,219,219,219,219,219',
'219,220,220,219,,220,,,,,,,,220,220,,220,220,220,220,220,220,220,,,220',
'220,,,,220,220,220,220,,,,,,220,,,,,,,,220,220,,220,220,220,220,220',
'220,220,220,220,220,220,220,285,285,220,,285,,,,,,,,285,285,,285,285',
'285,285,285,285,285,,,285,285,,,,285,285,285,285,,,,,,,,,,,,,,285,285',
',285,285,285,285,285,285,285,285,285,285,285,285,468,468,285,,468,,',
',,,,,468,468,,468,468,468,468,468,468,468,,,468,468,,,,468,468,468,468',
',,,,,468,,,,,,,,468,468,,468,468,468,468,468,468,468,468,468,468,468',
'468,537,537,468,,537,,,,,,,,537,537,,537,537,537,537,537,537,537,,,537',
'537,,,,537,537,537,537,,,,,,537,,,,,,,,537,537,,537,537,537,537,537',
'537,537,537,537,537,537,537,538,538,537,,538,,,,,,,,538,538,,538,538',
'538,538,538,538,538,,,538,538,,,,538,538,538,538,,,,,,538,,,,,,,,538',
'538,,538,538,538,538,538,538,538,538,538,538,538,538,547,547,538,,547',
',,,,,,,547,547,,547,547,547,547,547,547,547,,,547,547,,,,547,547,547',
'547,,,,,,547,,,,,,,,547,547,,547,547,547,547,547,547,547,547,547,547',
'547,547,548,548,547,,548,,,,,,,,548,548,,548,548,548,548,548,548,548',
',,548,548,,,,548,548,548,548,,,,,,548,,,,,,,,548,548,,548,548,548,548',
'548,548,548,548,548,548,548,548,618,618,548,,618,,,,,,,,618,618,,618',
'618,618,618,618,618,618,,,618,618,,,,618,618,618,618,,,,,,618,,,,,,',
',618,618,,618,618,618,618,618,618,618,618,618,618,618,618,619,619,618',
',619,,,,,,,,619,619,,619,619,619,619,619,619,619,,,619,619,,,,619,619',
'619,619,,,,,,619,,,,,,,,619,619,,619,619,619,619,619,619,619,619,619',
'619,619,619,625,625,619,,625,,,,,,,,625,625,,625,625,625,625,625,625',
'625,,,625,625,,,,625,625,625,625,,,,,,625,,,,,,,,625,625,,625,625,625',
'625,625,625,625,625,625,625,625,625,626,626,625,,626,,,,,,,,626,626',
',626,626,626,626,626,626,626,,,626,626,,,,626,626,626,626,,,,,,626,',
',,,,,,626,626,,626,626,626,626,626,626,626,626,626,626,626,626,660,660',
'626,,660,,,,,,,,660,660,,660,660,660,660,660,660,660,,,660,660,,,,660',
'660,660,660,,,,,,660,,,,,,,,660,660,,660,660,660,660,660,660,660,660',
'660,660,660,660,661,661,660,,661,,,,,,,,661,661,,661,661,661,661,661',
'661,661,,,661,661,,,,661,661,661,661,,,,,,661,,,,,,,,661,661,,661,661',
'661,661,661,661,661,661,661,661,661,661,1124,1124,661,,1124,,,,,,,,1124',
'1124,,1124,1124,1124,1124,1124,1124,1124,,,1124,1124,,,,1124,1124,1124',
'1124,,,,,,1124,,,,,,,,1124,1124,,1124,1124,1124,1124,1124,1124,1124',
'1124,1124,1124,1124,1124,1128,1128,1124,,1128,,,,,,,,1128,1128,,1128',
'1128,1128,1128,1128,1128,1128,,,1128,1128,,,,1128,1128,1128,1128,,,',
',,1128,,,,,,,,1128,1128,,1128,1128,1128,1128,1128,1128,1128,1128,1128',
'1128,1128,1128,1129,1129,1128,,1129,,,,,,,,1129,1129,,1129,1129,1129',
'1129,1129,1129,1129,,,1129,1129,,,,1129,1129,1129,1129,,,,,,1129,,,',
',,,,1129,1129,,1129,1129,1129,1129,1129,1129,1129,1129,1129,1129,1129',
'1129,,1065,1129,1065,1065,1065,1065,1065,1067,,1067,1067,1067,1067,1067',
'765,1065,765,765,765,765,765,,1067,,,,,,,765,,,,,,,,1065,,,,,,,1067',
',1065,1065,1065,1065,,765,,1065,,1067,1067,,,,1067,,765,765,,,,765' ]
        racc_action_check = arr = ::Array.new(27481, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1407,   922,   nil,   507,   nil, 15461,   960,   859, 24171, 23915,
   858,   nil,   810,   801,   711,   845,   726,   230,   nil,   -85,
  7627,  1407, 25604,   863,   nil,   471,   nil,     5,  7768,  7878,
  8012,  8143,  8274,   nil,  4143, 22982, 23113,   nil,   756,   335,
   273,   830,  8667,  8798,   201,  9060,  9191,   581,  9322,   735,
   772,   770,   686,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  9594,   nil,  9735,  9866,  9997,   -15,   nil, 10128,
 10259,   nil,   nil, 10390, 23252, 23514, 23776,   nil,   nil,   nil,
   nil,   nil,   498,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   498,   nil,   nil,   718,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   852,   nil, 10533,   nil,
   nil,   nil,   nil, 10676, 10807, 10938, 11069, 11212,   nil,  1839,
   nil,   134,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   708,   nil,  2271,  5138,  5269,  5400,  5531,  5662,  5793, 26324,
 26385,   nil,   nil,  5924,  6055,  6186,   nil,   nil,   562,   -31,
   -27,   780,   247,   668,   723,   nil, 21926,  3999,   718,   nil,
 11343, 11474, 11605, 11736, 11867, 11998, 12129, 12260, 12391, 12522,
 12653, 12784, 12915, 13046, 13177, 13308, 13439, 13570, 13701, 13832,
 13963, 14094,   nil,   nil,   nil,   nil, 14225,   nil,   nil,   436,
   360,   293,   224,   623,   586,   582,   581,   557,   518,   nil,
   nil,   nil, 15318,   nil,   nil, 26446,   nil,   nil,   686, 15592,
 15723,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 15854,   nil,
  2703,   nil,   645,   644,   nil, 15985,   684, 16116,   nil,   nil,
 16247, 16378,   nil,   nil,   526,   nil, 16521,  1248,   608,   548,
   975,   539,   548,   464, 22450,  5007,   991,   968,   964,   538,
   958,   nil,   472,   370,   176,   290,   241,   nil,   nil,   nil,
   146,   192,    67, 22057,   nil,   383,   889,  3279,  3135,  1339,
   nil,  1332, 18629,   nil, 18760,  1252,  3135,   385, 25366,  1250,
  2559,  1263,  1407,  1263,   nil,   289,   457,  1295,  1275,   453,
  1300,   nil,   nil, 15191,   440,    14,    32, 19677,  4575,  4431,
   103,  1361,  1235,    64,    63,   841,  1313,   -18,  1332,   nil,
   nil,  1110,   966,   224,   nil,   802,   nil,  1245, 20070,   nil,
   nil,   322,   274,   211,   432,   427,   142,   -31,   419,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1237, 24043,   nil,
   nil,   nil,   nil,  1236,   nil,  1302,  1211, 20463,  1209,   nil,
   nil,  1196,   nil,   800,   148,  1262,   nil,   nil,  1551,   nil,
   nil,   nil,   nil,   nil,  1695,  1169,   nil,  1139,  1138,    91,
   417, 21390,   nil,   nil,   nil,   608,     0,  1165,   nil,   nil,
 21522, 21658,   nil,   nil,   nil,    55,   nil,  1159, 26507, 26263,
 19022,   144, 21249, 20856, 20594, 24383,  4719,  4575,   -49,  1014,
  1167,  1149,  1142,  1134,  4863,  5007,  5138,  4431,  4287,  4143,
  3999,  3855,  3711,  1269,   670,  3423,  2991,  2415,  2847,   nil,
   183,   nil, 15188,   nil,   nil,   nil,   nil, 15047,  1028,  1026,
   nil,   nil,   nil,  1013,   nil,   nil, 14773,   nil, 14642,   nil,
 14511,   nil,   198,   nil,   nil,   nil, 14368,  1536,   nil,  1001,
   995,   nil,   nil,   994, 22589,   975,  6317, 26568, 26629,   656,
  1013,   nil,   nil, 23383,   961,   nil,  8929, 26690, 26751,  7496,
  3567,  1839, 20725,  6579,  1070,  1065,   941,   939,   932,   920,
   911,   nil,   854,   855,   856,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   866,  1249,   nil,   nil,  7103,   nil,
   nil,   nil,   476,   nil,   nil,   nil,   995,   nil,   nil,   996,
   401,  6972,  1045,  1047,   932,   974,   nil,  6841,   nil,   nil,
  6710,   nil,   nil,   nil,   nil, 24386,   nil,  3855,  1061,   nil,
  3711,    59,  1070,  1072,    11,  1080,  7234,  9453, 26812, 26873,
    -1,   nil,   nil,   470,   nil, 26934, 26995, 21795,   nil,   nil,
   147,  2991,   nil,   nil,   nil,  1029,   nil,   nil,   nil,  1013,
   nil,   nil,   309,   nil,   204,   nil,   nil,  1010,   nil,  1012,
   nil,   nil,   nil, 24299,   nil, 14916,  1027, 16652, 16783, 17045,
 27056, 27117, 17188, 17319,   281,  1085, 17581, 17712, 17974, 18236,
  1095,   nil,   nil, 18367, 19546,  1099,   nil,   nil,   nil,   272,
   359,   278,   830,  1066,  1110,   nil,  1089,   nil,   nil,   534,
   179,   -92,   nil,   624,   nil,   nil, 26052, 26150,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1150,
   352,   nil,  1074, 25928,   nil,  1200,   nil,  1186,   -13,   nil,
   nil,   nil,  1104,  1112,  1216,   nil,  1098,   nil,  1145, 20201,
   nil,   nil, 20332,   nil,   165, 23645,  1105,   nil,  1113,    98,
   167,  1155,   166,   798,  1162,  1120, 22319,   nil,  1190,    20,
  1983,  1246, 21118,   nil,   nil,   nil,  1119,   nil,   nil,   520,
   nil, 25690,   nil, 25788,   nil, 27376,   nil, 20987,   nil,   961,
   nil,  1142,  1143,  1308,  1147,   nil,   nil,   nil,   nil,   nil,
   nil,  2127,   nil,   nil,   nil,   nil,   538,     0,  1189,   682,
   nil,  1309,   nil,   nil,   nil,   nil,   nil,  1320,  1330,   nil,
   nil,    21,  1210,    28,    36,     7,    27,  3423,  1254,   875,
   nil,  1223,  1551, 19939,   nil,  1348,   nil,   nil,   nil,   nil,
   nil,  1695,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1236, 19808,  1246,   330,   307,   388,   139,   nil,  2271, 19415,
   nil,  1249,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 19284, 19153,  6448, 18891,   308,  1339, 25167,    96,
   213, 24873, 25265,     7, 25363,   nil,  1089,   nil,  1281, 24775,
  9594, 26184,   nil,   nil,   nil,   nil,   nil,   nil, 18498,   nil,
   nil,  1291,   nil,   nil,  1291,   nil,   nil, 15152,  3279,   nil,
   nil,   nil,   nil,  1281,   150,   nil,   nil,  1407,   nil,  4287,
  1283,  1332,   nil,   nil,  1287,   nil,  1370,   nil,   nil,  1290,
  1299,   nil,  1300,  1301,   nil,  1302,   nil,   nil,  1313,  1173,
  2833,   nil,   nil,   nil,   nil,   nil,   nil,  1309,   -25,   150,
   nil, 18105,   218,   nil,   nil, 25461, 17843,  4719,    39,   499,
   nil,   508,   532,  4863,   nil,   452,   456,   287,   nil,   nil,
 17450, 16914,   nil,   nil,   nil,   nil,   -23,   469,   480, 25785,
   nil,   521,   -29,   539,   nil,   nil,   nil, 25687,   nil,   nil,
   216,   567,   575,   nil,   579,   582,   nil,   nil,   -41,   nil,
   nil,  2559,  1983,   nil,   596,   604,   618,   nil,   619,   623,
   629,   nil,   655,   636,   624, 22720,   nil,   nil,   nil,   nil,
  2127,   nil,   nil,   -11, 22188,   nil,   nil, 24582,   nil, 24680,
   nil, 24778,   nil, 24974,   nil,   nil,   nil,   nil,   647,   648,
  2847,  3567,  1135,   nil,   nil,    -9,   nil,   -10,   520,   -72,
   nil,   nil,   nil,    18,   nil,   nil,   nil,   808,   nil,   nil,
   nil,   735,   700,   -32,   nil,   701, 24677,  1043,   749,   201,
   nil,   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,  1146,
   nil,   nil,   nil, 26105,   nil, 27362,   nil, 27369,   nil,   nil,
   731, 22851,   580,   792,   nil,  1119,    38,     6,   690,   807,
     8,   nil,   741,   743,   745,   747,  2863,   896,   768,   874,
   416,   nil,   nil,   nil,  2415,   nil,  8536,  8405, 24579,   nil,
   nil,   nil,   nil,   nil,   755, 25069, 24481,   759,   nil,   nil,
   nil,   nil,   nil,   761,   nil,   nil,   777,   778,   782,   786,
   nil,   788,   nil,   722, 27178,   nil,   920,  7365, 27239, 27300,
    -1, 25072,   nil,   nil,   nil,   nil,   812,   nil,   nil,   nil,
  1279,   436,  2703,   nil,   nil,   nil, 26011,   815,   821, 24971,
   nil, 24484,   nil, 23160,   nil, 22497,   nil, 21453,   nil,   nil,
   867,   869,   nil,   839,    36,    -7,    69,    68,   841,   nil,
   nil,   518,   968,   nil,   974,   993,  1028,  1029,    35,   nil,
   nil,   nil,   nil, 25170,   nil,   nil,   nil,   nil,   796,   nil ]

racc_action_default = [
    -3,  -712,    -1,  -697,    -4,  -712,    -7,  -712,  -712,  -712,
  -712,   -30,  -712,  -712,   -35,  -712,  -712,  -299,   -47,  -699,
  -712,   -54,  -712,   -62,   -63,   -64,   -68,  -276,  -276,  -276,
  -312,  -339,  -340,   -80,   -12,   -84,   -92,   -94,  -712,  -596,
  -597,  -712,  -712,  -712,  -712,  -712,  -712,  -232,  -712,  -699,
  -608,  -608,  -248,  -290,  -291,  -292,  -293,  -294,  -295,  -296,
  -297,  -298,  -685,  -301,  -305,  -711,  -675,  -320,  -399,  -712,
  -712,   -56,   -56,  -697,  -712,  -712,  -712,  -341,  -342,  -344,
  -536,  -537,  -538,  -539,  -560,  -542,  -543,  -562,  -564,  -547,
  -552,  -556,  -558,  -574,  -575,  -576,  -560,  -578,  -580,  -581,
  -582,  -583,  -683,  -585,  -586,  -684,  -588,  -589,  -590,  -591,
  -592,  -593,  -594,  -595,  -600,  -601,  -712,    -2,  -698,  -707,
  -708,  -709,    -6,  -712,  -712,  -712,  -712,  -712,    -8,    -3,
   -18,  -712,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,
  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,
   -23,  -130,   -12,  -712,  -712,  -712,  -712,  -712,  -266,  -712,
  -712,  -695,  -696,  -712,  -712,  -699,  -700,   -51,  -712,  -596,
  -597,  -712,  -299,  -712,  -712,  -238,  -712,   -12,  -712,   -52,
  -215,  -216,  -712,  -712,  -712,  -712,  -712,  -712,  -712,  -712,
  -712,  -712,  -712,  -712,  -712,  -712,  -712,  -712,  -712,  -712,
  -712,  -712,  -249,  -250,  -251,  -252,  -712,   -58,   -59,  -712,
  -123,  -124,  -163,  -164,  -165,  -181,  -186,  -193,  -196,  -596,
  -597,  -673,  -712,  -408,  -410,  -712,  -693,  -694,   -69,  -266,
  -712,  -319,  -414,  -423,  -425,   -75,  -420,   -76,  -699,   -77,
  -255,  -271,  -280,  -280,  -275,  -712,  -281,  -712,  -560,  -677,
  -712,  -712,   -78,   -79,  -697,   -13,  -712,   -16,  -712,   -82,
   -12,  -699,  -712,   -85,   -88,   -12,  -100,  -101,  -712,  -712,
  -108,  -312,  -315,  -699,  -712,  -608,  -608,  -339,  -340,  -343,
  -421,  -712,   -90,  -712,   -96,  -309,  -712,  -217,  -218,  -579,
  -226,  -227,  -712,  -239,  -712,  -607,   -12,  -631,  -631,  -607,
   -12,   -12,  -303,  -699,  -256,  -704,  -704,  -712,  -712,  -704,
  -712,  -321,  -322,  -631,   -55,  -712,  -712,  -712,   -12,   -12,
  -697,  -712,  -698,  -596,  -597,  -712,  -712,  -299,  -712,  -354,
  -355,  -118,  -119,  -712,  -121,  -712,  -299,  -604,  -712,  -335,
  -540,  -712,  -712,  -712,  -712,  -712,  -712,  -712,  -712,  1190,
    -5,  -710,   -24,   -25,   -26,   -27,   -28,  -712,  -712,   -20,
   -21,   -22,  -131,  -712,   -31,   -34,  -286,  -712,  -712,  -285,
   -32,  -712,   -36,  -712,  -299,   -44,   -46,  -204,  -260,  -281,
   -48,   -49,   -37,  -205,  -260,  -699,  -267,  -280,  -280,  -686,
  -687,  -276,  -418,  -688,  -689,  -687,  -686,  -276,  -417,  -419,
  -688,  -689,   -43,  -212,   -50,  -699,  -318,  -712,  -712,  -712,
  -266,  -309,  -712,  -712,  -712,  -712,  -213,  -214,  -219,  -220,
  -221,  -222,  -223,  -224,  -228,  -229,  -230,  -231,  -233,  -234,
  -235,  -236,  -237,  -240,  -241,  -242,  -243,  -699,  -253,   -60,
  -699,  -429,  -276,  -686,  -687,   -66,   -70,  -632,  -699,  -699,
  -277,  -427,  -429,  -699,  -314,  -272,  -712,  -273,  -712,  -278,
  -712,  -282,  -712,  -680,  -682,   -11,  -698,   -15,   -17,  -699,
   -81,  -307,   -97,   -86,  -712,  -699,  -266,  -712,  -712,  -107,
  -712,  -607,  -579,  -712,   -93,   -98,  -712,  -712,  -712,  -712,
  -254,  -244,  -712,  -712,  -528,  -712,  -699,  -699,  -672,  -672,
  -672,  -614,  -616,  -616,  -616,  -630,  -632,  -633,  -634,  -635,
  -636,  -637,  -638,  -639,  -640,  -712,  -642,  -644,  -646,  -651,
  -653,  -654,  -657,  -662,  -664,  -665,  -667,  -668,  -669,  -712,
  -712,  -712,  -712,  -712,  -699,  -712,  -257,  -706,  -705,  -259,
  -706,  -310,  -311,  -676,  -400,  -631,  -403,   -12,  -345,  -346,
   -12,  -712,  -712,  -712,  -712,  -712,  -712,  -266,  -712,  -712,
  -309,   -56,  -118,  -119,  -120,  -712,  -712,  -266,  -331,  -602,
  -712,   -12,  -541,  -561,  -566,  -712,  -568,  -544,  -563,  -712,
  -565,  -546,  -712,  -549,  -712,  -551,  -554,  -712,  -555,  -712,
  -577,    -9,   -19,  -712,   -29,  -712,  -289,  -712,  -712,  -266,
  -712,  -712,  -712,  -712,  -422,  -712,  -268,  -270,  -712,  -712,
   -71,  -265,  -415,  -712,  -712,   -73,  -416,  -317,  -701,  -686,
  -687,  -686,  -687,  -699,   -53,  -448,  -450,  -452,  -455,  -509,
  -462,  -465,  -468,  -502,  -507,  -508,  -712,  -712,  -512,  -513,
  -514,  -515,  -516,  -517,  -518,  -519,  -520,  -399,  -522,  -712,
  -712,  -526,  -712,  -712,  -674,  -712,  -430,   -65,  -411,  -427,
  -262,  -263,  -712,  -389,  -712,  -313,  -280,  -279,  -283,  -712,
  -678,  -679,  -712,   -14,   -83,  -712,   -89,   -95,  -699,  -686,
  -687,  -264,  -690,  -106,  -712,   -91,  -712,  -211,  -225,  -699,
  -246,  -711,  -711,  -337,  -605,  -606,  -712,  -611,  -612,  -712,
  -613,  -712,  -623,  -712,  -626,  -712,  -628,  -712,  -356,  -712,
  -358,  -360,  -363,  -366,  -699,  -645,  -655,  -656,  -666,  -670,
  -609,  -247,  -338,  -302,  -304,  -306,  -704,  -712,  -699,  -711,
  -347,  -711,   -57,  -348,  -349,  -325,  -326,  -712,  -712,  -435,
  -328,  -712,  -699,  -686,  -687,  -690,  -308,   -12,  -118,  -119,
  -122,  -699,   -12,  -712,  -333,  -712,  -567,  -570,  -571,  -572,
  -573,   -12,  -545,  -548,  -550,  -553,  -557,  -559,  -132,   -33,
  -287,  -712,  -699,  -686,  -687,  -687,  -686,   -45,  -261,  -712,
  -702,  -280,   -39,  -207,   -40,  -208,   -72,   -41,  -210,   -42,
  -209,   -74,  -712,  -712,  -712,  -712,  -422,  -712,  -712,  -453,
  -454,  -712,  -712,  -712,  -712,  -464,  -712,  -467,  -712,  -712,
  -505,  -506,  -510,  -511,  -521,  -523,  -119,  -524,  -712,   -61,
  -409,  -389,  -413,  -412,  -712,  -424,  -390,  -699,   -12,  -426,
  -274,  -284,  -681,   -87,  -422,   -99,  -316,  -711,  -352,   -12,
  -529,  -711,  -530,  -531,  -672,  -652,  -657,  -671,  -615,  -616,
  -616,  -643,  -616,  -616,  -663,  -616,  -640,  -658,  -699,  -712,
  -712,  -365,  -641,  -258,  -401,  -404,  -406,  -393,  -712,  -712,
  -350,  -712,  -712,  -327,  -329,  -712,  -712,   -12,  -422,  -712,
  -422,  -712,  -712,   -12,  -336,  -712,  -288,  -422,   -38,  -206,
  -269,  -712,  -449,  -451,  -458,  -461,  -470,  -699,  -699,  -471,
  -477,  -712,  -482,  -488,  -490,  -492,  -493,  -496,  -497,  -560,
  -500,  -699,  -699,  -525,  -699,  -699,  -560,  -703,  -699,  -503,
  -504,  -245,   -12,   -67,  -672,  -672,  -672,  -371,  -373,  -373,
  -373,  -388,  -712,  -699,  -640,  -648,  -649,  -660,  -428,   -10,
   -12,  -535,  -353,  -712,  -712,  -533,  -610,  -712,  -619,  -712,
  -621,  -712,  -624,  -712,  -627,  -629,  -357,  -359,  -361,  -364,
   -12,   -12,  -712,  -402,  -323,  -712,  -324,  -712,  -440,  -443,
  -446,  -447,  -283,  -711,  -330,  -332,  -603,  -712,  -569,  -456,
  -457,  -486,  -472,  -475,  -478,  -480,  -712,  -489,  -495,  -712,
  -499,  -501,  -459,  -460,  -463,  -466,  -712,  -469,  -431,  -712,
  -368,  -369,  -370,  -379,  -381,  -712,  -384,  -712,  -386,  -391,
  -712,  -712,  -647,  -712,  -534,   -12,  -596,  -597,  -712,  -712,
  -299,  -532,  -616,  -616,  -616,  -616,  -712,  -712,  -712,  -712,
  -699,  -395,  -397,  -398,   -12,  -436,  -712,  -712,  -444,  -432,
  -433,  -434,  -334,  -479,  -473,  -712,  -712,  -483,  -484,  -487,
  -491,  -494,  -498,  -672,  -650,  -372,  -373,  -373,  -373,  -373,
  -661,  -373,  -392,  -659,  -712,  -309,  -528,  -266,  -712,  -712,
  -309,  -712,  -617,  -620,  -622,  -625,  -362,  -405,  -407,  -394,
  -712,  -711,   -12,  -441,  -442,  -445,  -712,  -476,  -481,  -712,
  -367,  -712,  -376,  -712,  -378,  -712,  -382,  -712,  -385,  -387,
  -308,  -690,  -527,  -699,  -686,  -687,  -690,  -308,  -616,  -396,
  -351,  -711,  -474,  -485,  -373,  -373,  -373,  -373,  -422,  -618,
  -437,  -438,  -439,  -712,  -374,  -377,  -380,  -383,  -373,  -375 ]

clist = [
'40,401,615,364,284,40,372,135,135,224,445,268,371,408,301,301,301,219',
'751,335,335,135,280,323,267,798,286,322,292,296,451,457,429,430,40,327',
'327,130,211,354,624,121,929,302,302,302,375,376,378,379,380,117,730',
'544,506,227,138,138,335,335,335,574,574,911,40,360,349,6,914,768,285',
'517,6,897,384,280,280,574,365,596,599,508,15,603,336,336,342,15,442',
'607,610,867,722,466,462,774,502,1017,339,339,412,413,414,415,374,374',
'436,2,374,436,684,121,118,932,989,436,15,888,40,321,128,381,1019,336',
'336,336,1003,40,1091,40,319,362,928,727,730,727,1093,339,339,339,303',
'303,303,122,397,399,15,1120,288,295,297,556,590,355,359,1042,565,565',
'374,374,374,374,642,644,1107,555,514,606,715,592,593,999,565,958,972',
'366,369,509,975,724,638,640,643,643,910,6,912,906,733,530,957,971,210',
'974,416,390,6,425,418,475,15,730,301,792,269,423,757,758,760,15,713',
'15,40,986,719,653,517,352,367,461,452,872,873,1147,1148,522,428,428',
'718,468,322,992,281,1120,368,797,417,40,299,312,313,388,1108,628,736',
'557,1169,1031,424,435,440,441,435,745,1093,361,410,594,435,464,465,363',
'683,768,1172,1017,812,921,943,631,286,1018,810,301,301,982,991,993,1090',
'451,457,604,301,727,727,924,787,1020,1136,918,1116,664,970,970,15,1021',
'15,970,501,15,884,1108,1108,302,511,15,512,881,335,574,990,302,914,322',
'499,911,40,500,322,15,40,1099,1027,540,327,40,1180,335,738,537,935,545',
'1142,677,1028,292,1030,1070,952,953,861,296,1108,327,862,1173,864,547',
'741,866,360,869,121,595,611,1100,40,877,741,1109,40,40,525,542,1110',
'911,970,1111,714,901,1,612,613,336,533,1055,720,721,40,40,400,725,402',
'527,403,404,618,339,405,986,406,986,336,986,1170,979,980,734,15,788',
'303,407,15,737,565,529,339,15,303,802,535,816,374,768,768,821,319,135',
'121,811,824,319,824,526,754,755,813,1145,614,741,1082,528,909,630,660',
'665,846,741,15,905,815,851,15,15,1114,893,,652,,,,832,671,,301,,,,676',
'911,15,15,784,,,574,138,574,461,452,,451,457,,,706,,986,970,986,,986',
',986,730,,1117,712,1118,,906,,,1181,890,,956,956,510,956,923,,,671,978',
',513,995,,986,973,,,,,937,,,335,,301,,545,,,907,40,335,907,856,,545',
',,327,,865,461,452,842,844,,,327,847,849,,461,452,,436,443,1006,,,,',
'463,,,436,436,,,,436,436,727,,,1029,902,670,,1174,,,,675,,768,768,1182',
'336,894,,,749,,,1162,994,336,,,,,339,807,,789,301,1048,791,,,339,40',
'15,890,40,301,,,,,,896,461,452,,941,,717,461,,726,452,780,801,,40,1060',
'1061,1062,,,,,904,,,922,301,,874,,,938,793,,,135,,1101,40,987,940,,',
'461,452,40,883,,,,,814,,,,,665,,,,,947,995,665,868,828,995,,995,,995',
',15,903,,15,435,,,706,706,882,,,138,879,435,435,,955,786,435,435,948',
'574,135,15,,267,,1075,,335,,,829,545,,,,954,665,837,335,436,,956,895',
'327,,15,,1094,15,1095,671,,15,676,327,,,,15,15,1037,,,15,15,,,,,1150',
',,,428,,994,,994,985,995,,995,,995,841,995,927,,,,,,336,,1016,,,,942',
'1058,665,,,336,,,339,,939,665,,995,,,463,40,443,339,,,40,,945,,,1052',
'1053,,1054,40,665,,,1039,1040,,907,,1089,,987,,987,1001,987,,,1005,',
',,762,764,766,1057,,374,,665,,,,,994,,,706,,,706,706,,706,,,,,706,706',
'706,,,435,,,927,,,747,998,,,,,1049,,40,15,,,1002,1056,15,,,,,40,,,,15',
',,,,1025,,13,,,,,13,,,,1163,987,15,987,913,987,915,987,,,,1033,,,701',
',706,,40,,741,,,1113,40,13,,985,,985,,985,,987,,,,,,,706,,665,665,,665',
'868,374,706,,,15,,,,13,,,,,335,1036,15,40,927,389,,,,335,,,,27,1074',
',280,,27,,,40,,843,845,1077,,,848,850,1178,,,27,1088,,,,,,15,40,40,27',
'27,27,15,27,,13,,,,,,985,,985,13,985,13,985,,,,336,,706,988,,,1064,1066',
'1068,336,,335,27,,339,,,27,27,,15,27,985,339,1126,,,280,,1143,1144,40',
',,,1128,1139,,15,,,,,1141,,,,,,,40,,,,706,,,,15,15,,706,706,,,,27,301',
',,,27,27,27,27,27,336,27,13,461,431,,,431,461,452,,374,374,431,339,1171',
',,,,,,40,,,,706,13,,706,,,,665,701,701,,15,,,,,,,,,,1083,,1084,,1085',
',949,,,15,,1152,1154,1156,1158,,1159,,370,843,845,850,848,1008,1010',
',1012,1014,,1015,,,,,,,,27,27,27,27,27,27,27,,,,,27,27,27,,,,,,,15,1119',
'13,1121,,27,13,,,,,13,1184,1185,1186,1187,,,,,,,,,,,1189,,,,,,,,,,,',
',,,,13,,,,13,13,,,27,,,,,,,27,27,,,949,,,13,13,27,1168,,,,,,,,,,,,,',
',,,27,,,1175,27,1176,,1177,701,27,,701,701,,701,,,,,701,701,701,,,426',
'439,,,,,,,,,,1188,,,,,27,,,,27,27,,,,,,,,,,1132,1133,1134,1135,,,27',
'27,27,,,,,,,,,,,,,,,,,,,27,,,701,,,,,,,,,,,,,,,,,,,,,,,,701,,,,,,,519',
'701,521,,,523,524,,,,,,13,,,,,,,,,,,,,1179,,,,,,,,,,,,,27,16,,,,,16',
',,,,,,,,,,,,,,228,,,,,,,,,,228,228,228,,16,328,328,,,,,701,,,,,,,,,',
',,,13,27,,13,,,,,,,16,27,,,,228,228,,,228,385,395,395,,13,,,27,,656',
',,,,,,,,,701,,,,,,,701,701,13,,,431,,,,13,,,,,,431,431,,16,,431,431',
',228,228,228,228,16,,16,,,,,,,27,,,27,,701,,,701,,27,,,,,,,,,,27,,,702',
'27,,,,,,,,,,,,728,,370,,731,,,,,,,,27,,,27,27,,,27,,,,,,27,27,,,,27',
'27,,,,,,,,,16,228,433,228,228,433,228,,,,,433,228,228,,,,,,,,,775,,',
'16,,,,,,,,,,,,,,,,728,13,,370,,,13,,,,,,,,,13,,,,439,,,,,,,,,,228,,',
',431,,,228,228,,,703,,,,,228,,,,,,,,,,,,,,,830,,,16,,,,16,,728,370,328',
'16,,,,,,,,,,13,27,,,,,27,27,328,,,13,,,,27,,,,,,16,,,,16,16,,,,,,,27',
',,,,,,,,228,16,16,702,702,,,13,891,,,892,,13,,,,,,,,228,,,,,,,,,,900',
',,,,,,,,27,,,,,,917,,,,,27,13,,,,,,,,,,,,,,,,,,13,,17,,1081,,,17,,,',
',,27,,,,,,27,13,13,,228,,27,,,,,,,,,,704,17,330,330,,946,,,,,,,,,,,',
',,,,,,,,,,,,27,,17,703,703,,705,,,,,13,387,396,396,16,,,27,,,,,328,',
'228,,,,,13,702,328,,702,702,,702,27,27,,228,702,702,702,,,,,,,,,,,39',
'17,,,,39,,,,,17,,17,,,,,,,,,,279,13,,,1032,,,,,,,,39,326,326,,27,,370',
'16,,,16,,,,,,,228,,702,,,,27,,27,27,228,,,39,16,,,,,,,,,383,279,279',
'702,,,,,,,,702,,,,16,27,,433,228,,17,16,434,,,434,,433,433,,27,434,433',
'433,,703,,,703,703,,703,,39,,17,703,703,703,,,,39,,39,,,,,,,,704,704',
',,,,,,,,,,,,,,,,,,,,,,,,,702,,,,,328,,,705,705,,,,,,,328,,,,,,,703,',
',,,,,,,,,,17,,,,17,,,,330,17,,,703,39,,,,702,,,703,,,,702,702,,330,',
',,,,,,,,,39,,17,,16,,17,17,,16,228,,,,,,,,16,,,,,,17,17,,702,,,702,',
',700,,,433,,,,,,,,,,,,,,,,699,,,,,,,,,703,704,,,704,704,,704,,,,,704',
'704,704,,,,39,,,,39,,16,,326,39,,,,,,,,16,705,,,705,705,,705,,,326,',
'705,705,705,,,703,,,,30,,39,703,703,30,39,39,,,,228,,,,,,16,,,30,,704',
'16,39,39,698,,,,30,30,30,,30,,,,,,,,,,703,,704,703,,,,,,,704,17,,705',
',,,,16,330,30,,,,,30,30,,330,30,,1072,,,,,16,705,,,1078,,,,,705,,,,',
',,,,,,16,16,,,,,,,,,,,,,,,,,30,,,,,30,30,30,30,30,,30,,,,704,,,17,700',
'700,17,,,,,,,,,,,,1123,,,,16,699,699,,,17,,,,820,,,,705,,,,39,,16,,228',
'228,,,326,,,,17,704,,434,,326,,17,704,704,,,,434,434,,,,434,434,,,,228',
',,,,30,30,30,30,30,30,30,,705,,16,30,30,30,,705,705,,,,,704,,,704,30',
',,,,,,,,,698,698,,,,,39,,,39,,,,,,,,330,,,,705,,,705,,,,330,,39,,,,',
'30,,,,,,,30,30,,,,,,,,30,700,,39,700,700,,700,,,39,,700,700,700,,,,30',
',699,,30,699,699,,699,30,,,,699,699,699,,,,,17,,,,,17,,,,,,,,,17,,,',
',,30,,,,30,30,,,,,,,434,,,,,,,,700,30,30,30,,326,,,,,,,,,,,326,,,699',
',,30,,700,,,,,,,,700,698,,,698,698,,698,,17,,699,698,698,698,,,,,699',
'17,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,39,,,,,,,,17,39,,,30,,17,,,,,,,,,',
',,,,698,700,,,,,,,,,,,,,,,,,,,699,,,,698,17,,,,,,,698,,,,,,396,,30,',
',17,,,,1080,39,,30,,,700,,,,,,39,700,700,,17,17,,30,,,,,,699,,,,,,,699',
'699,,,,,,,,,,,,,,,,,39,,,,700,,39,700,,,,,,,698,,,396,,,,17,,699,30',
',699,30,,,,,,,30,,,,,,17,,,,30,39,,,30,,,,,,,,,,279,,,,,39,,,698,1076',
',,,,30,698,698,30,30,,,30,,,,39,39,30,30,,17,,30,30,,,,,,235,,,,,,,',
',,300,300,300,,,,,698,,,698,,347,348,,350,351,,353,,,,,,,,,279,,,,39',
',,,300,300,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,39,,,,,,,,,,,,,,,,,,,30,,,,,30,30,,,,,,,,30,,,,,,,,,,,,,,,,,,30',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,300,438,,,444,300,,,,,444,,,,,30,,',
',,,,,235,,,30,476,477,478,479,480,481,482,483,484,485,486,487,488,489',
'490,491,492,493,494,495,496,497,,,,,498,,,,,30,,,,,,30,,,,,,30,,,,,',
'300,300,,,,,,,,300,,,,,,,300,,300,,,300,300,,,,,,,,,,,30,,,,,,,,,,,',
',,,,,,30,,,,,,,,,,,,550,,551,,,,,,30,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,300,,,,,,,30,,30,30,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,30,,,300,,444,444,444,,,,,,,,30,,,,,,,,,,,,,,,,',
',,,,,,,,348,,,,,,,,,300,,300,,300,,,,,,,,,,,,,,,,300,,,,,,,,,,444,,',
'748,,,,750,,,,,,,,,,,,,,,,,,,,,,,,,300,,,,,,,,,,,,,781,,,,,,300,,,300',
',,,,,,,,,,,,,,,300,300,,,,,,,,,,300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,300',
'444,300,,,,838,,,300,300,444,444,,,,444,444,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,300,,,300,,,,,,,,,,,,,,,,,,,,300,,,,,',
',,,,,,,,,300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,300,,,,,,,,444,,,,,,,,,,,,,444,444,444,444,,,,,,,,,,,,,,,,,',
',,,,,981,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,300',
',,,,,,,,,,,,,300,444,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,300' ]
        racc_goto_table = arr = ::Array.new(4171, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'68,187,108,83,147,68,105,71,71,34,30,40,103,187,48,48,48,32,11,43,43',
'71,68,64,42,109,32,10,87,87,51,51,23,23,68,68,68,16,16,34,69,112,107',
'84,84,84,18,18,38,38,18,4,223,66,53,21,73,73,43,43,43,214,214,215,68',
'113,76,7,219,121,46,90,7,12,68,68,68,214,84,85,85,30,28,85,44,44,65',
'28,27,106,106,175,54,62,27,122,51,120,79,79,18,18,18,18,25,25,19,2,25',
'19,36,112,6,12,134,19,28,136,68,61,8,4,123,44,44,44,192,68,140,68,60',
'7,138,91,223,91,141,79,79,79,86,86,86,5,70,70,28,220,52,52,52,146,146',
'78,78,180,209,209,25,25,25,25,199,199,181,9,62,146,150,9,9,13,209,166',
'166,86,86,88,166,150,200,200,200,200,135,7,135,188,15,62,164,164,17',
'164,7,20,7,24,26,37,28,223,48,39,45,10,128,128,128,28,47,28,68,129,56',
'74,90,80,82,71,87,189,189,181,181,187,84,84,89,32,10,138,101,220,102',
'108,2,68,59,59,59,110,180,111,66,88,140,166,21,21,25,25,21,66,141,114',
'5,115,21,25,25,116,30,121,181,120,117,121,118,119,32,124,69,48,48,136',
'125,132,139,51,51,142,48,91,91,143,145,148,123,122,134,31,188,188,28',
'149,28,188,151,28,54,180,180,84,153,28,154,157,43,214,135,84,219,10',
'46,215,68,25,10,28,68,158,159,34,68,68,160,43,30,32,161,64,162,62,163',
'87,165,138,168,170,171,87,180,68,172,180,176,32,51,177,113,178,112,34',
'18,12,68,69,51,183,68,68,4,76,184,215,188,185,62,191,1,10,10,44,65,175',
'62,62,68,68,195,62,196,7,197,198,32,79,201,129,202,129,44,129,107,189',
'189,62,28,146,86,203,28,62,209,61,79,28,86,30,61,204,25,121,121,205',
'60,71,112,30,200,60,200,6,62,62,208,164,4,51,135,8,213,25,32,34,53,51',
'28,217,9,53,28,28,218,66,,16,,,,30,87,,48,,,,87,215,28,28,62,,,214,73',
'214,71,87,,51,51,,,68,,129,188,129,,129,,129,223,,135,34,135,,188,,',
'12,90,,36,36,59,36,85,,,87,36,,59,216,,129,69,,,,,106,,,43,,48,,64,',
',130,68,43,130,31,,64,,,68,,31,71,87,27,27,,,68,27,27,,71,87,,19,75',
'128,,,,,75,,,19,19,,,,19,19,91,,,36,23,52,,135,,,,52,,121,121,109,44',
'31,,,25,,,11,214,44,,,,,79,38,,10,48,36,10,,,79,68,28,90,68,48,,,,,',
'62,71,87,,9,,52,71,,86,87,112,84,,68,128,128,128,,,,,127,,,62,48,,105',
',,31,112,,,71,,108,68,130,31,,,71,87,68,103,,,,,112,,,,,34,,,,,31,216',
'34,34,16,216,,216,,216,,28,83,,28,21,,,68,68,147,,,73,40,21,21,,31,86',
'21,21,27,214,71,28,,42,,106,,43,,,7,64,,,,62,34,7,43,19,,36,64,68,,28',
',106,28,106,87,,28,87,68,,,,28,28,9,,,28,28,,,,,128,,,,84,,214,,214',
'127,216,,216,,216,86,216,34,,,,,,44,,62,,,,18,9,34,,,44,,,79,,10,34',
',216,,,75,68,75,79,,,68,,10,,,31,31,,31,68,34,,,62,62,,130,,9,,130,',
'130,83,130,,,83,,,,212,212,212,62,,25,,34,,,,,214,,,68,,,68,68,,68,',
',,,68,68,68,,,21,,,34,,,75,10,,,,,187,,68,28,,,10,187,28,,,,,68,,,,28',
',,,,18,,22,,,,,22,,,,30,130,28,130,133,130,133,130,,,,10,,,96,,68,,68',
',51,,,127,68,22,,127,,127,,127,,130,,,,,,,68,,34,34,,34,34,25,68,,,28',
',,,22,,,,,43,112,28,68,34,22,,,,43,,,,55,10,,68,,55,,,68,,75,75,68,',
',75,75,31,,,55,10,,,,,,28,68,68,55,55,55,28,55,,22,,,,,,127,,127,22',
'127,22,127,,,,44,,68,133,,,131,131,131,44,,43,55,,79,,,55,55,,28,55',
'127,79,10,,,68,,18,18,68,,,,32,34,,28,,,,,10,,,,,,,68,,,,68,,,,28,28',
',68,68,,,,55,48,,,,55,55,55,55,55,44,55,22,71,22,,,22,71,87,,25,25,22',
'79,10,,,,,,,68,,,,68,22,,68,,,,34,96,96,,28,,,,,,,,,,133,,133,,133,',
'75,,,28,,131,131,131,131,,131,,81,75,75,75,75,212,212,,212,212,,212',
',,,,,,,55,55,55,55,55,55,55,,,,,55,55,55,,,,,,,28,133,22,133,,55,22',
',,,,22,131,131,131,131,,,,,,,,,,,131,,,,,,,,,,,,,,,,22,,,,22,22,,,55',
',,,,,,55,55,,,75,,,22,22,55,133,,,,,,,,,,,,,,,,,55,,,133,55,133,,133',
'96,55,,96,96,,96,,,,,96,96,96,,,81,81,,,,,,,,,,133,,,,,55,,,,55,55,',
',,,,,,,,212,212,212,212,,,55,55,55,,,,,,,,,,,,,,,,,,,55,,,96,,,,,,,',
',,,,,,,,,,,,,,,,96,,,,,,,81,96,81,,,81,81,,,,,,22,,,,,,,,,,,,,212,,',
',,,,,,,,,,55,29,,,,,29,,,,,,,,,,,,,,,29,,,,,,,,,,29,29,29,,29,29,29',
',,,,96,,,,,,,,,,,,,22,55,,22,,,,,,,29,55,,,,29,29,,,29,29,29,29,,22',
',,55,,81,,,,,,,,,,96,,,,,,,96,96,22,,,22,,,,22,,,,,,22,22,,29,,22,22',
',29,29,29,29,29,,29,,,,,,,55,,,55,,96,,,96,,55,,,,,,,,,,55,,,97,55,',
',,,,,,,,,,81,,81,,81,,,,,,,,55,,,55,55,,,55,,,,,,55,55,,,,55,55,,,,',
',,,,29,29,29,29,29,29,29,,,,,29,29,29,,,,,,,,,81,,,29,,,,,,,,,,,,,,',
',81,22,,81,,,22,,,,,,,,,22,,,,81,,,,,,,,,,29,,,,22,,,29,29,,,98,,,,',
'29,,,,,,,,,,,,,,,81,,,29,,,,29,,81,81,29,29,,,,,,,,,,22,55,,,,,55,55',
'29,,,22,,,,55,,,,,,29,,,,29,29,,,,,,,55,,,,,,,,,29,29,29,97,97,,,22',
'81,,,81,,22,,,,,,,,29,,,,,,,,,,81,,,,,,,,,55,,,,,,81,,,,,55,22,,,,,',
',,,,,,,,,,,,22,,33,,22,,,33,,,,,,55,,,,,,55,22,22,,29,,55,,,,,,,,,,99',
'33,33,33,,81,,,,,,,,,,,,,,,,,,,,,,,,55,,33,98,98,,100,,,,,22,33,33,33',
'29,,,55,,,,,29,,29,,,,,22,97,29,,97,97,,97,55,55,,29,97,97,97,,,,,,',
',,,,67,33,,,,67,,,,,33,,33,,,,,,,,,,67,22,,,81,,,,,,,,67,67,67,,55,',
'81,29,,,29,,,,,,,29,,97,,,,55,,55,55,29,,,67,29,,,,,,,,,67,67,67,97',
',,,,,,,97,,,,29,55,,29,29,,33,29,33,,,33,,29,29,,55,33,29,29,,98,,,98',
'98,,98,,67,,33,98,98,98,,,,67,,67,,,,,,,,99,99,,,,,,,,,,,,,,,,,,,,,',
',,,,97,,,,,29,,,100,100,,,,,,,29,,,,,,,98,,,,,,,,,,,,33,,,,33,,,,33',
'33,,,98,67,,,,97,,,98,,,,97,97,,33,,,,,,,,,,,67,,33,,29,,33,33,,29,29',
',,,,,,,29,,,,,,33,33,,97,,,97,,,95,,,29,,,,,,,,,,,,,,,,94,,,,,,,,,98',
'99,,,99,99,,99,,,,,99,99,99,,,,67,,,,67,,29,,67,67,,,,,,,,29,100,,,100',
'100,,100,,,67,,100,100,100,,,98,,,,58,,67,98,98,58,67,67,,,,29,,,,,',
'29,,,58,,99,29,67,67,93,,,,58,58,58,,58,,,,,,,,,,98,,99,98,,,,,,,99',
'33,,100,,,,,29,33,58,,,,,58,58,,33,58,,29,,,,,29,100,,,29,,,,,100,,',
',,,,,,,,29,29,,,,,,,,,,,,,,,,,58,,,,,58,58,58,58,58,,58,,,,99,,,33,95',
'95,33,,,,,,,,,,,,29,,,,29,94,94,,,33,,,,33,,,,100,,,,67,,29,,29,29,',
',67,,,,33,99,,33,,67,,33,99,99,,,,33,33,,,,33,33,,,,29,,,,,58,58,58',
'58,58,58,58,,100,,29,58,58,58,,100,100,,,,,99,,,99,58,,,,,,,,,,93,93',
',,,,67,,,67,,,,,,,,33,,,,100,,,100,,,,33,,67,,,,,58,,,,,,,58,58,,,,',
',,,58,95,,67,95,95,,95,,,67,,95,95,95,,,,58,,94,,58,94,94,,94,58,,,',
'94,94,94,,,,,33,,,,,33,,,,,,,,,33,,,,,,58,,,,58,58,,,,,,,33,,,,,,,,95',
'58,58,58,,67,,,,,,,,,,,67,,,94,,,58,,95,,,,,,,,95,93,,,93,93,,93,,33',
',94,93,93,93,,,,,94,33,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,67,,,,,,,,33,67',
',,58,,33,,,,,,,,,,,,,,93,95,,,,,,,,,,,,,,,,,,,94,,,,93,33,,,,,,,93,',
',,,,33,,58,,,33,,,,33,67,,58,,,95,,,,,,67,95,95,,33,33,,58,,,,,,94,',
',,,,,94,94,,,,,,,,,,,,,,,,,67,,,,95,,67,95,,,,,,,93,,,33,,,,33,,94,58',
',94,58,,,,,,,58,,,,,,33,,,,58,67,,,58,,,,,,,,,,67,,,,,67,,,93,67,,,',
',58,93,93,58,58,,,58,,,,67,67,58,58,,33,,58,58,,,,,,35,,,,,,,,,,35,35',
'35,,,,,93,,,93,,35,35,,35,35,,35,,,,,,,,,67,,,,67,,,,35,35,,,,,,,,,',
',,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,,,,,,,,',
',,,,,,,58,,,,,58,58,,,,,,,,58,,,,,,,,,,,,,,,,,,58,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,35,35,,,35,35,,,,,35,,,,,58,,,,,,,,35,,,58,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,35,,,,,58',
',,,,,58,,,,,,58,,,,,,35,35,,,,,,,,35,,,,,,,35,,35,,,35,35,,,,,,,,,,',
'58,,,,,,,,,,,,,,,,,,58,,,,,,,,,,,,35,,35,,,,,,58,58,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,58,,,,,,,,,,,,35,,,,,,,58,,58,58',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,58,,,35,,35,35,35,,,,,,,,58,,,,,,,,,,,',
',,,,,,,,,,,,,35,,,,,,,,,35,,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,,35,,,35',
',,,35,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,35,,,,,,35,,,35,,,,,,,',
',,,,,,,,35,35,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,35,,,,35',
',,35,35,35,35,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,35,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,35,,,,',
',,,,,,,,35,35,35,35,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,35,35,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(4171, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   370,   107,   nil,    48,   138,   109,    67,   113,  -191,
    -7,  -536,  -678,  -726,   nil,  -338,    29,   183,   -23,  -108,
   121,    35,   910,  -181,   -16,    35,    68,  -129,    82,  1463,
  -208,  -154,     1,  1912,   -10,  3043,  -365,   -40,   -23,  -408,
   -11,   nil,     2,   -16,    49,   182,    45,  -289,   -16,   nil,
   nil,  -189,   121,  -234,  -419,   992,  -291,   nil,  2383,   208,
    96,    85,  -132,   nil,   -12,    50,  -290,  2029,     0,  -353,
    69,    -1,   nil,    48,  -207,   334,    22,   nil,   103,    63,
   170,  1119,   153,   -62,    13,  -286,   110,     1,  -112,  -274,
  -232,  -383,   nil,  1934,  1843,  1824,   458,  1147,  1281,  1470,
  1505,   210,   168,   -55,   nil,   -62,  -286,  -747,  -379,  -589,
   167,  -154,    38,    14,   192,  -105,   197,  -362,  -546,  -130,
  -822,  -506,  -480,  -798,  -648,  -611,   nil,  -117,  -352,  -674,
  -231,    62,  -610,   160,  -773,  -577,  -606,   nil,  -656,  -744,
  -894,  -886,   -92,  -502,   nil,  -318,  -206,   -19,  -638,  -631,
  -333,    15,   nil,    11,    12,   nil,   nil,  -409,  -712,  -613,
  -845,  -469,  -763,  -601,  -671,  -599,  -688,   nil,  -519,   nil,
  -519,  -349,  -345,   nil,   nil,  -600,  -344,  -342,  -341,   nil,
  -804,  -882,   nil,  -688,  -683,  -680,   nil,   -83,  -569,  -475,
   nil,  -383,  -775,   nil,   nil,   298,   295,   296,   296,  -242,
  -222,   298,   299,   309,  -224,  -221,   nil,   nil,  -203,  -201,
   nil,   nil,   281,  -329,  -296,  -698,  -380,  -317,  -615,  -695,
  -918,   nil,   nil,  -466 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   382,   317,   nil,   nil,
   554,   nil,   930,   nil,   314,   315,   nil,   nil,   nil,    11,
    12,    18,   233,   nil,   nil,    14,   nil,   432,   234,   346,
   nil,   nil,   626,   232,   467,    21,  1041,   nil,   nil,   nil,
   nil,   377,   137,    50,    51,   nil,   nil,   nil,    23,    24,
    25,   744,   nil,   nil,   nil,   334,   nil,    26,   331,   446,
    33,   nil,   nil,    35,    38,    37,   nil,   229,   230,   394,
   nil,   454,   136,    81,   nil,   437,    97,    47,   541,    52,
   266,   306,   nil,   898,   447,   nil,   448,   459,   nil,   672,
   515,   304,   290,    53,    54,    55,    56,    57,    58,    59,
    60,    61,   nil,   291,    67,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   608,   356,   nil,   nil,   nil,   nil,   nil,   nil,
   770,   573,   nil,   771,   772,  1115,   984,   559,   nil,   560,
   561,   nil,   nil,   562,   nil,   564,   nil,   886,   nil,   nil,
   nil,   571,   nil,   nil,   373,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   458,   nil,   nil,   723,   716,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   960,   nil,   685,   694,   686,
   687,   nil,   nil,   688,   689,   nil,   nil,   nil,   nil,   959,
   961,   nil,   963,   964,   965,   966,   967,   nil,   582,   693,
   695,   nil,   nil,    80,    82,    83,   nil,   nil,   nil,   nil,
   633,   nil,   nil,   nil,   nil,   nil,    93,    94,   nil,   908,
   358,   558,   nil,   563,   916,   576,   578,   579,   996,   583,
   997,   586,   589,   309 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 148, :_reduce_none,
  2, 149, :_reduce_2,
  0, 150, :_reduce_3,
  1, 150, :_reduce_4,
  3, 150, :_reduce_5,
  2, 150, :_reduce_6,
  1, 152, :_reduce_none,
  2, 152, :_reduce_8,
  3, 155, :_reduce_9,
  4, 156, :_reduce_10,
  2, 157, :_reduce_11,
  0, 161, :_reduce_12,
  1, 161, :_reduce_13,
  3, 161, :_reduce_14,
  2, 161, :_reduce_15,
  1, 162, :_reduce_none,
  2, 162, :_reduce_17,
  0, 173, :_reduce_18,
  4, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  3, 154, :_reduce_22,
  2, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  3, 154, :_reduce_28,
  4, 154, :_reduce_29,
  1, 154, :_reduce_none,
  3, 154, :_reduce_31,
  3, 154, :_reduce_32,
  5, 154, :_reduce_33,
  3, 154, :_reduce_34,
  1, 154, :_reduce_none,
  3, 166, :_reduce_36,
  3, 166, :_reduce_37,
  6, 166, :_reduce_38,
  5, 166, :_reduce_39,
  5, 166, :_reduce_40,
  5, 166, :_reduce_41,
  5, 166, :_reduce_42,
  3, 166, :_reduce_43,
  1, 174, :_reduce_none,
  3, 174, :_reduce_45,
  1, 174, :_reduce_none,
  1, 172, :_reduce_none,
  3, 172, :_reduce_48,
  3, 172, :_reduce_49,
  3, 172, :_reduce_50,
  2, 172, :_reduce_51,
  0, 184, :_reduce_52,
  4, 172, :_reduce_53,
  1, 172, :_reduce_none,
  1, 165, :_reduce_none,
  0, 188, :_reduce_56,
  3, 185, :_reduce_57,
  1, 187, :_reduce_58,
  2, 190, :_reduce_59,
  0, 194, :_reduce_60,
  5, 191, :_reduce_61,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 196, :_reduce_none,
  4, 196, :_reduce_65,
  0, 203, :_reduce_66,
  4, 200, :_reduce_67,
  1, 202, :_reduce_none,
  2, 195, :_reduce_69,
  3, 195, :_reduce_70,
  4, 195, :_reduce_71,
  5, 195, :_reduce_72,
  4, 195, :_reduce_73,
  5, 195, :_reduce_74,
  2, 195, :_reduce_75,
  2, 195, :_reduce_76,
  2, 195, :_reduce_77,
  2, 195, :_reduce_78,
  2, 195, :_reduce_79,
  1, 167, :_reduce_80,
  3, 167, :_reduce_81,
  1, 208, :_reduce_82,
  3, 208, :_reduce_83,
  1, 207, :_reduce_none,
  2, 207, :_reduce_85,
  3, 207, :_reduce_86,
  5, 207, :_reduce_87,
  2, 207, :_reduce_88,
  4, 207, :_reduce_89,
  2, 207, :_reduce_90,
  4, 207, :_reduce_91,
  1, 207, :_reduce_92,
  3, 207, :_reduce_93,
  1, 211, :_reduce_none,
  3, 211, :_reduce_95,
  2, 210, :_reduce_96,
  3, 210, :_reduce_97,
  1, 213, :_reduce_98,
  3, 213, :_reduce_99,
  1, 212, :_reduce_100,
  1, 212, :_reduce_101,
  4, 212, :_reduce_102,
  3, 212, :_reduce_103,
  3, 212, :_reduce_104,
  3, 212, :_reduce_105,
  3, 212, :_reduce_106,
  2, 212, :_reduce_107,
  1, 212, :_reduce_108,
  1, 169, :_reduce_109,
  1, 169, :_reduce_110,
  4, 169, :_reduce_111,
  3, 169, :_reduce_112,
  3, 169, :_reduce_113,
  3, 169, :_reduce_114,
  3, 169, :_reduce_115,
  2, 169, :_reduce_116,
  1, 169, :_reduce_117,
  1, 216, :_reduce_118,
  1, 216, :_reduce_none,
  2, 217, :_reduce_120,
  1, 217, :_reduce_121,
  3, 217, :_reduce_122,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 163, :_reduce_128,
  1, 163, :_reduce_none,
  1, 164, :_reduce_130,
  0, 221, :_reduce_131,
  4, 164, :_reduce_132,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 182, :_reduce_204,
  3, 182, :_reduce_205,
  6, 182, :_reduce_206,
  5, 182, :_reduce_207,
  5, 182, :_reduce_208,
  5, 182, :_reduce_209,
  5, 182, :_reduce_210,
  4, 182, :_reduce_211,
  3, 182, :_reduce_212,
  3, 182, :_reduce_213,
  3, 182, :_reduce_214,
  2, 182, :_reduce_215,
  2, 182, :_reduce_216,
  2, 182, :_reduce_217,
  2, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  3, 182, :_reduce_223,
  3, 182, :_reduce_224,
  4, 182, :_reduce_225,
  2, 182, :_reduce_226,
  2, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_229,
  3, 182, :_reduce_230,
  3, 182, :_reduce_231,
  1, 182, :_reduce_none,
  3, 182, :_reduce_233,
  3, 182, :_reduce_234,
  3, 182, :_reduce_235,
  3, 182, :_reduce_236,
  3, 182, :_reduce_237,
  2, 182, :_reduce_238,
  2, 182, :_reduce_239,
  3, 182, :_reduce_240,
  3, 182, :_reduce_241,
  3, 182, :_reduce_242,
  3, 182, :_reduce_243,
  3, 182, :_reduce_244,
  6, 182, :_reduce_245,
  4, 182, :_reduce_246,
  4, 182, :_reduce_247,
  1, 182, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  3, 224, :_reduce_253,
  3, 224, :_reduce_254,
  1, 228, :_reduce_none,
  1, 229, :_reduce_none,
  2, 229, :_reduce_none,
  4, 229, :_reduce_258,
  2, 229, :_reduce_259,
  1, 222, :_reduce_none,
  3, 222, :_reduce_261,
  3, 234, :_reduce_262,
  3, 234, :_reduce_263,
  0, 236, :_reduce_264,
  1, 236, :_reduce_none,
  0, 177, :_reduce_266,
  1, 177, :_reduce_none,
  2, 177, :_reduce_none,
  4, 177, :_reduce_269,
  2, 177, :_reduce_270,
  1, 206, :_reduce_271,
  2, 206, :_reduce_272,
  2, 206, :_reduce_273,
  4, 206, :_reduce_274,
  1, 206, :_reduce_275,
  0, 239, :_reduce_276,
  2, 199, :_reduce_277,
  2, 238, :_reduce_278,
  2, 237, :_reduce_279,
  0, 237, :_reduce_280,
  1, 231, :_reduce_281,
  2, 231, :_reduce_282,
  3, 231, :_reduce_283,
  4, 231, :_reduce_284,
  1, 171, :_reduce_285,
  1, 171, :_reduce_none,
  3, 170, :_reduce_287,
  4, 170, :_reduce_288,
  2, 170, :_reduce_289,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_300,
  0, 261, :_reduce_301,
  4, 226, :_reduce_302,
  0, 262, :_reduce_303,
  4, 226, :_reduce_304,
  0, 263, :_reduce_305,
  4, 226, :_reduce_306,
  3, 226, :_reduce_307,
  3, 226, :_reduce_308,
  2, 226, :_reduce_309,
  3, 226, :_reduce_310,
  3, 226, :_reduce_311,
  1, 226, :_reduce_312,
  4, 226, :_reduce_313,
  3, 226, :_reduce_314,
  1, 226, :_reduce_315,
  5, 226, :_reduce_316,
  4, 226, :_reduce_317,
  3, 226, :_reduce_318,
  2, 226, :_reduce_319,
  1, 226, :_reduce_none,
  2, 226, :_reduce_321,
  2, 226, :_reduce_322,
  6, 226, :_reduce_323,
  6, 226, :_reduce_324,
  4, 226, :_reduce_325,
  4, 226, :_reduce_326,
  5, 226, :_reduce_327,
  4, 226, :_reduce_328,
  5, 226, :_reduce_329,
  6, 226, :_reduce_330,
  0, 264, :_reduce_331,
  6, 226, :_reduce_332,
  0, 265, :_reduce_333,
  7, 226, :_reduce_334,
  0, 266, :_reduce_335,
  5, 226, :_reduce_336,
  4, 226, :_reduce_337,
  4, 226, :_reduce_338,
  1, 226, :_reduce_339,
  1, 226, :_reduce_340,
  1, 226, :_reduce_341,
  1, 226, :_reduce_342,
  1, 176, :_reduce_none,
  1, 205, :_reduce_344,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 253, :_reduce_347,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 254, :_reduce_none,
  5, 254, :_reduce_351,
  1, 159, :_reduce_none,
  2, 159, :_reduce_353,
  1, 257, :_reduce_none,
  1, 257, :_reduce_none,
  1, 267, :_reduce_356,
  3, 267, :_reduce_357,
  1, 270, :_reduce_358,
  3, 270, :_reduce_359,
  1, 269, :_reduce_none,
  3, 269, :_reduce_361,
  5, 269, :_reduce_362,
  1, 269, :_reduce_363,
  3, 269, :_reduce_364,
  2, 271, :_reduce_365,
  1, 271, :_reduce_366,
  4, 272, :_reduce_367,
  2, 272, :_reduce_368,
  2, 272, :_reduce_369,
  2, 272, :_reduce_370,
  1, 272, :_reduce_371,
  2, 278, :_reduce_372,
  0, 278, :_reduce_373,
  6, 279, :_reduce_374,
  8, 279, :_reduce_375,
  4, 279, :_reduce_376,
  6, 279, :_reduce_377,
  4, 279, :_reduce_378,
  2, 279, :_reduce_none,
  6, 279, :_reduce_380,
  2, 279, :_reduce_381,
  4, 279, :_reduce_382,
  6, 279, :_reduce_383,
  2, 279, :_reduce_384,
  4, 279, :_reduce_385,
  2, 279, :_reduce_386,
  4, 279, :_reduce_387,
  1, 279, :_reduce_none,
  0, 283, :_reduce_389,
  1, 283, :_reduce_390,
  3, 284, :_reduce_391,
  4, 284, :_reduce_392,
  1, 285, :_reduce_393,
  4, 285, :_reduce_394,
  1, 286, :_reduce_395,
  3, 286, :_reduce_396,
  1, 287, :_reduce_397,
  1, 287, :_reduce_none,
  0, 291, :_reduce_399,
  0, 292, :_reduce_400,
  4, 252, :_reduce_401,
  4, 289, :_reduce_402,
  1, 289, :_reduce_403,
  0, 295, :_reduce_404,
  4, 290, :_reduce_405,
  0, 296, :_reduce_406,
  4, 290, :_reduce_407,
  0, 298, :_reduce_408,
  4, 294, :_reduce_409,
  2, 197, :_reduce_410,
  4, 197, :_reduce_411,
  5, 197, :_reduce_412,
  5, 197, :_reduce_413,
  2, 251, :_reduce_414,
  4, 251, :_reduce_415,
  4, 251, :_reduce_416,
  3, 251, :_reduce_417,
  3, 251, :_reduce_418,
  3, 251, :_reduce_419,
  2, 251, :_reduce_420,
  1, 251, :_reduce_421,
  4, 251, :_reduce_422,
  0, 300, :_reduce_423,
  4, 250, :_reduce_424,
  0, 301, :_reduce_425,
  4, 250, :_reduce_426,
  0, 302, :_reduce_427,
  3, 201, :_reduce_428,
  0, 303, :_reduce_429,
  0, 304, :_reduce_430,
  4, 297, :_reduce_431,
  5, 255, :_reduce_432,
  1, 305, :_reduce_433,
  1, 305, :_reduce_none,
  0, 308, :_reduce_435,
  0, 309, :_reduce_436,
  7, 256, :_reduce_437,
  1, 307, :_reduce_438,
  1, 307, :_reduce_none,
  1, 306, :_reduce_440,
  3, 306, :_reduce_441,
  3, 306, :_reduce_442,
  1, 310, :_reduce_none,
  2, 310, :_reduce_444,
  3, 310, :_reduce_445,
  1, 310, :_reduce_446,
  1, 310, :_reduce_447,
  1, 183, :_reduce_none,
  3, 314, :_reduce_449,
  1, 314, :_reduce_none,
  3, 316, :_reduce_451,
  1, 316, :_reduce_none,
  1, 318, :_reduce_453,
  1, 319, :_reduce_454,
  1, 317, :_reduce_none,
  4, 317, :_reduce_456,
  4, 317, :_reduce_457,
  3, 317, :_reduce_458,
  4, 317, :_reduce_459,
  4, 317, :_reduce_460,
  3, 317, :_reduce_461,
  0, 323, :_reduce_462,
  4, 317, :_reduce_463,
  2, 317, :_reduce_464,
  0, 324, :_reduce_465,
  4, 317, :_reduce_466,
  2, 317, :_reduce_467,
  0, 325, :_reduce_468,
  4, 317, :_reduce_469,
  1, 311, :_reduce_470,
  1, 311, :_reduce_471,
  2, 311, :_reduce_472,
  3, 311, :_reduce_473,
  5, 311, :_reduce_474,
  2, 311, :_reduce_475,
  4, 311, :_reduce_476,
  1, 311, :_reduce_none,
  2, 326, :_reduce_478,
  3, 326, :_reduce_479,
  2, 312, :_reduce_480,
  4, 312, :_reduce_481,
  1, 312, :_reduce_482,
  3, 312, :_reduce_483,
  1, 328, :_reduce_484,
  3, 328, :_reduce_485,
  1, 327, :_reduce_none,
  3, 313, :_reduce_487,
  1, 313, :_reduce_488,
  2, 313, :_reduce_489,
  1, 313, :_reduce_490,
  3, 313, :_reduce_491,
  1, 313, :_reduce_492,
  1, 329, :_reduce_493,
  3, 329, :_reduce_494,
  2, 332, :_reduce_495,
  1, 332, :_reduce_496,
  1, 333, :_reduce_497,
  3, 333, :_reduce_498,
  2, 330, :_reduce_499,
  1, 330, :_reduce_500,
  2, 331, :_reduce_501,
  1, 320, :_reduce_none,
  3, 320, :_reduce_503,
  3, 320, :_reduce_504,
  2, 320, :_reduce_505,
  2, 320, :_reduce_506,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  2, 320, :_reduce_510,
  2, 320, :_reduce_511,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_520,
  2, 336, :_reduce_521,
  1, 315, :_reduce_522,
  2, 337, :_reduce_523,
  2, 321, :_reduce_524,
  3, 321, :_reduce_525,
  1, 321, :_reduce_526,
  6, 158, :_reduce_527,
  0, 158, :_reduce_528,
  1, 338, :_reduce_529,
  1, 338, :_reduce_none,
  1, 338, :_reduce_none,
  2, 339, :_reduce_532,
  1, 339, :_reduce_none,
  2, 160, :_reduce_534,
  1, 160, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 241, :_reduce_538,
  1, 341, :_reduce_539,
  2, 341, :_reduce_540,
  3, 342, :_reduce_541,
  1, 342, :_reduce_542,
  1, 342, :_reduce_543,
  3, 242, :_reduce_544,
  4, 243, :_reduce_545,
  3, 244, :_reduce_546,
  0, 345, :_reduce_547,
  3, 345, :_reduce_548,
  1, 346, :_reduce_549,
  2, 346, :_reduce_550,
  3, 246, :_reduce_551,
  0, 348, :_reduce_552,
  3, 348, :_reduce_553,
  3, 245, :_reduce_554,
  3, 247, :_reduce_555,
  0, 349, :_reduce_556,
  3, 349, :_reduce_557,
  0, 350, :_reduce_558,
  3, 350, :_reduce_559,
  0, 334, :_reduce_560,
  2, 334, :_reduce_561,
  0, 343, :_reduce_562,
  2, 343, :_reduce_563,
  0, 344, :_reduce_564,
  2, 344, :_reduce_565,
  1, 347, :_reduce_566,
  2, 347, :_reduce_567,
  0, 352, :_reduce_568,
  4, 347, :_reduce_569,
  1, 351, :_reduce_570,
  1, 351, :_reduce_571,
  1, 351, :_reduce_572,
  1, 351, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 353, :_reduce_576,
  3, 354, :_reduce_577,
  1, 340, :_reduce_578,
  2, 340, :_reduce_579,
  1, 223, :_reduce_580,
  1, 223, :_reduce_581,
  1, 223, :_reduce_582,
  1, 223, :_reduce_583,
  1, 214, :_reduce_584,
  1, 214, :_reduce_585,
  1, 214, :_reduce_586,
  1, 214, :_reduce_587,
  1, 214, :_reduce_588,
  1, 215, :_reduce_589,
  1, 215, :_reduce_590,
  1, 215, :_reduce_591,
  1, 215, :_reduce_592,
  1, 215, :_reduce_593,
  1, 215, :_reduce_594,
  1, 215, :_reduce_595,
  1, 248, :_reduce_596,
  1, 248, :_reduce_597,
  1, 175, :_reduce_598,
  1, 175, :_reduce_599,
  1, 180, :_reduce_600,
  1, 180, :_reduce_601,
  0, 355, :_reduce_602,
  4, 258, :_reduce_603,
  0, 258, :_reduce_604,
  3, 225, :_reduce_605,
  3, 225, :_reduce_606,
  1, 260, :_reduce_none,
  0, 357, :_reduce_608,
  3, 260, :_reduce_609,
  4, 356, :_reduce_610,
  2, 356, :_reduce_611,
  2, 356, :_reduce_612,
  2, 356, :_reduce_613,
  1, 356, :_reduce_614,
  2, 359, :_reduce_615,
  0, 359, :_reduce_616,
  6, 293, :_reduce_617,
  8, 293, :_reduce_618,
  4, 293, :_reduce_619,
  6, 293, :_reduce_620,
  4, 293, :_reduce_621,
  6, 293, :_reduce_622,
  2, 293, :_reduce_623,
  4, 293, :_reduce_624,
  6, 293, :_reduce_625,
  2, 293, :_reduce_626,
  4, 293, :_reduce_627,
  2, 293, :_reduce_628,
  4, 293, :_reduce_629,
  1, 293, :_reduce_630,
  0, 293, :_reduce_631,
  1, 235, :_reduce_632,
  1, 288, :_reduce_633,
  1, 288, :_reduce_634,
  1, 288, :_reduce_635,
  1, 288, :_reduce_636,
  1, 268, :_reduce_none,
  1, 268, :_reduce_638,
  1, 361, :_reduce_639,
  1, 362, :_reduce_640,
  3, 362, :_reduce_641,
  1, 280, :_reduce_642,
  3, 280, :_reduce_643,
  1, 363, :_reduce_644,
  2, 364, :_reduce_645,
  1, 364, :_reduce_646,
  2, 365, :_reduce_647,
  1, 365, :_reduce_648,
  1, 273, :_reduce_649,
  3, 273, :_reduce_650,
  1, 358, :_reduce_651,
  3, 358, :_reduce_652,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 276, :_reduce_655,
  2, 274, :_reduce_656,
  1, 274, :_reduce_657,
  3, 366, :_reduce_658,
  3, 367, :_reduce_659,
  1, 281, :_reduce_660,
  3, 281, :_reduce_661,
  1, 360, :_reduce_662,
  3, 360, :_reduce_663,
  1, 368, :_reduce_none,
  1, 368, :_reduce_none,
  2, 282, :_reduce_666,
  1, 282, :_reduce_667,
  1, 369, :_reduce_none,
  1, 369, :_reduce_none,
  2, 277, :_reduce_670,
  2, 275, :_reduce_671,
  0, 275, :_reduce_672,
  1, 192, :_reduce_none,
  3, 192, :_reduce_674,
  0, 249, :_reduce_675,
  2, 249, :_reduce_none,
  1, 233, :_reduce_677,
  3, 233, :_reduce_678,
  3, 370, :_reduce_679,
  2, 370, :_reduce_680,
  4, 370, :_reduce_681,
  2, 370, :_reduce_682,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 179, :_reduce_695,
  1, 179, :_reduce_696,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 209, :_reduce_701,
  2, 178, :_reduce_702,
  2, 322, :_reduce_703,
  0, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 259, :_reduce_707,
  1, 259, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_none,
  0, 230, :_reduce_711 ]

racc_reduce_n = 712

racc_shift_n = 1190

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "p_expr",
  "@2",
  "expr_value_do",
  "do",
  "def_name",
  "@3",
  "fname",
  "defn_head",
  "defs_head",
  "singleton",
  "dot_or_colon",
  "@4",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@5",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "op",
  "reswords",
  "symbol",
  "@6",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "f_paren_args",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_no_kwarg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@14",
  "@15",
  "f_args",
  "do_block",
  "@16",
  "@17",
  "do_body",
  "@18",
  "operation3",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "cases",
  "p_top_expr",
  "p_cases",
  "@24",
  "@25",
  "p_top_expr_body",
  "p_args",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@26",
  "@27",
  "@28",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_kwarg",
  "p_kwrest",
  "p_kwnorest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "kwrest_mark",
  "p_primitive",
  "p_var_ref",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@29",
  "ssym",
  "dsym",
  "@30",
  "args_tail",
  "@31",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 46 omitted

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_52(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_53(val, _values, result)
                      @lexer.in_kwarg = val[2]
                      result = @builder.in_match(val[0], val[1], val[3])
                    
    result
end

# reduce 54 omitted

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_57(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

def _reduce_58(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @current_arg_stack.push(nil)

                      result = val[0]
                    
    result
end

def _reduce_59(val, _values, result)
                      @context.push(:def)

                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_60(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_61(val, _values, result)
                      @context.push(:defs)

                      result = [ val[0], val[1], val[2], val[4] ]
                    
    result
end

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

def _reduce_65(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 68 omitted

def _reduce_69(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_89(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 94 omitted

def _reduce_95(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_97(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_103(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_105(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_112(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_116(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_117(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_118(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_121(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_122(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_131(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_132(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

def _reduce_204(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_210(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_211(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 232 omitted

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_244(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

def _reduce_246(val, _values, result)
                      result = @builder.def_endless_method(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_247(val, _values, result)
                      result = @builder.def_endless_singleton(*val[0],
                                 val[1], val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val
                    
    result
end

def _reduce_263(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 265 omitted

def _reduce_266(val, _values, result)
                      result = []
                    
    result
end

# reduce 267 omitted

# reduce 268 omitted

def _reduce_269(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_273(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_274(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_275(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_276(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_277(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_280(val, _values, result)
                      result = []
                    
    result
end

def _reduce_281(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_282(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 286 omitted

def _reduce_287(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

def _reduce_300(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_301(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_302(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_303(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_305(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_310(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_319(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 320 omitted

def _reduce_321(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_322(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_323(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_324(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_326(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_327(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_328(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_329(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_331(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_332(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_333(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_335(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_336(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_337(val, _values, result)
                      result = @builder.def_method(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_338(val, _values, result)
                      result = @builder.def_singleton(*val[0], val[1],
                                  val[2], val[3])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_339(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_340(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_341(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_342(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 345 omitted

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = val
                    
    result
end

# reduce 354 omitted

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_373(val, _values, result)
                      result = []
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_381(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_382(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_390(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_391(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_392(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_393(val, _values, result)
                      result = []
                    
    result
end

def _reduce_394(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_395(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_397(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_400(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_401(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_402(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_403(val, _values, result)
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_404(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_406(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_408(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_410(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_415(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_416(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_418(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_419(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_420(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_421(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_422(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_423(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_424(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_425(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_427(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_428(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_430(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_431(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_432(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_433(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 434 omitted

def _reduce_435(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_436(val, _values, result)
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_438(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 439 omitted

def _reduce_440(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_442(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 455 omitted

def _reduce_456(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_457(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_458(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_459(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_460(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_461(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_462(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_463(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.array_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_465(val, _values, result)
                      @pattern_hash_keys.push
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = false
                    
    result
end

def _reduce_466(val, _values, result)
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_468(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_469(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_473(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_474(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_475(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_479(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_480(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest ]
                    
    result
end

def _reduce_481(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest, *val[3] ]
                    
    result
end

def _reduce_482(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest ]
                    
    result
end

def _reduce_483(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest, *val[2] ]
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 486 omitted

def _reduce_487(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_493(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_494(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                    check_kwarg_name(val[0])
                    result = [:label, val[0]]
                  
    result
end

def _reduce_498(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_499(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_501(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 502 omitted

def _reduce_503(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_506(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_521(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_522(val, _values, result)
                      result = @builder.match_var(val[0])
                    
    result
end

def _reduce_523(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_524(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_527(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_528(val, _values, result)
                      result = []
                    
    result
end

def _reduce_529(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 530 omitted

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 533 omitted

def _reduce_534(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

def _reduce_538(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_539(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_541(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_542(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_543(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_544(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_545(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_546(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = []
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_549(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      result = []
                    
    result
end

def _reduce_553(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_554(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_555(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_556(val, _values, result)
                      result = []
                    
    result
end

def _reduce_557(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_558(val, _values, result)
                      result = []
                    
    result
end

def _reduce_559(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_560(val, _values, result)
                      result = []
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = []
                    
    result
end

def _reduce_563(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_564(val, _values, result)
                      result = []
                    
    result
end

def _reduce_565(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_567(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_568(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_569(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_570(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_577(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_579(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_580(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_581(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_582(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_583(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_584(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_586(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_587(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_588(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_590(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_592(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_593(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      if (node = val[0]) && node.type == :ident
                        name = node.children[0]

                        if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && context.in_dynamic_block?
                          # definitely an implicit param
                          location = node.loc.expression

                          if max_numparam_stack.has_ordinary_params?
                            diagnostic :error, :ordinary_param_defined, nil, [nil, location]
                          end

                          raw_context = context.stack.dup
                          raw_max_numparam_stack = max_numparam_stack.stack.dup

                          # ignore current block scope
                          raw_context.pop
                          raw_max_numparam_stack.pop

                          raw_context.reverse_each do |outer_scope|
                            if outer_scope == :block || outer_scope == :lambda
                              outer_scope_has_numparams = raw_max_numparam_stack.pop > 0

                              if outer_scope_has_numparams
                                diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
                              else
                                # for now it's ok, but an outer scope can also be a block
                                # with numparams, so we need to continue
                              end
                            else
                              # found an outer scope that can't have numparams
                              # like def/class/etc
                              break
                            end
                          end

                          static_env.declare(name)
                          max_numparam_stack.register(name[1].to_i)
                        end
                      end

                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_600(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_601(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_602(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_603(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_604(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_605(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_606(val, _values, result)
                      result = @builder.forward_args(val[0], val[1], val[2])
                      @static_env.declare_forward_args

                      @lexer.state = :expr_value
                    
    result
end

# reduce 607 omitted

def _reduce_608(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_609(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_610(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_611(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_612(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_614(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_615(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_616(val, _values, result)
                      result = []
                    
    result
end

def _reduce_617(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_618(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_620(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_621(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_622(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_623(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_624(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_625(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_626(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_627(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_628(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_629(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_630(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_631(val, _values, result)
                      result = []
                    
    result
end

def _reduce_632(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_633(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_634(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_635(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_636(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 637 omitted

def _reduce_638(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_639(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_640(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_641(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_642(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_643(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_644(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])

                      result = val[0]
                    
    result
end

def _reduce_645(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_646(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_647(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_648(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_649(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_650(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_651(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_652(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 653 omitted

# reduce 654 omitted

def _reduce_655(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_656(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_657(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_658(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_659(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_660(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_661(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_662(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_663(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 664 omitted

# reduce 665 omitted

def _reduce_666(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_667(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 668 omitted

# reduce 669 omitted

def _reduce_670(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_671(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_672(val, _values, result)
                      result = []
                    
    result
end

# reduce 673 omitted

def _reduce_674(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_675(val, _values, result)
                      result = []
                    
    result
end

# reduce 676 omitted

def _reduce_677(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_678(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_679(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_680(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_681(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_682(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 683 omitted

# reduce 684 omitted

# reduce 685 omitted

# reduce 686 omitted

# reduce 687 omitted

# reduce 688 omitted

# reduce 689 omitted

# reduce 690 omitted

# reduce 691 omitted

# reduce 692 omitted

# reduce 693 omitted

# reduce 694 omitted

def _reduce_695(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_696(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 697 omitted

# reduce 698 omitted

# reduce 699 omitted

# reduce 700 omitted

def _reduce_701(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_702(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_703(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 704 omitted

# reduce 705 omitted

# reduce 706 omitted

def _reduce_707(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 708 omitted

# reduce 709 omitted

# reduce 710 omitted

def _reduce_711(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby28
  end   # module Parser
