code_quality:
  rules:
    - if: '$DAST_TEST == "true"' # Skip this job for DAST test
      when: never
  extends:
    - .default-retry
    - .reports:rules:code_quality
    - .use-docker-in-docker
  stage: test
  needs: []
  variables:
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.10"
  script:
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - docker pull --quiet "$CODE_QUALITY_IMAGE"
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json  # GitLab-specific
    expire_in: 1 week  # GitLab-specific

# We need to duplicate this job's definition because it seems it's impossible to
# override an included `only.refs`.
# See https://gitlab.com/gitlab-org/gitlab/issues/31371.
.sast:
  extends:
    - .default-retry
    - .reports:rules:sast
  stage: test
  # `needs: []` starts the job immediately in the pipeline
  # https://docs.gitlab.com/ee/ci/yaml/README.html#needs
  needs: []
  artifacts:
    paths:
      - gl-sast-report.json  # GitLab-specific
    reports:
      sast: gl-sast-report.json
    expire_in: 1 week  # GitLab-specific
  variables:
    DOCKER_TLS_CERTDIR: ""
    SAST_ANALYZER_IMAGE_PREFIX: "registry.gitlab.com/gitlab-org/security-products/analyzers"
    SAST_ANALYZER_IMAGE_TAG: 2
    SAST_BRAKEMAN_LEVEL: 2  # GitLab-specific
    SAST_EXCLUDED_PATHS: qa,spec,doc,ee/spec,config/gitlab.yml.example  # GitLab-specific
    SAST_DISABLE_BABEL: "true"
  script:
    - /analyzer run

brakeman-sast:
  extends: .sast
  image:
    name: "$SAST_ANALYZER_IMAGE_PREFIX/brakeman:$SAST_ANALYZER_IMAGE_TAG"

eslint-sast:
  extends: .sast
  image:
    name: "$SAST_ANALYZER_IMAGE_PREFIX/eslint:$SAST_ANALYZER_IMAGE_TAG"

nodejs-scan-sast:
  extends: .sast
  image:
    name: "$SAST_ANALYZER_IMAGE_PREFIX/nodejs-scan:$SAST_ANALYZER_IMAGE_TAG"

secrets-sast:
  extends: .sast
  image:
    name: "$SAST_ANALYZER_IMAGE_PREFIX/secrets:$SAST_ANALYZER_IMAGE_TAG"

# We need to duplicate this job's definition because it seems it's impossible to
# override an included `only.refs`.
# See https://gitlab.com/gitlab-org/gitlab/issues/31371.
dependency_scanning:
  extends:
    - .default-retry
    - .reports:rules:dependency_scanning
    - .use-docker-in-docker
  stage: test
  needs: []
  variables:
    DS_MAJOR_VERSION: 2
    DS_EXCLUDED_PATHS: "qa/qa/ee/fixtures/secure_premade_reports,spec,ee/spec"  # GitLab-specific
  script:
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - | # this is required to avoid undesirable reset of Docker image ENV variables being set on build stage
      function propagate_env_vars() {
        CURRENT_ENV=$(printenv)

        for VAR_NAME; do
          echo $CURRENT_ENV | grep "${VAR_NAME}=" > /dev/null && echo "--env $VAR_NAME "
        done
      }
    - |
      docker run \
        $(propagate_env_vars \
          DS_ANALYZER_IMAGES \
          DS_ANALYZER_IMAGE_PREFIX \
          DS_ANALYZER_IMAGE_TAG \
          DS_DEFAULT_ANALYZERS \
          DS_EXCLUDED_PATHS \
          DS_DOCKER_CLIENT_NEGOTIATION_TIMEOUT \
          DS_PULL_ANALYZER_IMAGE_TIMEOUT \
          DS_RUN_ANALYZER_TIMEOUT \
          DS_PYTHON_VERSION \
          DS_PIP_VERSION \
          DS_PIP_DEPENDENCY_PATH \
          GEMNASIUM_DB_LOCAL_PATH \
          GEMNASIUM_DB_REMOTE_URL \
          GEMNASIUM_DB_REF_NAME \
          PIP_INDEX_URL \
          PIP_EXTRA_INDEX_URL \
          PIP_REQUIREMENTS_FILE \
          MAVEN_CLI_OPTS \
          BUNDLER_AUDIT_UPDATE_DISABLED \
          BUNDLER_AUDIT_ADVISORY_DB_URL \
          BUNDLER_AUDIT_ADVISORY_DB_REF_NAME \
        ) \
        --volume "$PWD:/code" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$DS_MAJOR_VERSION" /code
  artifacts:
    paths:
      - gl-dependency-scanning-report.json  # GitLab-specific
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
    expire_in: 1 week  # GitLab-specific

# We need to duplicate this job's definition because it seems it's impossible to
# override an included `only.refs`.
# See https://gitlab.com/gitlab-org/gitlab/issues/31371.
# check for commit
# Existing DAST configuration for Baseline scan
# dast:
# Temporarily disabling review apps
## We need to duplicate this job's definition because it seems it's impossible to
## override an included `only.refs`.
## See https://gitlab.com/gitlab-org/gitlab/issues/31371.
# dast:
#   extends:
#     - .default-retry
#     - .reports:rules:dast
#   # This is needed so that manual jobs with needs don't block the pipeline.
#   # See https://gitlab.com/gitlab-org/gitlab/-/issues/199979.
#   dependencies: ["review-deploy"]
#   stage: qa  # GitLab-specific
#   image:
#     name: "registry.gitlab.com/gitlab-org/security-products/dast:$DAST_VERSION"
#   variables:
#     # To be done in a later iteration
#     # DAST_USERNAME: "root"
#     # DAST_USERNAME_FIELD: "user[login]"
#     # DAST_PASSWORD_FIELD: "user[passowrd]"
#     DAST_VERSION: 1
#   script:
#     - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
#     # To be done in a later iteration
#     # - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
#     # - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
#     - /analyze -t $DAST_WEBSITE
#   timeout: 4h
#   artifacts:
#     paths:
#       - gl-dast-report.json  # GitLab-specific
#     reports:
#       dast: gl-dast-report.json
#     expire_in: 1 week  # GitLab-specific

# To be done in a later iteration: https://gitlab.com/gitlab-org/gitlab/issues/31160#note_278188255
# schedule:dast:
#   extends:
#     - .default-retry
#     - .reports:rules:dast
#   # This is needed so that manual jobs with needs don't block the pipeline.
#   # See https://gitlab.com/gitlab-org/gitlab/-/issues/199979.
#   dependencies: ["review-deploy"]
#   stage: qa  # GitLab-specific
#   image:
#     name: "registry.gitlab.com/gitlab-org/security-products/dast:$DAST_VERSION"
#   variables:
#     # To be done in a later iteration
#     # DAST_USERNAME: "root"
#     # DAST_USERNAME_FIELD: "user[login]"
#     # DAST_PASSWORD_FIELD: "user[passowrd]"
#     DAST_VERSION: 1
#   script:
#     - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
#     # To be done in a later iteration
#     # - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
#     # - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
#     - /analyze -t $DAST_WEBSITE
#   artifacts:
#     paths:
#       - gl-dast-report.json  # GitLab-specific
#     reports:
#       dast: gl-dast-report.json
#     expire_in: 1 week  # GitLab-specific
# DAST full scan configurations
# Common DAST configs that is applicable for DAST-fullscan-* jobs
# Seed test data
# DAST-prepare:
#   stage: review-after
#   image: alpine
#   variables:
#     TRACE: 1
#   needs: ["review-deploy"]
#   script:
#     - apk add jq curl
#     - REVIEW_APPS_ROOT_TOKEN=$(cat environment_token.txt)
#     - CI_ENVIRONMENT_URL=$(cat environment_url.txt)
#     - source scripts/review_apps/seed-dast-test-data.sh
#     - USERID=$(create_user "user1")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user2")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user3")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user4")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user5")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user6")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user7")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user8")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user9")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user10")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user11")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user12")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user13")
#     - create_project_for_user $USERID
#     - USERID=$(create_user "user14")
#     - create_project_for_user $USERID
.dast_conf:
  tags:
    - prm
  # For scheduling dast job
  extends:
    - .reports:rules:dast
  # retry:
  #   max: 1  # This is confusing but this means "2 runs at max".
  #   when:
  #     - always
  image:
    # name: "registry.gitlab.com/gitlab-org/security-products/dast:$DAST_VERSION"
    # https://gitlab.com/gitlab-org/gitlab/-/issues/231326
    name: "registry.gitlab.com/gitlab-org/security-products/dast/master:3590fc976c9c2f8fd67685dbff1a9d0d00cbe965"
  variables:
    DAST_USERNAME_FIELD: "user[login]"
    DAST_PASSWORD_FIELD: "user[password]"
    DAST_FULL_SCAN_ENABLED: "true"
    DAST_SPIDER_MINS: 0
    DAST_VERSION: 1
    DAST_ZAP_CLI_OPTIONS: "-Xmx6144m -config database.recoverylog=false"
    # Rules always ignored
    DAST_ALWAYS_EXCLUDE_RULES: "41,42,43,10027,10032,10041,10042,10045,10047,10052,10053,10057,10061,10096,10097,10104,10106,20012,20014,20015,20016,20017,20018,40019,40020,40021,40024,40025,40027,40029,40032,90001,90019"
    # All Beta rules that run in DAST jobs
    DAST_BETA_RULES: "10026,10028,10029,10030,10031,10033,10034,10035,10036,10038,10039,10043,10044,10048,10050,10051,10058,10062,10095,10107,10108,30003,40013,40022,40023,40028,90021,90023,90024,90025,90027,90028"
    # All Release rules that run in DAST jobs
    DAST_RELEASE_RULES: "0,2,3,6,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40014,40016,40017,40018,50000,50001,90011,90020,90022,90033"
  needs:
    # - job: DAST-prepare
    #   artifacts: false
    - job: review-deploy
      artifacts: true
  stage: sec-dast
  timeout: 2h
  artifacts:
    paths:
      - gl-dast-report.json  # GitLab-specific
    reports:
      dast: gl-dast-report.json
    expire_in: 1 week  # GitLab-specific
# DAST scan with Release rules-set 1
DAST-fullscan-ruleset1:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user1"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},0,2,3,6,7,10010,10011,10015,10017,10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40014,40016,40017,40018,50000,50001,90011,90020,90022,90033"'
    # Below two lines can be removed in all jobs once https://gitlab.com/gitlab-org/gitlab/-/issues/230687 is fixed
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'
# DAST scan with Release rules-set 2
DAST-fullscan-ruleset2:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user2"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40014,40016,40017,40018,50000,50001,0,2,3,6,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,90020"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'
# DAST scan with Release rules-set 3
DAST-fullscan-ruleset3:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user3"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40014,90011,90020,90022,90033,0,2,3,6,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,40018"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'
# DAST scan with Release rules-set 4
DAST-fullscan-ruleset4:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user4"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40014,40016,40017,40018,50000,50001,90011,90019,90020,90022,90033,6"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'

# DAST scan with Release rules-set 5
DAST-fullscan-ruleset5:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user5"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},0,2,3,6,7,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40014,40016,40017,40018,50000,50001,90011,90019,90020,90022,90033"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'

# DAST scan with Release rules-set 6
DAST-fullscan-ruleset6:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user6"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},40012,20019,40016,40017,40018,50000,50001,90011,90020,90022,90033,0,2,3,6,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,40014"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'

# DAST scan with Beta rules-set 7
DAST-fullscan-ruleset7:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user7"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_RELEASE_RULES},10107"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'

# RUN  scan ruleid 20019 external redirect rule
DAST-fullscan-rule-20019:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user8"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},0,2,3,6,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,10098,10105,10202,30001,30002,40003,40008,40009,40012,40014,40016,40017,40018,50000,50001,90011,90020,90022,90033"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'

# RUN  scan ruleid 10107- (Httpoxy - Proxy Header Misuse - Active/beta)
DAST-fullscan-rule-10107:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user9"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_RELEASE_RULES},10026,10028,10029,10030,10031,10033,10034,10035,10036,10038,10039,10043,10044,10048,10050,10051,10058,10062,10095,10108,30003,40013,40022,40023,40028,90021,90023,90024,90025,90027,90028"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth"'
    - '/analyze -t $DAST_WEBSITE -d'

# RUN  scan ruleid 90020 - command injection plugin
DAST-fullscan-rule-90020:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user10"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},0,2,3,6,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40014,40016,40017,40018,50000,50001,90011,90022,90033"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'

# RUN  scan ruleid 40018 SQL Injection -Active/release
DAST-fullscan-rule-40018:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user11"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},0,2,3,6,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40014,40016,40017,50000,50001,90011,90020,90022,90033"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'

# RUN  scan ruleid 40014 (Cross Site Scripting (Persistent) - Active/release)
DAST-fullscan-rule-40014:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user12"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},0,2,3,6,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40016,40017,40018,50000,50001,90011,90020,90022,90033"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'

# RUN  scan ruleid 6 Path travesal
DAST-fullscan-rule-6:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user13"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},0,2,3,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,10098,10105,10202,20019,30001,30002,40003,40008,40009,40012,40014,40016,40017,40018,50000,50001,90011,90020,90022,90033"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'
# RUN  scan ruleid 40012 Cross Site Scripting (Reflected)
DAST-fullscan-rule-40012:
  extends:
    - .dast_conf
  resource_group: dast_scan
  variables:
    DAST_USERNAME: "user14"
  script:
    - 'export DAST_WEBSITE="${DAST_WEBSITE:-$(cat environment_url.txt)}"'
    - 'export DAST_AUTH_URL="${DAST_WEBSITE}/users/sign_in"'
    - 'export DAST_PASSWORD="${REVIEW_APPS_ROOT_PASSWORD}"'
    - 'export DAST_EXCLUDE_RULES="${DAST_ALWAYS_EXCLUDE_RULES},${DAST_BETA_RULES},0,2,3,6,7,10010,10011,10015,10017,10019,10020,10021,10023,10024,10025,10037,10040,10054,10055,10056,10098,10105,10202,20019,30001,30002,40003,40008,40009,40014,40016,40017,40018,50000,50001,90011,90020,90022,90033"'
    - 'mkdir -p /zap/xml'
    - 'sed -i "84 s/true/false/" /zap/xml/config.xml'
    - 'cat /zap/xml/config.xml'
    - 'export DAST_AUTH_EXCLUDE_URLS="${DAST_WEBSITE}/help/.*,${DAST_WEBSITE}/profile/two_factor_auth,${DAST_WEBSITE}/users/sign_out"'
    - '/analyze -t $DAST_WEBSITE -d'
