= form_for @application_setting, url: preferences_admin_application_settings_path(anchor: 'js-pages-settings'), html: { class: 'fieldset-form' } do |f|
  = form_errors(@application_setting)

  %fieldset
    .form-group
      .form-check
        = f.check_box :pages_domain_verification_enabled, class: 'form-check-input'
        = f.label :pages_domain_verification_enabled, class: 'form-check-label' do
          = s_("AdminSettingsPages|Require users to prove ownership of custom domains")
      .form-text.text-muted
        - pages_link_url = help_page_path('administration/pages/index', anchor: 'custom-domain-verification')
        - pages_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: pages_link_url }
        = s_('AdminSettingsPages|Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled. %{link_start}Learn more.%{link_end}').html_safe % { link_start: pages_link_start, link_end: '</a>'.html_safe }
    - if Gitlab.config.pages.access_control
      .form-group
        .form-check
          = f.check_box :force_pages_access_control, class: 'form-check-input'
          = f.label :force_pages_access_control, class: 'form-check-label' do
            = s_("AdminSettingsPages|Disable public access to Pages websites")
        .form-text.text-muted
          - pages_link_url = help_page_path('administration/pages/index', anchor: 'disable-public-access-to-all-pages-websites')
          - pages_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: pages_link_url }
          = s_("AdminSettingsPages|Access to Pages websites can be controlled based on the user's membership to a given project. By disabling public access to Pages websites, users will be required to be logged in to have access to all Pages websites in your instance. %{link_start}Learn more.%{link_end}").html_safe % { link_start: pages_link_start, link_end: '</a>'.html_safe }
    .form-group
      = f.label :max_pages_size, _('Maximum size of pages (MB)'), class: 'label-bold'
      = f.number_field :max_pages_size, class: 'form-control gl-form-input'
      .form-text.text-muted
        - pages_link_url = help_page_path('administration/pages/index', anchor: 'set-global-maximum-pages-size-per-project')
        - pages_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: pages_link_url }
        = s_('AdminSettingsPages|Set the maximum size of GitLab Pages per project. 0 for unlimited. %{link_start}Learn more.%{link_end}').html_safe % { link_start: pages_link_start, link_end: '</a>'.html_safe }
    %h5
      = s_("AdminSettingsPages|Configure Let's Encrypt")
    %p
      - lets_encrypt_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: "https://letsencrypt.org/" }
      = _("%{lets_encrypt_link_start}Let's Encrypt%{lets_encrypt_link_end} is a free, automated, and open certificate authority (CA), that issues digital certificates in order to enable HTTPS (SSL/TLS) for websites.").html_safe % { lets_encrypt_link_start: lets_encrypt_link_start, lets_encrypt_link_end: '</a>'.html_safe }
      .form-group
        = f.label :lets_encrypt_notification_email, _("Let's Encrypt email"), class: 'label-bold'
        = f.text_field :lets_encrypt_notification_email, class: 'form-control gl-form-input'
        .form-text.text-muted
          - pages_link_url = help_page_path('administration/pages/index', anchor: 'lets-encrypt-integration')
          - pages_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: pages_link_url }
          = s_("AdminSettingsPages|A Let's Encrypt account will be configured for this GitLab instance using this email address. You will receive emails to warn of expiring certificates. %{link_start}Learn more.%{link_end}").html_safe % { link_start: pages_link_start, link_end: '</a>'.html_safe }
      .form-group
        .form-check
          = f.check_box :lets_encrypt_terms_of_service_accepted, class: 'form-check-input'
          = f.label :lets_encrypt_terms_of_service_accepted, class: 'form-check-label' do
            - terms_of_service_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: lets_encrypt_terms_of_service_admin_application_settings_path }
            = s_("AdminSettingsPages|I have read and agree to the Let's Encrypt %{link_start}Terms of Service%{link_end} (PDF)").html_safe % { link_start: terms_of_service_link_start, link_end: '</a>'.html_safe }

  = f.submit _('Save changes'), class: "gl-button btn btn-confirm"
