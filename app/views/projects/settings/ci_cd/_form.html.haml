.row.gl-mt-3
  .col-lg-12
    = form_for @project, url: project_settings_ci_cd_path(@project, anchor: 'js-general-pipeline-settings') do |f|
      = form_errors(@project)
      %fieldset.builds-feature
        .form-group
          .form-check
            = f.check_box :public_builds, { class: 'form-check-input' }
            = f.label :public_builds, class: 'form-check-label' do
              %strong= _("Public pipelines")
            .form-text.text-muted
              = _("Allow public access to pipelines and job details, including output logs and artifacts.")
              = link_to sprite_icon('question-o'), help_page_path('ci/pipelines/settings', anchor: 'visibility-of-pipelines'), target: '_blank'

        .form-group
          .form-check
            = f.check_box :auto_cancel_pending_pipelines, { class: 'form-check-input' }, 'enabled', 'disabled'
            = f.label :auto_cancel_pending_pipelines, class: 'form-check-label' do
              %strong= _("Auto-cancel redundant pipelines")
            .form-text.text-muted
              = _("New pipelines cause older pipelines on the same branch to be cancelled.")
              = link_to sprite_icon('question-o'), help_page_path('ci/pipelines/settings', anchor: 'auto-cancel-redundant-pipelines'), target: '_blank'

        .form-group
          .form-check
            = f.fields_for :ci_cd_settings_attributes, @project.ci_cd_settings do |form|
              = form.check_box :forward_deployment_enabled, { class: 'form-check-input' }
              = form.label :forward_deployment_enabled, class: 'form-check-label' do
                %strong= _("Skip outdated deployment jobs")
              .form-text.text-muted
                = _("When a deployment job is successful, skip older deployment jobs that are still pending.")
                = link_to sprite_icon('question-o'), help_page_path('ci/pipelines/settings', anchor: 'skip-outdated-deployment-jobs'), target: '_blank'

        %hr
        .form-group
          %h5.gl-mt-0
            = _("Git strategy")
          %p
            = _("Choose Git strategy to fetch the project.")
            = link_to sprite_icon('question-o'), help_page_path('ci/pipelines/settings', anchor: 'git-strategy'), target: '_blank'
          .form-check
            = f.radio_button :build_allow_git_fetch, 'false', { class: 'form-check-input' }
            = f.label :build_allow_git_fetch_false, class: 'form-check-label' do
              %strong git clone
              %br
              %span
                = _("Clone the repository from scratch for every job.")
          .form-check
            = f.radio_button :build_allow_git_fetch, 'true', { class: 'form-check-input' }
            = f.label :build_allow_git_fetch_true, class: 'form-check-label' do
              %strong git fetch
              %br
              %span
                = html_escape(_("Re-use the project workspace. Falls back to %{code_open}git clone%{code_close} if the workspace doesn't exist.")) % { code_open: '<code>'.html_safe, code_close: '</code>'.html_safe }

        .form-group
          = f.fields_for :ci_cd_settings_attributes, @project.ci_cd_settings do |form|
            = form.label :default_git_depth, _('Git shallow clone'), class: 'label-bold'
            = form.number_field :default_git_depth, { class: 'form-control', min: 0, max: 1000 }
            %p.form-text.text-muted
              = _('The number of changes to fetch from GitLab when cloning a repository. This can speed up Pipelines execution. Keep empty or set to 0 to disable shallow clone by default and fetch all branches and tags each time.')

        %hr
        .form-group
          = f.label :build_timeout_human_readable, _('Timeout'), class: 'label-bold'
          = f.text_field :build_timeout_human_readable, class: 'form-control'
          %p.form-text.text-muted
            = html_escape(_('Jobs that run longer than the timeout time are marked as failed. Input value is in seconds by default. Human readable input is also accepted, for example %{code_open}1 hour%{code_close}.')) % { code_open: '<code>'.html_safe, code_close: '</code>'.html_safe }
            = link_to sprite_icon('question-o'), help_page_path('ci/pipelines/settings', anchor: 'timeout'), target: '_blank'

        - if can?(current_user, :update_max_artifacts_size, @project)
          %hr
          .form-group
            = f.label :max_artifacts_size, _('Maximum artifacts size'), class: 'label-bold'
            = f.number_field :max_artifacts_size, class: 'form-control'
            %p.form-text.text-muted
              = _("The maximum file size in megabytes for individual job artifacts")
              = link_to sprite_icon('question-o'), help_page_path('user/admin_area/settings/continuous_integration', anchor: 'maximum-artifacts-size'), target: '_blank'

        %hr
        .form-group
          = f.label :ci_config_path, _('CI/CD configuration file'), class: 'label-bold'
          = f.text_field :ci_config_path, class: 'form-control', placeholder: '.gitlab-ci.yml'
          %p.form-text.text-muted
            = html_escape(_("The path to the CI configuration file. Defaults to %{code_open}.gitlab-ci.yml%{code_close}")) % { code_open: '<code>'.html_safe, code_close: '</code>'.html_safe }
            = link_to sprite_icon('question-o'), help_page_path('ci/pipelines/settings', anchor: 'custom-ci-configuration-path'), target: '_blank'

        %hr
        .form-group
          = f.label :build_coverage_regex, _("Test coverage parsing"), class: 'label-bold'
          .input-group
            %span.input-group-prepend
              .input-group-text /
            = f.text_field :build_coverage_regex, class: 'form-control', placeholder: 'Regular expression', data: { qa_selector: 'build_coverage_regex_field' }
            %span.input-group-append
              .input-group-text /
          %p.form-text.text-muted
            = html_escape(_('The regular expression to use to find the test coverage output in the job log. For example use %{code_open}INSERT REGEX HERE%{code_close} for Simplecov (Ruby). Leave blank to disable.')) % { code_open: '<code>'.html_safe, code_close: '</code>'.html_safe }
            = link_to sprite_icon('question-o'), help_page_path('ci/pipelines/settings', anchor: 'test-coverage-parsing'), target: '_blank'

        = f.submit _('Save changes'), class: "btn btn-success", data: { qa_selector: 'save_general_pipelines_changes_button' }

%hr

.row.gl-mt-3
  = render partial: 'badge', collection: @badges
