/*
File generated by js-routes 1.4.9
Based on Rails 5.2.3 routes of Gitlab::Application
 */

(function() {
  var DeprecatedGlobbingBehavior, NodeTypes, ParameterMissing, ReservedOptions, SpecialOptionsKey, UriEncoderSegmentRegex, Utils, result, root,
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  ParameterMissing = function(message, fileName, lineNumber) {
    var instance;
    instance = new Error(message, fileName, lineNumber);
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    } else {
      instance.__proto__ = this.__proto__;
    }
    if (Error.captureStackTrace) {
      Error.captureStackTrace(instance, ParameterMissing);
    }
    return instance;
  };

  ParameterMissing.prototype = Object.create(Error.prototype, {
    constructor: {
      value: Error,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ParameterMissing, Error);
  } else {
    ParameterMissing.__proto__ = Error;
  }

  NodeTypes = {"GROUP":1,"CAT":2,"SYMBOL":3,"OR":4,"STAR":5,"LITERAL":6,"SLASH":7,"DOT":8};

  DeprecatedGlobbingBehavior = false;

  SpecialOptionsKey = "_options";

  UriEncoderSegmentRegex = /[^a-zA-Z0-9\-\._~!\$&'\(\)\*\+,;=:@]/g;

  ReservedOptions = ['anchor', 'trailing_slash', 'subdomain', 'host', 'port', 'protocol'];

  Utils = {
    configuration: {
      prefix: "",
      default_url_options: {},
      special_options_key: "_options",
      serializer: null
    },
    default_serializer: function(object, prefix) {
      var element, i, j, key, len, prop, s;
      if (prefix == null) {
        prefix = null;
      }
      if (object == null) {
        return "";
      }
      if (!prefix && !(this.get_object_type(object) === "object")) {
        throw new Error("Url parameters should be a javascript hash");
      }
      s = [];
      switch (this.get_object_type(object)) {
        case "array":
          for (i = j = 0, len = object.length; j < len; i = ++j) {
            element = object[i];
            s.push(this.default_serializer(element, prefix + "[]"));
          }
          break;
        case "object":
          for (key in object) {
            if (!hasProp.call(object, key)) continue;
            prop = object[key];
            if ((prop == null) && (prefix != null)) {
              prop = "";
            }
            if (prop != null) {
              if (prefix != null) {
                key = prefix + "[" + key + "]";
              }
              s.push(this.default_serializer(prop, key));
            }
          }
          break;
        default:
          if (object != null) {
            s.push((encodeURIComponent(prefix.toString())) + "=" + (encodeURIComponent(object.toString())));
          }
      }
      if (!s.length) {
        return "";
      }
      return s.join("&");
    },
    serialize: function(object) {
      var custom_serializer;
      custom_serializer = this.configuration.serializer;
      if ((custom_serializer != null) && this.get_object_type(custom_serializer) === "function") {
        return custom_serializer(object);
      } else {
        return this.default_serializer(object);
      }
    },
    clean_path: function(path) {
      var last_index;
      path = path.split("://");
      last_index = path.length - 1;
      path[last_index] = path[last_index].replace(/\/+/g, "/");
      return path.join("://");
    },
    extract_options: function(number_of_params, args) {
      var last_el, options;
      last_el = args[args.length - 1];
      if ((args.length > number_of_params && last_el === void 0) || ((last_el != null) && "object" === this.get_object_type(last_el) && !this.looks_like_serialized_model(last_el))) {
        options = args.pop() || {};
        delete options[this.configuration.special_options_key];
        return options;
      } else {
        return {};
      }
    },
    looks_like_serialized_model: function(object) {
      return !object[this.configuration.special_options_key] && ("id" in object || "to_param" in object);
    },
    path_identifier: function(object) {
      var property;
      if (object === 0) {
        return "0";
      }
      if (!object) {
        return "";
      }
      property = object;
      if (this.get_object_type(object) === "object") {
        if ("to_param" in object) {
          if (object.to_param == null) {
            throw new ParameterMissing("Route parameter missing: to_param");
          }
          property = object.to_param;
        } else if ("id" in object) {
          if (object.id == null) {
            throw new ParameterMissing("Route parameter missing: id");
          }
          property = object.id;
        } else {
          property = object;
        }
        if (this.get_object_type(property) === "function") {
          property = property.call(object);
        }
      }
      return property.toString();
    },
    clone: function(obj) {
      var attr, copy, key;
      if ((obj == null) || "object" !== this.get_object_type(obj)) {
        return obj;
      }
      copy = obj.constructor();
      for (key in obj) {
        if (!hasProp.call(obj, key)) continue;
        attr = obj[key];
        copy[key] = attr;
      }
      return copy;
    },
    merge: function() {
      var tap, xs;
      xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      tap = function(o, fn) {
        fn(o);
        return o;
      };
      if ((xs != null ? xs.length : void 0) > 0) {
        return tap({}, function(m) {
          var j, k, len, results, v, x;
          results = [];
          for (j = 0, len = xs.length; j < len; j++) {
            x = xs[j];
            results.push((function() {
              var results1;
              results1 = [];
              for (k in x) {
                v = x[k];
                results1.push(m[k] = v);
              }
              return results1;
            })());
          }
          return results;
        });
      }
    },
    normalize_options: function(parts, required_parts, default_options, actual_parameters) {
      var i, j, key, len, options, part, parts_options, result, route_parts, url_parameters, use_all_parts, value;
      options = this.extract_options(parts.length, actual_parameters);
      if (actual_parameters.length > parts.length) {
        throw new Error("Too many parameters provided for path");
      }
      use_all_parts = actual_parameters.length > required_parts.length;
      parts_options = {};
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        use_all_parts = true;
        if (this.indexOf(parts, key) >= 0) {
          parts_options[key] = value;
        }
      }
      options = this.merge(this.configuration.default_url_options, default_options, options);
      result = {};
      url_parameters = {};
      result['url_parameters'] = url_parameters;
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        value = options[key];
        if (this.indexOf(ReservedOptions, key) >= 0) {
          result[key] = value;
        } else {
          url_parameters[key] = value;
        }
      }
      route_parts = use_all_parts ? parts : required_parts;
      i = 0;
      for (j = 0, len = route_parts.length; j < len; j++) {
        part = route_parts[j];
        if (i < actual_parameters.length) {
          if (!parts_options.hasOwnProperty(part)) {
            url_parameters[part] = actual_parameters[i];
            ++i;
          }
        }
      }
      return result;
    },
    build_route: function(parts, required_parts, default_options, route, full_url, args) {
      var options, parameters, result, url, url_params;
      args = Array.prototype.slice.call(args);
      options = this.normalize_options(parts, required_parts, default_options, args);
      parameters = options['url_parameters'];
      result = "" + (this.get_prefix()) + (this.visit(route, parameters));
      url = Utils.clean_path(result);
      if (options['trailing_slash'] === true) {
        url = url.replace(/(.*?)[\/]?$/, "$1/");
      }
      if ((url_params = this.serialize(parameters)).length) {
        url += "?" + url_params;
      }
      url += options.anchor ? "#" + options.anchor : "";
      if (full_url) {
        url = this.route_url(options) + url;
      }
      return url;
    },
    visit: function(route, parameters, optional) {
      var left, left_part, right, right_part, type, value;
      if (optional == null) {
        optional = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return this.visit(left, parameters, true);
        case NodeTypes.STAR:
          return this.visit_globbing(left, parameters, true);
        case NodeTypes.LITERAL:
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
          return left;
        case NodeTypes.CAT:
          left_part = this.visit(left, parameters, optional);
          right_part = this.visit(right, parameters, optional);
          if (optional && ((this.is_optional_node(left[0]) && !left_part) || ((this.is_optional_node(right[0])) && !right_part))) {
            return "";
          }
          return "" + left_part + right_part;
        case NodeTypes.SYMBOL:
          value = parameters[left];
          delete parameters[left];
          if (value != null) {
            return this.encode_segment(this.path_identifier(value));
          }
          if (optional) {
            return "";
          } else {
            throw new ParameterMissing("Route parameter missing: " + left);
          }
          break;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    encode_segment: function(segment) {
      return segment.replace(UriEncoderSegmentRegex, function(str) {
        return encodeURIComponent(str);
      });
    },
    is_optional_node: function(node) {
      return this.indexOf([NodeTypes.STAR, NodeTypes.SYMBOL, NodeTypes.CAT], node) >= 0;
    },
    build_path_spec: function(route, wildcard) {
      var left, right, type;
      if (wildcard == null) {
        wildcard = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return "(" + (this.build_path_spec(left)) + ")";
        case NodeTypes.CAT:
          return "" + (this.build_path_spec(left)) + (this.build_path_spec(right));
        case NodeTypes.STAR:
          return this.build_path_spec(left, true);
        case NodeTypes.SYMBOL:
          if (wildcard === true) {
            return "" + (left[0] === '*' ? '' : '*') + left;
          } else {
            return ":" + left;
          }
          break;
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
        case NodeTypes.LITERAL:
          return left;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    visit_globbing: function(route, parameters, optional) {
      var left, right, type, value;
      type = route[0], left = route[1], right = route[2];
      value = parameters[left];
      delete parameters[left];
      if (value == null) {
        return this.visit(route, parameters, optional);
      }
      value = (function() {
        switch (this.get_object_type(value)) {
          case "array":
            return value.join("/");
          default:
            return value;
        }
      }).call(this);
      if (DeprecatedGlobbingBehavior) {
        return this.path_identifier(value);
      } else {
        return encodeURI(this.path_identifier(value));
      }
    },
    get_prefix: function() {
      var prefix;
      prefix = this.configuration.prefix;
      if (prefix !== "") {
        prefix = (prefix.match("/$") ? prefix : prefix + "/");
      }
      return prefix;
    },
    route: function(parts_table, default_options, route_spec, full_url) {
      var j, len, part, parts, path_fn, ref, required, required_parts;
      required_parts = [];
      parts = [];
      for (j = 0, len = parts_table.length; j < len; j++) {
        ref = parts_table[j], part = ref[0], required = ref[1];
        parts.push(part);
        if (required) {
          required_parts.push(part);
        }
      }
      path_fn = function() {
        return Utils.build_route(parts, required_parts, default_options, route_spec, full_url, arguments);
      };
      path_fn.required_params = required_parts;
      path_fn.toString = function() {
        return Utils.build_path_spec(route_spec);
      };
      return path_fn;
    },
    route_url: function(route_defaults) {
      var hostname, port, protocol, subdomain;
      if (typeof route_defaults === 'string') {
        return route_defaults;
      }
      hostname = route_defaults.host || Utils.current_host();
      if (!hostname) {
        return '';
      }
      subdomain = route_defaults.subdomain ? route_defaults.subdomain + '.' : '';
      protocol = route_defaults.protocol || Utils.current_protocol();
      port = route_defaults.port || (!route_defaults.host ? Utils.current_port() : void 0);
      port = port ? ":" + port : '';
      return protocol + "://" + subdomain + hostname + port;
    },
    has_location: function() {
      return (typeof window !== "undefined" && window !== null ? window.location : void 0) != null;
    },
    current_host: function() {
      if (this.has_location()) {
        return window.location.hostname;
      } else {
        return null;
      }
    },
    current_protocol: function() {
      if (this.has_location() && window.location.protocol !== '') {
        return window.location.protocol.replace(/:$/, '');
      } else {
        return 'http';
      }
    },
    current_port: function() {
      if (this.has_location() && window.location.port !== '') {
        return window.location.port;
      } else {
        return '';
      }
    },
    _classToTypeCache: null,
    _classToType: function() {
      var j, len, name, ref;
      if (this._classToTypeCache != null) {
        return this._classToTypeCache;
      }
      this._classToTypeCache = {};
      ref = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
      for (j = 0, len = ref.length; j < len; j++) {
        name = ref[j];
        this._classToTypeCache["[object " + name + "]"] = name.toLowerCase();
      }
      return this._classToTypeCache;
    },
    get_object_type: function(obj) {
      if (root.jQuery && (root.jQuery.type != null)) {
        return root.jQuery.type(obj);
      }
      if (obj == null) {
        return "" + obj;
      }
      if (typeof obj === "object" || typeof obj === "function") {
        return this._classToType()[Object.prototype.toString.call(obj)] || "object";
      } else {
        return typeof obj;
      }
    },
    indexOf: function(array, element) {
      if (Array.prototype.indexOf) {
        return array.indexOf(element);
      } else {
        return this.indexOfImplementation(array, element);
      }
    },
    indexOfImplementation: function(array, element) {
      var el, i, j, len, result;
      result = -1;
      for (i = j = 0, len = array.length; j < len; i = ++j) {
        el = array[i];
        if (el === element) {
          result = i;
        }
      }
      return result;
    },
    namespace: function(root, namespace, routes) {
      var index, j, len, part, parts;
      parts = namespace ? namespace.split(".") : [];
      if (parts.length === 0) {
        return routes;
      }
      for (index = j = 0, len = parts.length; j < len; index = ++j) {
        part = parts[index];
        if (index < parts.length - 1) {
          root = (root[part] || (root[part] = {}));
        } else {
          return root[part] = routes;
        }
      }
    },
    configure: function(new_config) {
      return this.configuration = this.merge(this.configuration, new_config);
    },
    config: function() {
      return this.clone(this.configuration);
    },
    make: function() {
      var routes;
      routes = {
// admin_abuse_report => /admin/abuse_reports/:id(.:format)
  // function(id, options)
  admin_abuse_report_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"abuse_reports",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_abuse_reports => /admin/abuse_reports(.:format)
  // function(options)
  admin_abuse_reports_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"abuse_reports",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_appearances => /admin/appearance(.:format)
  // function(options)
  admin_appearances_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"appearance",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_application => /admin/applications/:id(.:format)
  // function(id, options)
  admin_application_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"applications",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_application_settings => /admin/application_settings(.:format)
  // function(options)
  admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_application_settings_service => /admin/application_settings/services/:id(.:format)
  // function(id, options)
  admin_application_settings_service_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_application_settings_services => /admin/application_settings/services(.:format)
  // function(options)
  admin_application_settings_services_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"services",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_applications => /admin/applications(.:format)
  // function(options)
  admin_applications_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"applications",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_audit_logs => /admin/audit_logs(.:format)
  // function(options)
  admin_audit_logs_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"audit_logs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_background_jobs => /admin/background_jobs(.:format)
  // function(options)
  admin_background_jobs_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"background_jobs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_broadcast_message => /admin/broadcast_messages/:id(.:format)
  // function(id, options)
  admin_broadcast_message_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"broadcast_messages",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_broadcast_messages => /admin/broadcast_messages(.:format)
  // function(options)
  admin_broadcast_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"broadcast_messages",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_cluster => /admin/clusters/:id(.:format)
  // function(id, options)
  admin_cluster_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_clusters => /admin/clusters(.:format)
  // function(options)
  admin_clusters_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_dashboard_stats => /admin/dashboard/stats(.:format)
  // function(options)
  admin_dashboard_stats_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"dashboard",false],[2,[7,"/",false],[2,[6,"stats",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_deploy_key => /admin/deploy_keys/:id(.:format)
  // function(id, options)
  admin_deploy_key_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"deploy_keys",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_deploy_keys => /admin/deploy_keys(.:format)
  // function(options)
  admin_deploy_keys_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"deploy_keys",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_elasticsearch_enqueue_index => /admin/elasticsearch/enqueue_index(.:format)
  // function(options)
  admin_elasticsearch_enqueue_index_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"elasticsearch",false],[2,[7,"/",false],[2,[6,"enqueue_index",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_email => /admin/email(.:format)
  // function(options)
  admin_email_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"email",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_geo_node => /admin/geo/nodes/:id(.:format)
  // function(id, options)
  admin_geo_node_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"nodes",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_geo_nodes => /admin/geo/nodes(.:format)
  // function(options)
  admin_geo_nodes_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"nodes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_geo_project => /admin/geo/projects/:id(.:format)
  // function(id, options)
  admin_geo_project_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_geo_projects => /admin/geo/projects(.:format)
  // function(options)
  admin_geo_projects_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"projects",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_geo_upload => /admin/geo/uploads/:id(.:format)
  // function(id, options)
  admin_geo_upload_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"uploads",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_geo_uploads => /admin/geo/uploads(.:format)
  // function(options)
  admin_geo_uploads_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"uploads",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_gitaly_servers => /admin/gitaly_servers(.:format)
  // function(options)
  admin_gitaly_servers_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"gitaly_servers",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_group => /admin/groups/*id(.:format)
  // function(id, options)
  admin_group_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[5,[3,"id",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_group_edit => /admin/groups/*id/edit(.:format)
  // function(id, options)
  admin_group_edit_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[5,[3,"id",false],false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_group_members_update => /admin/groups/*id/members_update(.:format)
  // function(id, options)
  admin_group_members_update_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[5,[3,"id",false],false],[2,[7,"/",false],[2,[6,"members_update",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_group_reset_runners_minutes => /admin/groups/*id/reset_runners_minutes(.:format)
  // function(id, options)
  admin_group_reset_runners_minutes_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[5,[3,"id",false],false],[2,[7,"/",false],[2,[6,"reset_runners_minutes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_groups => /admin/groups(.:format)
  // function(options)
  admin_groups_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"groups",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_health_check => /admin/health_check(.:format)
  // function(options)
  admin_health_check_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"health_check",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_hook => /admin/hooks/:id(.:format)
  // function(id, options)
  admin_hook_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"hooks",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_hook_hook_log => /admin/hooks/:hook_id/hook_logs/:id(.:format)
  // function(hook_id, id, options)
  admin_hook_hook_log_path: Utils.route([["hook_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"hooks",false],[2,[7,"/",false],[2,[3,"hook_id",false],[2,[7,"/",false],[2,[6,"hook_logs",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// admin_hooks => /admin/hooks(.:format)
  // function(options)
  admin_hooks_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"hooks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_impersonation => /admin/impersonation(.:format)
  // function(options)
  admin_impersonation_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"impersonation",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_instance_review => /admin/instance_review(.:format)
  // function(options)
  admin_instance_review_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"instance_review",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_jobs => /admin/jobs(.:format)
  // function(options)
  admin_jobs_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"jobs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_label => /admin/labels/:id(.:format)
  // function(id, options)
  admin_label_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"labels",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_labels => /admin/labels(.:format)
  // function(options)
  admin_labels_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"labels",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_license => /admin/license(.:format)
  // function(options)
  admin_license_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"license",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_logs => /admin/logs(.:format)
  // function(options)
  admin_logs_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"logs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_namespace_project => /admin/projects/*namespace_id/:id(.:format)
  // function(namespace_id, id, options)
  admin_namespace_project_path: Utils.route([["namespace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[5,[3,"namespace_id",false],false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_namespace_project_runner_project => /admin/projects/*namespace_id/:project_id/runner_projects/:id(.:format)
  // function(namespace_id, project_id, id, options)
  admin_namespace_project_runner_project_path: Utils.route([["namespace_id",true],["project_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[5,[3,"namespace_id",false],false],[2,[7,"/",false],[2,[3,"project_id",false],[2,[7,"/",false],[2,[6,"runner_projects",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// admin_namespace_project_runner_projects => /admin/projects/*namespace_id/:project_id/runner_projects(.:format)
  // function(namespace_id, project_id, options)
  admin_namespace_project_runner_projects_path: Utils.route([["namespace_id",true],["project_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[5,[3,"namespace_id",false],false],[2,[7,"/",false],[2,[3,"project_id",false],[2,[7,"/",false],[2,[6,"runner_projects",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// admin_projects => /admin/projects(.:format)
  // function(options)
  admin_projects_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"projects",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_push_rule => /admin/push_rule(.:format)
  // function(options)
  admin_push_rule_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"push_rule",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_requests_profile => /admin/requests_profiles/:name(.:format)
  // function(name, options)
  admin_requests_profile_path: Utils.route([["name",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"requests_profiles",false],[2,[7,"/",false],[2,[3,"name",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_requests_profiles => /admin/requests_profiles(.:format)
  // function(options)
  admin_requests_profiles_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"requests_profiles",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_root => /admin(.:format)
  // function(options)
  admin_root_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[1,[2,[8,".",false],[3,"format",false]],false]]]),
// admin_runner => /admin/runners/:id(.:format)
  // function(id, options)
  admin_runner_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"runners",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_runners => /admin/runners(.:format)
  // function(options)
  admin_runners_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"runners",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_spam_log => /admin/spam_logs/:id(.:format)
  // function(id, options)
  admin_spam_log_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"spam_logs",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_spam_logs => /admin/spam_logs(.:format)
  // function(options)
  admin_spam_logs_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"spam_logs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_system_info => /admin/system_info(.:format)
  // function(options)
  admin_system_info_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"system_info",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// admin_user => /admin/users/:id(.:format)
  // function(id, options)
  admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// admin_user_identities => /admin/users/:user_id/identities(.:format)
  // function(user_id, options)
  admin_user_identities_path: Utils.route([["user_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"identities",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_user_identity => /admin/users/:user_id/identities/:id(.:format)
  // function(user_id, id, options)
  admin_user_identity_path: Utils.route([["user_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"identities",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// admin_user_impersonation_tokens => /admin/users/:user_id/impersonation_tokens(.:format)
  // function(user_id, options)
  admin_user_impersonation_tokens_path: Utils.route([["user_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"impersonation_tokens",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// admin_user_key => /admin/users/:user_id/keys/:id(.:format)
  // function(user_id, id, options)
  admin_user_key_path: Utils.route([["user_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"keys",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// admin_users => /admin/users(.:format)
  // function(options)
  admin_users_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// block_admin_user => /admin/users/:id/block(.:format)
  // function(id, options)
  block_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"block",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// cancel_all_admin_jobs => /admin/jobs/cancel_all(.:format)
  // function(options)
  cancel_all_admin_jobs_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"jobs",false],[2,[7,"/",false],[2,[6,"cancel_all",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// ci_cd_admin_application_settings => /admin/application_settings/ci_cd(.:format)
  // function(options)
  ci_cd_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"ci_cd",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// clear_repository_check_states_admin_application_settings => /admin/application_settings/clear_repository_check_states(.:format)
  // function(options)
  clear_repository_check_states_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"clear_repository_check_states",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// cluster_status_admin_cluster => /admin/clusters/:id/cluster_status(.:format)
  // function(id, options)
  cluster_status_admin_cluster_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"cluster_status",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// confirm_admin_user => /admin/users/:id/confirm(.:format)
  // function(id, options)
  confirm_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"confirm",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// create_gcp_admin_clusters => /admin/clusters/create_gcp(.:format)
  // function(options)
  create_gcp_admin_clusters_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[2,[7,"/",false],[2,[6,"create_gcp",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// create_user_admin_clusters => /admin/clusters/create_user(.:format)
  // function(options)
  create_user_admin_clusters_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[2,[7,"/",false],[2,[6,"create_user",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// disable_two_factor_admin_user => /admin/users/:id/disable_two_factor(.:format)
  // function(id, options)
  disable_two_factor_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"disable_two_factor",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// download_admin_license => /admin/license/download(.:format)
  // function(options)
  download_admin_license_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"license",false],[2,[7,"/",false],[2,[6,"download",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// edit_admin_application => /admin/applications/:id/edit(.:format)
  // function(id, options)
  edit_admin_application_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"applications",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_admin_application_settings_service => /admin/application_settings/services/:id/edit(.:format)
  // function(id, options)
  edit_admin_application_settings_service_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// edit_admin_broadcast_message => /admin/broadcast_messages/:id/edit(.:format)
  // function(id, options)
  edit_admin_broadcast_message_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"broadcast_messages",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_admin_deploy_key => /admin/deploy_keys/:id/edit(.:format)
  // function(id, options)
  edit_admin_deploy_key_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"deploy_keys",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_admin_geo_node => /admin/geo/nodes/:id/edit(.:format)
  // function(id, options)
  edit_admin_geo_node_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"nodes",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// edit_admin_hook => /admin/hooks/:id/edit(.:format)
  // function(id, options)
  edit_admin_hook_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"hooks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_admin_label => /admin/labels/:id/edit(.:format)
  // function(id, options)
  edit_admin_label_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"labels",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_admin_user => /admin/users/:id/edit(.:format)
  // function(id, options)
  edit_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_admin_user_identity => /admin/users/:user_id/identities/:id/edit(.:format)
  // function(user_id, id, options)
  edit_admin_user_identity_path: Utils.route([["user_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"identities",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// favicon_admin_appearances => /admin/appearance/favicon(.:format)
  // function(options)
  favicon_admin_appearances_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"appearance",false],[2,[7,"/",false],[2,[6,"favicon",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// force_redownload_admin_geo_project => /admin/geo/projects/:id/force_redownload(.:format)
  // function(id, options)
  force_redownload_admin_geo_project_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"force_redownload",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// geo_admin_application_settings => /admin/application_settings/geo(.:format)
  // function(options)
  geo_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"geo",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// header_logos_admin_appearances => /admin/appearance/header_logos(.:format)
  // function(options)
  header_logos_admin_appearances_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"appearance",false],[2,[7,"/",false],[2,[6,"header_logos",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// impersonate_admin_user => /admin/users/:id/impersonate(.:format)
  // function(id, options)
  impersonate_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"impersonate",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// install_applications_admin_cluster => /admin/clusters/:id/applications/:application(.:format)
  // function(id, application, options)
  install_applications_admin_cluster_path: Utils.route([["id",true],["application",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"applications",false],[2,[7,"/",false],[2,[3,"application",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// integrations_admin_application_settings => /admin/application_settings/integrations(.:format)
  // function(options)
  integrations_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"integrations",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// keys_admin_user => /admin/users/:id/keys(.:format)
  // function(id, options)
  keys_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"keys",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// lets_encrypt_terms_of_service_admin_application_settings => /admin/application_settings/lets_encrypt_terms_of_service(.:format)
  // function(options)
  lets_encrypt_terms_of_service_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"lets_encrypt_terms_of_service",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// logo_admin_appearances => /admin/appearance/logo(.:format)
  // function(options)
  logo_admin_appearances_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"appearance",false],[2,[7,"/",false],[2,[6,"logo",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// mark_as_ham_admin_spam_log => /admin/spam_logs/:id/mark_as_ham(.:format)
  // function(id, options)
  mark_as_ham_admin_spam_log_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"spam_logs",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"mark_as_ham",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// metrics_admin_cluster => /admin/clusters/:id/metrics(.:format)
  // function(id, options)
  metrics_admin_cluster_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"metrics",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// metrics_and_profiling_admin_application_settings => /admin/application_settings/metrics_and_profiling(.:format)
  // function(options)
  metrics_and_profiling_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"metrics_and_profiling",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// network_admin_application_settings => /admin/application_settings/network(.:format)
  // function(options)
  network_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"network",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_admin_application => /admin/applications/new(.:format)
  // function(options)
  new_admin_application_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"applications",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_admin_cluster => /admin/clusters/new(.:format)
  // function(options)
  new_admin_cluster_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_admin_deploy_key => /admin/deploy_keys/new(.:format)
  // function(options)
  new_admin_deploy_key_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"deploy_keys",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_admin_geo_node => /admin/geo/nodes/new(.:format)
  // function(options)
  new_admin_geo_node_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"nodes",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_admin_group => /admin/groups/new(.:format)
  // function(options)
  new_admin_group_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_admin_label => /admin/labels/new(.:format)
  // function(options)
  new_admin_label_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"labels",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_admin_license => /admin/license/new(.:format)
  // function(options)
  new_admin_license_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"license",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_admin_user => /admin/users/new(.:format)
  // function(options)
  new_admin_user_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_admin_user_identity => /admin/users/:user_id/identities/new(.:format)
  // function(user_id, options)
  new_admin_user_identity_path: Utils.route([["user_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"identities",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// pause_admin_runner => /admin/runners/:id/pause(.:format)
  // function(id, options)
  pause_admin_runner_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"runners",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"pause",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// preferences_admin_application_settings => /admin/application_settings/preferences(.:format)
  // function(options)
  preferences_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"preferences",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// preview_admin_broadcast_messages => /admin/broadcast_messages/preview(.:format)
  // function(options)
  preview_admin_broadcast_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"broadcast_messages",false],[2,[7,"/",false],[2,[6,"preview",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// preview_sign_in_admin_appearances => /admin/appearance/preview_sign_in(.:format)
  // function(options)
  preview_sign_in_admin_appearances_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"appearance",false],[2,[7,"/",false],[2,[6,"preview_sign_in",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// projects_admin_user => /admin/users/:id/projects(.:format)
  // function(id, options)
  projects_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"projects",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// recheck_admin_geo_project => /admin/geo/projects/:id/recheck(.:format)
  // function(id, options)
  recheck_admin_geo_project_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"recheck",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// recheck_all_admin_geo_projects => /admin/geo/projects/recheck_all(.:format)
  // function(options)
  recheck_all_admin_geo_projects_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[6,"recheck_all",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// remove_email_admin_user => /admin/users/:id/remove/:email_id(.:format)
  // function(id, email_id, options)
  remove_email_admin_user_path: Utils.route([["id",true],["email_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"remove",false],[2,[7,"/",false],[2,[3,"email_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// reporting_admin_application_settings => /admin/application_settings/reporting(.:format)
  // function(options)
  reporting_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"reporting",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// repository_admin_application_settings => /admin/application_settings/repository(.:format)
  // function(options)
  repository_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"repository",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// repository_check_admin_namespace_project => /admin/projects/*namespace_id/:id/repository_check(.:format)
  // function(namespace_id, id, options)
  repository_check_admin_namespace_project_path: Utils.route([["namespace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[5,[3,"namespace_id",false],false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"repository_check",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// reset_health_check_token_admin_application_settings => /admin/application_settings/reset_health_check_token(.:format)
  // function(options)
  reset_health_check_token_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"reset_health_check_token",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// reset_registration_token_admin_application_settings => /admin/application_settings/reset_registration_token(.:format)
  // function(options)
  reset_registration_token_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"reset_registration_token",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// reset_runners_minutes_admin_user => /admin/users/:id/reset_runners_minutes(.:format)
  // function(id, options)
  reset_runners_minutes_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"reset_runners_minutes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// resume_admin_runner => /admin/runners/:id/resume(.:format)
  // function(id, options)
  resume_admin_runner_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"runners",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"resume",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// resync_admin_geo_project => /admin/geo/projects/:id/resync(.:format)
  // function(id, options)
  resync_admin_geo_project_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"resync",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// resync_all_admin_geo_projects => /admin/geo/projects/resync_all(.:format)
  // function(options)
  resync_all_admin_geo_projects_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[6,"resync_all",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// retry_admin_hook_hook_log => /admin/hooks/:hook_id/hook_logs/:id/retry(.:format)
  // function(hook_id, id, options)
  retry_admin_hook_hook_log_path: Utils.route([["hook_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"hooks",false],[2,[7,"/",false],[2,[3,"hook_id",false],[2,[7,"/",false],[2,[6,"hook_logs",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"retry",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// revoke_admin_user_impersonation_token => /admin/users/:user_id/impersonation_tokens/:id/revoke(.:format)
  // function(user_id, id, options)
  revoke_admin_user_impersonation_token_path: Utils.route([["user_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"impersonation_tokens",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"revoke",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// tag_list_admin_runners => /admin/runners/tag_list(.:format)
  // function(options)
  tag_list_admin_runners_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"runners",false],[2,[7,"/",false],[2,[6,"tag_list",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// templates_admin_application_settings => /admin/application_settings/templates(.:format)
  // function(options)
  templates_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"templates",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// test_admin_hook => /admin/hooks/:id/test(.:format)
  // function(id, options)
  test_admin_hook_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"hooks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"test",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// transfer_admin_namespace_project => /admin/projects/*namespace_id/:id/transfer(.:format)
  // function(namespace_id, id, options)
  transfer_admin_namespace_project_path: Utils.route([["namespace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[5,[3,"namespace_id",false],false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"transfer",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// unblock_admin_user => /admin/users/:id/unblock(.:format)
  // function(id, options)
  unblock_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"unblock",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// uninstall_applications_admin_cluster => /admin/clusters/:id/applications/:application(.:format)
  // function(id, application, options)
  uninstall_applications_admin_cluster_path: Utils.route([["id",true],["application",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"applications",false],[2,[7,"/",false],[2,[3,"application",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// unlock_admin_user => /admin/users/:id/unlock(.:format)
  // function(id, options)
  unlock_admin_user_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"unlock",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// update_applications_admin_cluster => /admin/clusters/:id/applications/:application(.:format)
  // function(id, application, options)
  update_applications_admin_cluster_path: Utils.route([["id",true],["application",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"clusters",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"applications",false],[2,[7,"/",false],[2,[3,"application",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// usage_data_admin_application_settings => /admin/application_settings/usage_data(.:format)
  // function(options)
  usage_data_admin_application_settings_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"application_settings",false],[2,[7,"/",false],[2,[6,"usage_data",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]])}
;
      routes.configure = function(config) {
        return Utils.configure(config);
      };
      routes.config = function() {
        return Utils.config();
      };
      Object.defineProperty(routes, 'defaults', {
        get: function() {
          throw new Error("Routes" + ".defaults is removed. Use " + "Routes" + ".configure() instead.");
        },
        set: function(value) {}
      });
      routes.default_serializer = function(object, prefix) {
        return Utils.default_serializer(object, prefix);
      };
      return Utils.namespace(root, "Routes", routes);
    }
  };

  result = Utils.make();

  if (typeof define === "function" && define.amd) {
    define([], function() {
      return result;
    });
  }

  return result;

}).call(this);
