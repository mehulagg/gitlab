import { isArray } from 'lodash';
import { convertToCamelCase } from '~/lib/utils/text_utility';

export const serializeFormEntries = (entries) =>
  entries.reduce((acc, { name, value }) => Object.assign(acc, { [name]: value }), {});

export const serializeForm = (form) => {
  const fdata = new FormData(form);
  const entries = Array.from(fdata.keys()).map((key) => {
    let val = fdata.getAll(key);
    // Microsoft Edge has a bug in FormData.getAll() that returns an undefined
    // value for each form element that does not match the given key:
    // https://github.com/jimmywarting/FormData/issues/80
    val = val.filter((n) => n);
    return { name: key, value: val.length === 1 ? val[0] : val };
  });

  return serializeFormEntries(entries);
};

/**
 * Check if the value provided is empty or not
 *
 * It is being used to check if a form input
 * value has been set or not
 *
 * @param {String, Number, Array} - Any form value
 * @returns {Boolean} - returns false if a value is set
 *
 * @example
 * returns true for '', [], null, undefined
 */
export const isEmptyValue = (value) => value == null || value.length === 0;

/**
 * A form object serializer
 *
 * @param {Object} - Form Object
 * @returns {Object} - Serialized Form Object
 *
 * @example
 * Input
 * {"project": {"value": "hello", "state": false}, "username": {"value": "john"}}
 *
 * Returns
 * {"project": "hello", "username": "john"}
 */
export const serializeFormObject = (form) =>
  Object.fromEntries(
    Object.entries(form).reduce((acc, [name, { value }]) => {
      if (!isEmptyValue(value)) {
        acc.push([name, value]);
      }
      return acc;
    }, []),
  );

/**
 * Parse HTML attributes generated by Rails.
 * Helpful when adding Vue components to Rails forms.
 * @param {HTMLInputElement} mountEl
 * @returns {Object} - Serialized Form Object
 *
 * @example
 * mountEl
 * <div class="js-foo-bar">
 *   <input class="form-control gl-form-input" type="text" placeholder="Name" value="Administrator" name="user[name]" id="user_name">
 *   <input type="checkbox" name="user[interests][]" id="user_interests_vue" value="Vue">
 *   <input type="checkbox" name="user[interests][]" id="user_interests_graphql" value="GraphQL">
 * </div>
 *
 * Returns
 * {
 *   name: {
 *     name: 'user[name]',
 *     id: 'user_name',
 *     value: 'Administrator',
 *     placeholder: 'Name',
 *   },
 *   interests: [
 *     {
 *       name: 'user[interests][]',
 *       id: 'user_interests_vue',
 *       value: 'Vue',
 *     },
 *     {
 *       name: 'user[interests][]',
 *       id: 'user_interests_graphql',
 *       value: 'GraphQL',
 *     },
 *   ],
 * }
 */
export const parseRailsFormFields = (mountEl) => {
  const inputs = mountEl.querySelectorAll('input, textarea');

  return [...inputs].reduce((accumulator, input) => {
    const nameAttribute = input.name;
    const fieldName = nameAttribute.match(/\[([a-z0-9_]+)\]/)[1];

    if (!fieldName) {
      return accumulator;
    }

    const fieldNameCamelCase = convertToCamelCase(fieldName);

    const { id, value, placeholder } = input;
    const attributes = {
      name: nameAttribute,
      id,
      value,
      ...(placeholder && { placeholder }),
    };

    if (Object.prototype.hasOwnProperty.call(accumulator, fieldNameCamelCase)) {
      const existingFieldAttributes = accumulator[fieldNameCamelCase];
      if (isArray(existingFieldAttributes)) {
        return {
          ...accumulator,
          [fieldNameCamelCase]: [...existingFieldAttributes, attributes],
        };
      }

      return {
        ...accumulator,
        [fieldNameCamelCase]: [existingFieldAttributes, attributes],
      };
    }

    return {
      ...accumulator,
      [fieldNameCamelCase]: attributes,
    };
  }, {});
};
