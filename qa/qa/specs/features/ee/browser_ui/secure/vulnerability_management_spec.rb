# frozen_string_literal: true

require 'pathname'

module QA
  context 'Secure', :docker, :runner, quarantine: { issue: 'https://gitlab.com/gitlab-org/gitlab/-/issues/219519', type: :investigating } do
    describe 'Security Reports in a Merge Request' do
      let(:sast_vuln_count) { 5 }
      let(:dependency_scan_vuln_count) { 4 }
      let(:container_scan_vuln_count) { 8 }
      let(:vuln_name) { "Regular Expression Denial of Service in debug" }
      let(:remediable_vuln_name) { "Authentication bypass via incorrect DOM traversal and canonicalization in saml2-js" }

      after(:all) do
        @runner.remove_via_api!

        Runtime::Feature.enable('job_log_json') if @job_log_json_flag_enabled
      end

      before(:all) do
        @executor = "qa-runner-#{Time.now.to_i}"

        Flow::Login.sign_in

        @project = Resource::Project.fabricate_via_api! do |p|
          p.name = Runtime::Env.auto_devops_project_name || 'project-with-secure'
          p.description = 'Project with Secure'
        end

        @runner = Resource::Runner.fabricate! do |runner|
          runner.project = @project
          runner.name = @executor
          runner.tags = %w[qa test]
        end

        commit_message = 'Add premade security reports'
        @commit = Resource::Repository::Commit.fabricate_via_api! do |commit|
          commit.project = @project
          commit.commit_message = commit_message
          commit.branch = 'secure-mr'
          commit.add_directory(
            Pathname.new(__dir__).join('../../../../../ee/fixtures/secure_premade_reports')
          )
        end
        @project.wait_for_push(commit_message)

        @merge_request = Resource::MergeRequest.fabricate_via_api! do |mr|
          mr.project = @project
          mr.source_branch = 'secure-mr'
          mr.target_branch = 'master'
          mr.source = @source
          mr.target = 'master'
          mr.target_new_branch = false
        end

        @project.visit!
        Page::Project::Menu.perform(&:click_ci_cd_pipelines)
        Page::Project::Pipeline::Index.perform(&:wait_for_latest_pipeline_success)
      end

      before do
        Flow::Login.sign_in_unless_signed_in
        @merge_request.visit!
      end

      it 'can dismiss a vulnerability with a reason' do
        dismiss_reason = "Vulnerability not applicable"

        Page::MergeRequest::Show.perform do |merge_request|
          expect(merge_request).to have_vulnerability_report
          merge_request.dismiss_vulnerability_with_reason(vuln_name, dismiss_reason)
          merge_request.click_vulnerability(vuln_name)

          expect(merge_request).to have_opened_dismissed_vulnerability(dismiss_reason)
        end
      end

      it 'can create an issue from a vulnerability' do
        Page::MergeRequest::Show.perform do |merge_request|
          expect(merge_request).to have_vulnerability_report
          merge_request.create_vulnerability_issue(vuln_name)
        end

        Page::Project::Issue::Show.perform do |issue|
          expect(issue).to have_title("Investigate vulnerability: #{vuln_name}")
        end
      end

      it 'can create an auto-remediation MR' do
        Page::MergeRequest::Show.perform do |merge_request|
          expect(merge_request).to have_vulnerability_report
          merge_request.resolve_vulnerability_with_mr remediable_vuln_name

          # Context changes as resolve method creates new MR
          expect(merge_request).to have_title remediable_vuln_name
        end
      end
    end
  end
end
